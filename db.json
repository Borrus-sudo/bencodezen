{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/bencodezen/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"source/images/2016/cssdevconf2016-email-min.jpg","path":"images/2016/cssdevconf2016-email-min.jpg","modified":0,"renderable":0},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/bencodezen/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/flexy/source/LICENSE","path":"LICENSE","modified":0,"renderable":1},{"_id":"themes/flexy/source/scripts/index.js","path":"scripts/index.js","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-114x114.png","path":"images/apple-touch-icon-114x114.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-144x144.png","path":"images/apple-touch-icon-144x144.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-152x152.png","path":"images/apple-touch-icon-152x152.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-120x120.png","path":"images/apple-touch-icon-120x120.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-57x57.png","path":"images/apple-touch-icon-57x57.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-180x180.png","path":"images/apple-touch-icon-180x180.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-60x60.png","path":"images/apple-touch-icon-60x60.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-72x72.png","path":"images/apple-touch-icon-72x72.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-76x76.png","path":"images/apple-touch-icon-76x76.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon-precomposed.png","path":"images/apple-touch-icon-precomposed.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/favicon-160x160.png","path":"images/favicon-160x160.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/favicon-96x96.png","path":"images/favicon-96x96.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/mstile-150x150.png","path":"images/mstile-150x150.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/mstile-144x144.png","path":"images/mstile-144x144.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/mstile-310x150.png","path":"images/mstile-310x150.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/mstile-70x70.png","path":"images/mstile-70x70.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/mstile-310x310.png","path":"images/mstile-310x310.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/stars.svg","path":"images/stars.svg","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/svdb.png","path":"images/svdb.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/styles/normalize.css","path":"styles/normalize.css","modified":0,"renderable":1},{"_id":"themes/flexy/source/styles/screen.styl","path":"styles/screen.styl","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/header.jpg","path":"images/header.jpg","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/screenshot_mobile.png","path":"images/screenshot_mobile.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/images/screenshot.png","path":"images/screenshot.png","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/fira/400.woff2","path":"fonts/fira/400.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/fira/500.woff2","path":"fonts/fira/500.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/droidserif/400.woff","path":"fonts/droidserif/400.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/droidserif/400.woff2","path":"fonts/droidserif/400.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/droidserif/400i.woff","path":"fonts/droidserif/400i.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/droidserif/400i.woff2","path":"fonts/droidserif/400i.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/droidserif/700.woff","path":"fonts/droidserif/700.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/droidserif/700.woff2","path":"fonts/droidserif/700.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/droidserif/700i.woff","path":"fonts/droidserif/700i.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/droidserif/700i.woff2","path":"fonts/droidserif/700i.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/300.woff","path":"fonts/opensans/300.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/300.woff2","path":"fonts/opensans/300.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/300i.woff2","path":"fonts/opensans/300i.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/400.woff","path":"fonts/opensans/400.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/400.woff2","path":"fonts/opensans/400.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/400i.woff2","path":"fonts/opensans/400i.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/600.woff2","path":"fonts/opensans/600.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/600i.woff2","path":"fonts/opensans/600i.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/700.woff","path":"fonts/opensans/700.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/700.woff2","path":"fonts/opensans/700.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/700i.woff2","path":"fonts/opensans/700i.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/800i.woff2","path":"fonts/opensans/800i.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/800.woff2","path":"fonts/opensans/800.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/fira/400.woff","path":"fonts/fira/400.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/fira/500.woff","path":"fonts/fira/500.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/fira/700.woff","path":"fonts/fira/700.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/fira/700.woff2","path":"fonts/fira/700.woff2","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/300i.woff","path":"fonts/opensans/300i.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/400i.woff","path":"fonts/opensans/400i.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/600.woff","path":"fonts/opensans/600.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/600i.woff","path":"fonts/opensans/600i.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/700i.woff","path":"fonts/opensans/700i.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/800.woff","path":"fonts/opensans/800.woff","modified":0,"renderable":1},{"_id":"themes/flexy/source/fonts/opensans/800i.woff","path":"fonts/opensans/800i.woff","modified":0,"renderable":1}],"Cache":[{"_id":"themes/bencodezen/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1488041562000},{"_id":"themes/bencodezen/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1488041562000},{"_id":"themes/bencodezen/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1488041562000},{"_id":"themes/bencodezen/_config.yml","hash":"74ede8a51469fcaed85779831b8d1d7e11344ef5","modified":1488041609000},{"_id":"themes/bencodezen/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1488041562000},{"_id":"themes/bencodezen/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1488041562000},{"_id":"source/_drafts/burnout.md","hash":"d29ac4faa82738436e2f25d5ea506fce5c51835e","modified":1493832182000},{"_id":"source/_drafts/abstract-episode-1.md","hash":"fb4bb002dbe53ee9d3ca8844b6a1871146cad3f6","modified":1488395229000},{"_id":"source/_drafts/backend-vs-frontend.md","hash":"8bc51ac620539ea49e43b0a4b7f7e7024045f82b","modified":1488567948000},{"_id":"source/_drafts/css-dev-conf-2016-overview.md","hash":"154577010c2a851b57d3c3846c7eec1a9df19ed0","modified":1488041562000},{"_id":"source/_drafts/css-dev-conf-day-one.md","hash":"58a2cbfff30105866f6f43f3aba9bb58cfee8f70","modified":1488041562000},{"_id":"source/_drafts/css-dev-conf-day-two.md","hash":"d14d7be1b91c49013fca9bb2f2df1ce8cbb3324c","modified":1488041562000},{"_id":"source/_drafts/imperative-vs-declarative.md","hash":"06971752869cf62501d42416bc445cfdf0195c76","modified":1491667067000},{"_id":"source/_drafts/embrace-your-individual-brand-of-work.md","hash":"e231881be9524f872a2a99efa0229671aff30018","modified":1488041562000},{"_id":"source/_drafts/learning-functional-programming-with-professor-risby.md","hash":"d24302ec3e44a8d285561378e641943019181728","modified":1488041562000},{"_id":"source/_drafts/learning-redux-with-dan.md","hash":"0a1c29f1414e2866a7d76373520e5eb9b5a1fc3b","modified":1488041562000},{"_id":"source/_drafts/managing-time.md","hash":"83856135af18d58eba12dc4ce3eb57605fbc1e7d","modified":1488395227000},{"_id":"source/_drafts/my-first-skill-with-alexa-sdk.md","hash":"83a133270899e7f68ff44629c245ad5ace578baa","modified":1488041562000},{"_id":"source/_drafts/migrating-from-wordpress-to-hexo.md","hash":"286c6765fcea937c0586708ad34fdc4989874a3d","modified":1488041562000},{"_id":"source/_drafts/my-experience-with-rss.md","hash":"a62e859dec893630c44b8ff5384c783eb63ccb59","modified":1488041562000},{"_id":"source/_drafts/why-burnout-is-so-common.md","hash":"3ad76c0f66fe4f2cf14550759325e007d2099ab2","modified":1493831908000},{"_id":"source/_drafts/pressure-is-privilege.md","hash":"d114024f05a5a8679b2226fe92f00ff8b5f26369","modified":1488041562000},{"_id":"source/_drafts/throwaway-css.md","hash":"3deb6ea936f8f51b53050a25ac2b09a341674e85","modified":1488258442000},{"_id":"source/_posts/cheap-outsourcing.md","hash":"b60628b76a78317e545df1d61099d60c08043048","modified":1494091061000},{"_id":"source/_posts/change-in-scenery.md","hash":"817103861a5bc693b8c49619946d827a68c37c03","modified":1494090954000},{"_id":"source/_drafts/ultimateangularjs.md","hash":"9f2ca5c09fdf763511ab636807f00988216ec98d","modified":1488041562000},{"_id":"source/_drafts/why-i-converted-to-tabs.md","hash":"2c254a1a2d0c62e623403e6775ca0a32e5685dc4","modified":1488041562000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493832197000},{"_id":"source/_posts/developers-dont-get-too-comfortable.md","hash":"645815b4cb51d94e8539750e44f16e7abdbd506f","modified":1489253549000},{"_id":"source/_posts/emerging-from-a-crucible.md","hash":"d1aed2c1b56645a612458eebd8f01025338e766e","modified":1492390306000},{"_id":"source/_posts/do-it-even-if-its-ugly.md","hash":"26951087e3d94df0d492319329200df9535a348a","modified":1488430062000},{"_id":"source/_posts/just-google-translate-everything-right.md","hash":"af256f32b14eb12a4204ffba4a503328a1077a9d","modified":1488258388000},{"_id":"source/_posts/third-times-a-charm.md","hash":"f9c2679857eac91b808d9df5330aa0197606abc1","modified":1488658206000},{"_id":"source/_posts/never-finished.md","hash":"65789af26c2a02e630b1c3018d4f8e0c5454a114","modified":1488041562000},{"_id":"source/_posts/velocity-in-development.md","hash":"452a8fd9ba038e51f52dc8d39d715f2325be6e39","modified":1493170283000},{"_id":"source/_posts/when-nobody-is-watching.md","hash":"39c22f8a6e136177ab9e44af646f6cca1d307b8f","modified":1488658186000},{"_id":"themes/bencodezen/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1488041562000},{"_id":"themes/bencodezen/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1488041562000},{"_id":"themes/bencodezen/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1488041562000},{"_id":"themes/bencodezen/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1488041562000},{"_id":"themes/bencodezen/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1488041562000},{"_id":"themes/bencodezen/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1488041562000},{"_id":"themes/bencodezen/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1488041562000},{"_id":"themes/bencodezen/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1488041562000},{"_id":"themes/bencodezen/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1488041562000},{"_id":"themes/bencodezen/layout/post.ejs","hash":"4512dda1b9cc6d259e7c0127b5d7c106273f17ab","modified":1488041562000},{"_id":"themes/bencodezen/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1488041562000},{"_id":"themes/bencodezen/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488041562000},{"_id":"themes/bencodezen/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1488041562000},{"_id":"themes/bencodezen/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1488041562000},{"_id":"themes/bencodezen/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1488041562000},{"_id":"themes/bencodezen/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1488041562000},{"_id":"themes/bencodezen/layout/_widget/recent_posts.ejs","hash":"413cf0a53bbbfa86cd2430cec50d68fee3ce91d7","modified":1493860966000},{"_id":"themes/bencodezen/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1488041562000},{"_id":"themes/bencodezen/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1488041562000},{"_id":"themes/bencodezen/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/footer.ejs","hash":"35ae64862aafffa60dd4d478ec741a12e296948c","modified":1493169664000},{"_id":"themes/bencodezen/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/article.ejs","hash":"2d46dbca762173e25f7e91b2abdd26b05dd59ed2","modified":1494464563000},{"_id":"themes/bencodezen/layout/_partial/header.ejs","hash":"e28077f468c9a9286549f0bbc8372d907bed66f5","modified":1494082070000},{"_id":"themes/bencodezen/layout/_partial/head.ejs","hash":"75941dd9a5b916b849e875dfabbf5457740716b4","modified":1493168849000},{"_id":"themes/bencodezen/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1488041562000},{"_id":"themes/bencodezen/source/css/style.styl","hash":"a40dc5feb01cc7ca652405d58fe1bcdaf1a41120","modified":1494082070000},{"_id":"themes/bencodezen/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1488041562000},{"_id":"source/images/2016/cssdevconf2016-email-min.jpg","hash":"dfbd50e82beafd1194ae8b870e842243a2c61a3b","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/post/category.ejs","hash":"358c65b570535179881c577d686acf2b604c3d4f","modified":1492391182000},{"_id":"themes/bencodezen/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1488041562000},{"_id":"themes/bencodezen/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488041562000},{"_id":"themes/bencodezen/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1494082070000},{"_id":"themes/bencodezen/source/css/_partial/article.styl","hash":"0acbb8a9e4688c6bc001ea2e41b984ece0179f53","modified":1493860242000},{"_id":"themes/bencodezen/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_partial/footer.styl","hash":"46e354af860b6b709af9042ec440bd4ffc1d8ff5","modified":1493169918000},{"_id":"themes/bencodezen/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_partial/post.styl","hash":"50366cbabfc6ad59dd47577cba65bd7a917272ab","modified":1494464581000},{"_id":"themes/bencodezen/source/css/_partial/sidebar-aside.styl","hash":"cc6e8c0f72f318602805d9a3b62fe3d8b234a7aa","modified":1493861028000},{"_id":"themes/bencodezen/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1493172341000},{"_id":"themes/bencodezen/source/css/_partial/utility.styl","hash":"13e18446829dee50dd8f6f7608265cfee9e0bd7c","modified":1493862545000},{"_id":"themes/bencodezen/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_partial/social-bar.styl","hash":"4298ce335007f3ebd2fc92b2011d37020d62bd06","modified":1493170014000},{"_id":"themes/bencodezen/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1488041562000},{"_id":"themes/bencodezen/source/css/_partial/typography.styl","hash":"3eaa178184718fdfbb73b8956d5d6122b7ccc1ab","modified":1492391507000},{"_id":"themes/bencodezen/source/css/_util/mixin.styl","hash":"c867c221a69732bda6ab7c700edc9f33aa9c25bb","modified":1492388823000},{"_id":"themes/bencodezen/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1488041562000},{"_id":"themes/bencodezen/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1488041562000},{"_id":"themes/bencodezen/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1488041562000},{"_id":"themes/bencodezen/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1488041562000},{"_id":"themes/bencodezen/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1488041562000},{"_id":"themes/bencodezen/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1488041562000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1498998754000},{"_id":"themes/bencodezen/layout/_partial/post/read-time.ejs","hash":"64f4cd1463652bd0d0380ad5bdd09f8145b17da1","modified":1494464683000},{"_id":"themes/flexy/README.md","hash":"74c5c6ec0499b8fc4c5349c085877662720d0d3e","modified":1500342887000},{"_id":"themes/flexy/_config.yml","hash":"e2f923e63a624d92780afe7fc25542dae9e890d2","modified":1500342887000},{"_id":"themes/flexy/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1500342887000},{"_id":"themes/flexy/.git/config","hash":"87df85ce47d87ecfd6d1d6ba58e45a3e1c2273b6","modified":1500342887000},{"_id":"themes/flexy/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1500342882000},{"_id":"themes/flexy/.git/index","hash":"c81f812d4418e3fd95b00db9c6b1a83dbe9ea82a","modified":1500342887000},{"_id":"themes/flexy/.git/packed-refs","hash":"89ff3de45108526527249998cf562a913e1ddf86","modified":1500342887000},{"_id":"themes/flexy/layout/_comments.jade","hash":"4ac668fa7883ecb1ae8230d5f023e6936f17403a","modified":1500342887000},{"_id":"themes/flexy/layout/_content.jade","hash":"3575890bd361d7de67f43e474a385b99d20c7892","modified":1500342887000},{"_id":"themes/flexy/layout/_footer.jade","hash":"fbf55f27b5ec1bd57e899f1679f2337c31ffa501","modified":1500343323000},{"_id":"themes/flexy/layout/_head.jade","hash":"95ec1e0b9b638fdd5358e8828d7b726f8dc73487","modified":1500342887000},{"_id":"themes/flexy/layout/_header.jade","hash":"c02055dcc09d0ef115361627e963027e9f6771a1","modified":1500342887000},{"_id":"themes/flexy/layout/_scripts.jade","hash":"bc1900431636422256c96a51ff7a3d5943cf2275","modified":1500342887000},{"_id":"themes/flexy/layout/_mixins.jade","hash":"fef1a26fef90db4c5f41e6c56cdbf284e6786b8a","modified":1500342887000},{"_id":"themes/flexy/layout/index.jade","hash":"17f6ec2ed0ab4e0fc6cf2007265e4ade41bc6714","modified":1500342887000},{"_id":"themes/flexy/layout/layout.jade","hash":"d97e0842a86732f4f54b5034ecad18ff15a5e232","modified":1500342887000},{"_id":"themes/flexy/source/LICENSE","hash":"5fb246d94c78591270f46f8cdd241f3fc06fe73c","modified":1500342887000},{"_id":"themes/flexy/source/scripts/index.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500342887000},{"_id":"themes/flexy/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1500342882000},{"_id":"themes/flexy/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1500342882000},{"_id":"themes/flexy/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1500342882000},{"_id":"themes/flexy/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1500342882000},{"_id":"themes/flexy/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1500342882000},{"_id":"themes/flexy/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1500342882000},{"_id":"themes/flexy/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1500342882000},{"_id":"themes/flexy/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1500342882000},{"_id":"themes/flexy/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1500342882000},{"_id":"themes/flexy/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1500342882000},{"_id":"themes/flexy/.git/logs/HEAD","hash":"1f34e9af763546c410a8cf6e1f340f0a3a8205d2","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-114x114.png","hash":"cbef1e3433399811316b6bd8f519ad9992c489b6","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-144x144.png","hash":"cf59bb1fbcded183fc8c5b7fa37047357e93fce7","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-152x152.png","hash":"a05135fb4a24124c09926ac4bca04923eabfac1a","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-120x120.png","hash":"1ea59bfbc25f77f4e1fb69b38df47a7c88655a8f","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-57x57.png","hash":"0f65353cb3689abd41b9300cf0b501a89dea820b","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-180x180.png","hash":"3348da88abbbe24d7117cb7db23f3e568bf996ed","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-60x60.png","hash":"ca44431ad1de284c2f9ce34efbc7afc2d1ad89dc","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-72x72.png","hash":"b262f00b3f2a4724cac9a8286e7e6a4bfd2bce63","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-76x76.png","hash":"060bed69bbea9e733e4ca93d6dc062110d8d10b0","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon-precomposed.png","hash":"3348da88abbbe24d7117cb7db23f3e568bf996ed","modified":1500342887000},{"_id":"themes/flexy/source/images/apple-touch-icon.png","hash":"3348da88abbbe24d7117cb7db23f3e568bf996ed","modified":1500342887000},{"_id":"themes/flexy/source/images/favicon-160x160.png","hash":"89d50f4cee2676d5372591c3b2fa0d166a252300","modified":1500342887000},{"_id":"themes/flexy/source/images/favicon-16x16.png","hash":"1fcbd57e850c669c07e6c285e9e88db81aa3f36d","modified":1500342887000},{"_id":"themes/flexy/source/images/favicon-32x32.png","hash":"a69146990bb70d055be62955dba89f2cb792a240","modified":1500342887000},{"_id":"themes/flexy/source/images/favicon-192x192.png","hash":"87465e5670cbbdbd61822f4b954dc924d54637f4","modified":1500342887000},{"_id":"themes/flexy/source/images/favicon-96x96.png","hash":"6bece8a5e01061495ed265dc64f5ac20863db850","modified":1500342887000},{"_id":"themes/flexy/source/images/mstile-150x150.png","hash":"88d146aac9893b81c271efcb5b00c4e8f9ef2c6e","modified":1500342887000},{"_id":"themes/flexy/source/images/mstile-144x144.png","hash":"cf59bb1fbcded183fc8c5b7fa37047357e93fce7","modified":1500342887000},{"_id":"themes/flexy/source/images/mstile-310x150.png","hash":"bc2db261605be6077d9363fc15d595a778c30e7b","modified":1500342887000},{"_id":"themes/flexy/source/images/mstile-70x70.png","hash":"f49e0ac8c5b02c6b16b54e2413353674f59144cb","modified":1500342887000},{"_id":"themes/flexy/source/images/mstile-310x310.png","hash":"0c9086e2ae8ff6be27abedb39aba04f94155d28b","modified":1500342887000},{"_id":"themes/flexy/source/images/stars.svg","hash":"0edad947c46ffcddbb0ce51a74661437adbb0b67","modified":1500342887000},{"_id":"themes/flexy/source/images/svdb.png","hash":"fe82debb84a345bf144bb0b2b86ee9dc3fa0a4cc","modified":1500342887000},{"_id":"themes/flexy/source/styles/_mixins.styl","hash":"9a6d2de6090e9d7ab140a8c95d634012b26031dd","modified":1500342887000},{"_id":"themes/flexy/source/styles/normalize.css","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1500342887000},{"_id":"themes/flexy/source/styles/screen.styl","hash":"3253250aa7a6b10256a5bea5cfcb2388932e9f1b","modified":1500342887000},{"_id":"themes/flexy/source/images/header.jpg","hash":"0374099fa16559f4c834c8a5c9150fff2cbefa86","modified":1500342887000},{"_id":"themes/flexy/source/images/screenshot_mobile.png","hash":"e19001e7019c993e2c714b83e0105bd617522c71","modified":1500342887000},{"_id":"themes/flexy/source/images/screenshot.png","hash":"9543ed2967fe81e127ad8b264d1a54eb93ae2642","modified":1500342887000},{"_id":"themes/flexy/.git/objects/pack/pack-fcd9c997431d4e0d18e9cc8817aeedaeff0a5ace.idx","hash":"7a84897e5c60632e684b4bbdac4c93a7b04c0ef1","modified":1500342887000},{"_id":"themes/flexy/.git/refs/heads/master","hash":"d37b182008fc636ed6f63b55aa7b13273d7a51f1","modified":1500342887000},{"_id":"themes/flexy/source/fonts/fira/400.woff2","hash":"a8e246df0368fd8eef4806d9a1b36cf914beae15","modified":1500342887000},{"_id":"themes/flexy/source/fonts/fira/500.woff2","hash":"86d5b01469d71971cb0aa0f6f6f7946c045ff628","modified":1500342887000},{"_id":"themes/flexy/source/fonts/droidserif/400.woff","hash":"b76e07a7810ea30c4d5b0b75d0cf0dfdbcbe9638","modified":1500342887000},{"_id":"themes/flexy/source/fonts/droidserif/400.woff2","hash":"049f6150916410a91db63b2706e9092e3a4dd658","modified":1500342887000},{"_id":"themes/flexy/source/fonts/droidserif/400i.woff","hash":"52a11ef2a5cee34ae60baae0d469f2a9a2eda32f","modified":1500342887000},{"_id":"themes/flexy/source/fonts/droidserif/400i.woff2","hash":"5bae168b5d9bafd7f9b687abd504e36c4ae96fc7","modified":1500342887000},{"_id":"themes/flexy/source/fonts/droidserif/700.woff","hash":"a2e50d611e6db7009168cc66cb8253da02c2b170","modified":1500342887000},{"_id":"themes/flexy/source/fonts/droidserif/700.woff2","hash":"33c8bad63f49c0af82034fdc9e5fa61319282bd7","modified":1500342887000},{"_id":"themes/flexy/source/fonts/droidserif/700i.woff","hash":"f47662a676ecfed7cc038b35879ecc10b2ddcb96","modified":1500342887000},{"_id":"themes/flexy/source/fonts/droidserif/700i.woff2","hash":"1821452abc2980b3e7f3b0fba39f89d03b98e235","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/300.woff","hash":"d763a1e180d642818df3d38f4869e2378f0b55d0","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/300.woff2","hash":"ad2af0f0a073835100e66ee93b50def2e57a28df","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/300i.woff2","hash":"d45729f6376fe48d2b8a2c611b651a7f1502ae01","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/400.woff","hash":"7dd17593d3947f4ea10be937634ef8f553443e5a","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/400.woff2","hash":"9b18ae04f11fc74d27f281737b23b45a4bad5937","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/400i.woff2","hash":"24cc685201e9dd17ba9fed66f61fa4626f83211b","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/600.woff2","hash":"931f5105f0e909f90bdea2e246a1a230809a699a","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/600i.woff2","hash":"e51180cddda569a91790c2dc4c352d06831bb07b","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/700.woff","hash":"7956fd048338c3c6253aa58f65442441866d4b4e","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/700.woff2","hash":"074d6e274d90a1b510d6eff3a5f8d26f567c1575","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/700i.woff2","hash":"649af46dba2ec76c793426335e4026ca6c7a6109","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/800i.woff2","hash":"649af46dba2ec76c793426335e4026ca6c7a6109","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/800.woff2","hash":"ee323b2accd80d6845d5cb1ba426bea25f087abe","modified":1500342887000},{"_id":"themes/flexy/source/fonts/fira/400.woff","hash":"4ee1b0356eac96f44b48a5ecc36584c4c81e33bd","modified":1500342887000},{"_id":"themes/flexy/source/fonts/fira/500.woff","hash":"5d4c15722ac01fb9c74662496967d6ebeda078d7","modified":1500342887000},{"_id":"themes/flexy/source/fonts/fira/700.woff","hash":"4b2ef8d1724a48a42afc5e7ff8ee77a960ed6895","modified":1500342887000},{"_id":"themes/flexy/source/fonts/fira/700.woff2","hash":"798f8fe64d02e466b546e16cf82a6ce914e96db5","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/300i.woff","hash":"dae3f536b867ea3d6cce0ef1406ab9b0813c16ea","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/400i.woff","hash":"9599e5da71b62e5227becb48e5498939e636e923","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/600.woff","hash":"7c9f1210d31388fe5df9e368bd0e73a8f4091b28","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/600i.woff","hash":"9406a2e087eb0d1790c2a7348b940f773ae6dda3","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/700i.woff","hash":"87f22f6a8759ae4bc18d97469091d9b218210b45","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/800.woff","hash":"31075459cd2010120a805d95506a9f8d7005b228","modified":1500342887000},{"_id":"themes/flexy/source/fonts/opensans/800i.woff","hash":"87f22f6a8759ae4bc18d97469091d9b218210b45","modified":1500342887000},{"_id":"themes/flexy/.git/logs/refs/heads/master","hash":"1f34e9af763546c410a8cf6e1f340f0a3a8205d2","modified":1500342887000},{"_id":"themes/flexy/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1500342887000},{"_id":"themes/flexy/.git/logs/refs/remotes/origin/HEAD","hash":"1f34e9af763546c410a8cf6e1f340f0a3a8205d2","modified":1500342887000},{"_id":"themes/flexy/.git/objects/pack/pack-fcd9c997431d4e0d18e9cc8817aeedaeff0a5ace.pack","hash":"046224e8fa35e03cddb0c75965c073b6d291c390","modified":1500342887000}],"Category":[{"name":"Meditations","_id":"cj2ddy42u0002nwxvn5rm68th"},{"name":"Journal","_id":"cj2ddy44w0011nwxvfsvb3fes"},{"name":"Reflections","_id":"cj2ddy45q001inwxvkzrwv64y"}],"Data":[],"Page":[],"Post":[{"title":"Burnout - A Necessary Evil","date":"2017-05-03T16:09:30.000Z","_content":"\nWhen it comes to burnout, people in our industry are all too familiar with it. It is talked about in countless blog posts, conferences, and is part of the advice we caution all newbies entering the field: \"Be wary of burnout!\" And while I totally acknowledge the dangers of burnout, I think that burnout is a necessary evil in our field. This might sound insane, but hear me out.\n\n<!-- more -->\n\nIf we take to the analogy of running, burnout is the state where we are so tired that we are barely able to stand and walk. Or in its worse case, it's when we're vomitting on the side of the road and laid out flat on the sidewalk. Yet if we think about it, these states are sign that we have often gone too far with something. It tells us, \"Stop. You've gone too far.\"\n\nExcluding the scenario of being taken advantage of by your work environment, burnout most often occurs at the end of an incredible push through a time of intense work.\n","source":"_drafts/burnout.md","raw":"---\ntitle: Burnout - A Necessary Evil\ndate: 2017-05-03 12:09:30\ncategories: Meditations\ntags:\n\t- burnout\n\t- fatigue\n---\n\nWhen it comes to burnout, people in our industry are all too familiar with it. It is talked about in countless blog posts, conferences, and is part of the advice we caution all newbies entering the field: \"Be wary of burnout!\" And while I totally acknowledge the dangers of burnout, I think that burnout is a necessary evil in our field. This might sound insane, but hear me out.\n\n<!-- more -->\n\nIf we take to the analogy of running, burnout is the state where we are so tired that we are barely able to stand and walk. Or in its worse case, it's when we're vomitting on the side of the road and laid out flat on the sidewalk. Yet if we think about it, these states are sign that we have often gone too far with something. It tells us, \"Stop. You've gone too far.\"\n\nExcluding the scenario of being taken advantage of by your work environment, burnout most often occurs at the end of an incredible push through a time of intense work.\n","slug":"burnout","published":0,"updated":"2017-05-03T17:23:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy42n0000nwxvztmao9g0","content":"<p>When it comes to burnout, people in our industry are all too familiar with it. It is talked about in countless blog posts, conferences, and is part of the advice we caution all newbies entering the field: “Be wary of burnout!” And while I totally acknowledge the dangers of burnout, I think that burnout is a necessary evil in our field. This might sound insane, but hear me out.</p>\n<a id=\"more\"></a>\n<p>If we take to the analogy of running, burnout is the state where we are so tired that we are barely able to stand and walk. Or in its worse case, it’s when we’re vomitting on the side of the road and laid out flat on the sidewalk. Yet if we think about it, these states are sign that we have often gone too far with something. It tells us, “Stop. You’ve gone too far.”</p>\n<p>Excluding the scenario of being taken advantage of by your work environment, burnout most often occurs at the end of an incredible push through a time of intense work.</p>\n","excerpt":"<p>When it comes to burnout, people in our industry are all too familiar with it. It is talked about in countless blog posts, conferences, and is part of the advice we caution all newbies entering the field: “Be wary of burnout!” And while I totally acknowledge the dangers of burnout, I think that burnout is a necessary evil in our field. This might sound insane, but hear me out.</p>","more":"<p>If we take to the analogy of running, burnout is the state where we are so tired that we are barely able to stand and walk. Or in its worse case, it’s when we’re vomitting on the side of the road and laid out flat on the sidewalk. Yet if we think about it, these states are sign that we have often gone too far with something. It tells us, “Stop. You’ve gone too far.”</p>\n<p>Excluding the scenario of being taken advantage of by your work environment, burnout most often occurs at the end of an incredible push through a time of intense work.</p>"},{"title":"abstract-episode-1","_content":"\nFor the first ten years, if I would have to separate out my business, it was 30% \"We need Christoph to make a nice drawing on this and that\" and 70% of like, \"Oh, no, something went aterribly wrong. We have another 12 hours, let's call that guy. He will make a somewhat unembarrassing solution that will save our solution by deadline. And I love this kind of tension.\"\n\n<!--  -->\n\nChuck Close said, \"Inspiration is for amateurs. Us professionals, we just go to work in teh morning.\"\n\nThe one thing I really love about that quote is that it relieves you of a lot of pressure. It's not about waiting for hours for this moemnt where inspiration strikes. It's just about showing up and getting started, and then something amazing happens or it doesn't happen. All that matters is that you enable the chance for something to happen.\n\n<!--  -->\n\nThe one thing that's dangerous about focusing on craft and working very hard is that it can keep you from askin the really relevant questions. I'm trying to get good at something, but is that thing that i'm trying to get good at the real thing.\n\n<!--  -->\n\nJust throw in something that you think you'll regret and that's usually the most interesting part.\n\n<!--  -->\n\nI'm convinced you always have to change direction while things are good.\n\nIt's a good place to work, but not a good place to refill your creative tank. I find it hard to reinvent.\n\n<!--  -->\n\nThe big, big problem with routine is that everything starts to look the same. So I'm constnatly trying to reinvent how I approach image making, how I approach storytelling, because the audience changes all the time, I change all the time.\n\n<!--  -->\n\n\n\n","source":"_drafts/abstract-episode-1.md","raw":"---\ntitle: abstract-episode-1\ntags:\n---\n\nFor the first ten years, if I would have to separate out my business, it was 30% \"We need Christoph to make a nice drawing on this and that\" and 70% of like, \"Oh, no, something went aterribly wrong. We have another 12 hours, let's call that guy. He will make a somewhat unembarrassing solution that will save our solution by deadline. And I love this kind of tension.\"\n\n<!--  -->\n\nChuck Close said, \"Inspiration is for amateurs. Us professionals, we just go to work in teh morning.\"\n\nThe one thing I really love about that quote is that it relieves you of a lot of pressure. It's not about waiting for hours for this moemnt where inspiration strikes. It's just about showing up and getting started, and then something amazing happens or it doesn't happen. All that matters is that you enable the chance for something to happen.\n\n<!--  -->\n\nThe one thing that's dangerous about focusing on craft and working very hard is that it can keep you from askin the really relevant questions. I'm trying to get good at something, but is that thing that i'm trying to get good at the real thing.\n\n<!--  -->\n\nJust throw in something that you think you'll regret and that's usually the most interesting part.\n\n<!--  -->\n\nI'm convinced you always have to change direction while things are good.\n\nIt's a good place to work, but not a good place to refill your creative tank. I find it hard to reinvent.\n\n<!--  -->\n\nThe big, big problem with routine is that everything starts to look the same. So I'm constnatly trying to reinvent how I approach image making, how I approach storytelling, because the audience changes all the time, I change all the time.\n\n<!--  -->\n\n\n\n","slug":"abstract-episode-1","published":0,"date":"2017-03-01T17:35:44.000Z","updated":"2017-03-01T19:07:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy42r0001nwxvjbk6c773","content":"<p>For the first ten years, if I would have to separate out my business, it was 30% “We need Christoph to make a nice drawing on this and that” and 70% of like, “Oh, no, something went aterribly wrong. We have another 12 hours, let’s call that guy. He will make a somewhat unembarrassing solution that will save our solution by deadline. And I love this kind of tension.”</p>\n<!--  -->\n<p>Chuck Close said, “Inspiration is for amateurs. Us professionals, we just go to work in teh morning.”</p>\n<p>The one thing I really love about that quote is that it relieves you of a lot of pressure. It’s not about waiting for hours for this moemnt where inspiration strikes. It’s just about showing up and getting started, and then something amazing happens or it doesn’t happen. All that matters is that you enable the chance for something to happen.</p>\n<!--  -->\n<p>The one thing that’s dangerous about focusing on craft and working very hard is that it can keep you from askin the really relevant questions. I’m trying to get good at something, but is that thing that i’m trying to get good at the real thing.</p>\n<!--  -->\n<p>Just throw in something that you think you’ll regret and that’s usually the most interesting part.</p>\n<!--  -->\n<p>I’m convinced you always have to change direction while things are good.</p>\n<p>It’s a good place to work, but not a good place to refill your creative tank. I find it hard to reinvent.</p>\n<!--  -->\n<p>The big, big problem with routine is that everything starts to look the same. So I’m constnatly trying to reinvent how I approach image making, how I approach storytelling, because the audience changes all the time, I change all the time.</p>\n<!--  -->\n","excerpt":"","more":"<p>For the first ten years, if I would have to separate out my business, it was 30% “We need Christoph to make a nice drawing on this and that” and 70% of like, “Oh, no, something went aterribly wrong. We have another 12 hours, let’s call that guy. He will make a somewhat unembarrassing solution that will save our solution by deadline. And I love this kind of tension.”</p>\n<!--  -->\n<p>Chuck Close said, “Inspiration is for amateurs. Us professionals, we just go to work in teh morning.”</p>\n<p>The one thing I really love about that quote is that it relieves you of a lot of pressure. It’s not about waiting for hours for this moemnt where inspiration strikes. It’s just about showing up and getting started, and then something amazing happens or it doesn’t happen. All that matters is that you enable the chance for something to happen.</p>\n<!--  -->\n<p>The one thing that’s dangerous about focusing on craft and working very hard is that it can keep you from askin the really relevant questions. I’m trying to get good at something, but is that thing that i’m trying to get good at the real thing.</p>\n<!--  -->\n<p>Just throw in something that you think you’ll regret and that’s usually the most interesting part.</p>\n<!--  -->\n<p>I’m convinced you always have to change direction while things are good.</p>\n<p>It’s a good place to work, but not a good place to refill your creative tank. I find it hard to reinvent.</p>\n<!--  -->\n<p>The big, big problem with routine is that everything starts to look the same. So I’m constnatly trying to reinvent how I approach image making, how I approach storytelling, because the audience changes all the time, I change all the time.</p>\n<!--  -->\n"},{"title":"backend-vs-frontend","_content":"\nI think way too many back end people take for granted just how multidisciplinary a good front end mindset is.\nLike is the language and tools as a whole \"harder\" intellectually than Java and back end compilation, probably not, but that doesn't mean you'll be able to walk into front-end and walk all over us","source":"_drafts/backend-vs-frontend.md","raw":"---\ntitle: backend-vs-frontend\ntags:\n---\n\nI think way too many back end people take for granted just how multidisciplinary a good front end mindset is.\nLike is the language and tools as a whole \"harder\" intellectually than Java and back end compilation, probably not, but that doesn't mean you'll be able to walk into front-end and walk all over us","slug":"backend-vs-frontend","published":0,"date":"2017-03-03T19:05:42.000Z","updated":"2017-03-03T19:05:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy42v0004nwxvico2z9ba","content":"<p>I think way too many back end people take for granted just how multidisciplinary a good front end mindset is.<br>Like is the language and tools as a whole “harder” intellectually than Java and back end compilation, probably not, but that doesn’t mean you’ll be able to walk into front-end and walk all over us</p>\n","excerpt":"","more":"<p>I think way too many back end people take for granted just how multidisciplinary a good front end mindset is.<br>Like is the language and tools as a whole “harder” intellectually than Java and back end compilation, probably not, but that doesn’t mean you’ll be able to walk into front-end and walk all over us</p>\n"},{"title":"CSSDevConf 2016 - Overview","_content":"\nFor those who follow me on my [go blog](http://www.bengozen.com), you know that I am enjoy providing detailed recaps on events that I attend. And with CSSDevConf 2016 being everything that it came to be for me, there was no way I was going to let this one slip by.\n\nAs far as the approach I'll be taking with this event, in-depth thoughts and discussions on topics heard or inspired from the talk will be discussed in separate posts in order to do each one justice. So be on the lookout for those in the near future!\n\nWith that said and done, onto the overview!\n\n<!-- more -->\n\n## Prologue\n\nI first learned about CSSDevConf last year when Chris Coyier and Dave Rupert were talking about the amazing time they had aboard The Queen Mary in Long Beach, California. And when I went to find out more about what I had missed, I had a pretty big case of FOMO as some of the biggest names in the industry were there! So as you might imagine, I made sure to follow [@CSSDevConf](https://twitter.com/CSSDevConf) and keep up on any news for 2016.\n\nFast forward to February 2016 and I am psyched to see this appear in my inbox.\n\n![And if you know me at all, I was right there waiting for the tickets to go live at 1PM EST. Haha.](/images/2016/cssdevconf2016-email-min.jpg)\n\n","source":"_drafts/css-dev-conf-2016-overview.md","raw":"---\ntitle: CSSDevConf 2016 - Overview\ntags:\n\t- CSSDevConf\n\t- Conferences\n---\n\nFor those who follow me on my [go blog](http://www.bengozen.com), you know that I am enjoy providing detailed recaps on events that I attend. And with CSSDevConf 2016 being everything that it came to be for me, there was no way I was going to let this one slip by.\n\nAs far as the approach I'll be taking with this event, in-depth thoughts and discussions on topics heard or inspired from the talk will be discussed in separate posts in order to do each one justice. So be on the lookout for those in the near future!\n\nWith that said and done, onto the overview!\n\n<!-- more -->\n\n## Prologue\n\nI first learned about CSSDevConf last year when Chris Coyier and Dave Rupert were talking about the amazing time they had aboard The Queen Mary in Long Beach, California. And when I went to find out more about what I had missed, I had a pretty big case of FOMO as some of the biggest names in the industry were there! So as you might imagine, I made sure to follow [@CSSDevConf](https://twitter.com/CSSDevConf) and keep up on any news for 2016.\n\nFast forward to February 2016 and I am psyched to see this appear in my inbox.\n\n![And if you know me at all, I was right there waiting for the tickets to go live at 1PM EST. Haha.](/images/2016/cssdevconf2016-email-min.jpg)\n\n","slug":"css-dev-conf-2016-overview","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy42x0005nwxvji0zmd1l","content":"<p>For those who follow me on my <a href=\"http://www.bengozen.com\" target=\"_blank\" rel=\"external\">go blog</a>, you know that I am enjoy providing detailed recaps on events that I attend. And with CSSDevConf 2016 being everything that it came to be for me, there was no way I was going to let this one slip by.</p>\n<p>As far as the approach I’ll be taking with this event, in-depth thoughts and discussions on topics heard or inspired from the talk will be discussed in separate posts in order to do each one justice. So be on the lookout for those in the near future!</p>\n<p>With that said and done, onto the overview!</p>\n<a id=\"more\"></a>\n<h2 id=\"Prologue\"><a href=\"#Prologue\" class=\"headerlink\" title=\"Prologue\"></a>Prologue</h2><p>I first learned about CSSDevConf last year when Chris Coyier and Dave Rupert were talking about the amazing time they had aboard The Queen Mary in Long Beach, California. And when I went to find out more about what I had missed, I had a pretty big case of FOMO as some of the biggest names in the industry were there! So as you might imagine, I made sure to follow <a href=\"https://twitter.com/CSSDevConf\" target=\"_blank\" rel=\"external\">@CSSDevConf</a> and keep up on any news for 2016.</p>\n<p>Fast forward to February 2016 and I am psyched to see this appear in my inbox.</p>\n<p><img src=\"/images/2016/cssdevconf2016-email-min.jpg\" alt=\"And if you know me at all, I was right there waiting for the tickets to go live at 1PM EST. Haha.\"></p>\n","excerpt":"<p>For those who follow me on my <a href=\"http://www.bengozen.com\">go blog</a>, you know that I am enjoy providing detailed recaps on events that I attend. And with CSSDevConf 2016 being everything that it came to be for me, there was no way I was going to let this one slip by.</p>\n<p>As far as the approach I’ll be taking with this event, in-depth thoughts and discussions on topics heard or inspired from the talk will be discussed in separate posts in order to do each one justice. So be on the lookout for those in the near future!</p>\n<p>With that said and done, onto the overview!</p>","more":"<h2 id=\"Prologue\"><a href=\"#Prologue\" class=\"headerlink\" title=\"Prologue\"></a>Prologue</h2><p>I first learned about CSSDevConf last year when Chris Coyier and Dave Rupert were talking about the amazing time they had aboard The Queen Mary in Long Beach, California. And when I went to find out more about what I had missed, I had a pretty big case of FOMO as some of the biggest names in the industry were there! So as you might imagine, I made sure to follow <a href=\"https://twitter.com/CSSDevConf\">@CSSDevConf</a> and keep up on any news for 2016.</p>\n<p>Fast forward to February 2016 and I am psyched to see this appear in my inbox.</p>\n<p><img src=\"/images/2016/cssdevconf2016-email-min.jpg\" alt=\"And if you know me at all, I was right there waiting for the tickets to go live at 1PM EST. Haha.\"></p>"},{"title":"css-dev-conf-day-one","_content":"\n## Keynote by Rachel Andrews\n\nOrigin story. Predated CSS\nThe web gave her a sense of community\n\nThose who went through the browser wars celebrated the survival of IE6\n\nNot every tool technique or best practice is for you\n\nLearn the skill of assessing what is useful to you\n\nHtml CSS J's accessibility and HTTP are the fundamentals of a front end developer\n\nDe developing behind flags means authors need to get proactive in testing\n\nFlexbox was never designed to be two-dimensional. Using it in a 2-D fashion is technically a hack!\n\nIf authors do not just feedback, the web standards developed end up being a reflection of people who do not build websites\n\nLearn how to create\"reduced test cases\"\n\n## Sunsetting Our Grid Systems & Embracing Grid Module by Michael Cohen (@iammikecohen) [buildasign.com]\n\n* Using someone else's system creates a ton of technical debt.\n* You need to make changes now in order to prevent yourself from having a larger project in the future. (This all reminds me of \"future-proofing\" but not as extreme)\n* Take steps now from releasing anti-patterns towards the future implementation of grid layout\n\nRecommends to:\n\n1. **Learn Grid Module from the docs** - Recommends the docs against blog posts because the documentation contains the most up to date information whereas blogs become out of date.\n\nGrids should be considered as the area divided into rectangles and not the rectangles themselves.\nThis is important cause it can decouple markup from the visual output.\n\n\"You must unlearn what you have learned.\" - Thinking \"how do I recreate X in grid module\" is the wrong way to think\n\nWith the way we currently write markup, often the most improtant thing gets hidden beneath cruft. Our markup is dictated by design rather than by what is actually important: the content. (Inspired from the Dr. Bronner's Magic Soaps label)\n\nYou can nest grids inside of grids. Rinse and repeat. Start at the highest level and keep sub-diving as far down as you need to go.\n\n### CSS Architecture with Grid Module - A Difference in Composability\n\nKey difference is how you document how something is created\n\nA lot of people just document the classes in the grid system and how they are used.\n\nGrid systems create a lot of undocumented UI patterns that will cause a huge headache in the future.\n\nProposes that you have design modules as opposed to functional column grids. In other words, start documenting the layout patterns.\n\t* This is an interesting counter proposal to the functional paradigm since it actually proposes that the use of functional classes result in greater pollution whenever things need to change in the future. By using semantic naming instead, this actually scopes the design much more.\n\t* It's important to note that his example utilizes a prefix of \"L\" to indicate layout for the type of class. This seems to be an artifact from a naming architecture.\n\t* Team found that reserving first-letter prefixes indicate specific types of clases. +1 on this.\n\t* Came up with documenting only the pattern and not the complete functional nature. Proposes using single letters instead of semantic names in order to focus on grid as opposed to what content is in it.\n\nRecommends Susy & Singularity\n\n\"Isolation Method\" - Clever way of using margins and negative margins instead of using absolute positioning.\n\nPitfalls to look out for:\n\t- Preprocessor may not support some of the new syntax\n\t- You can name one more line that you provide a measurement for\n\t- Browser may not support the latest draft (use Chrome Canary)\n\t- Don't define one style of Grid and think you can override it with another style\n\t\t- Recommends a min and max for media queries if you're switching between float and isolation layouts\n\nThe argument for breaking away from grid systems is about long term mainatainbility and more importantly to me, the semantic markup and the importance of _content first development_.\n\n\\#sunsetting [1 - 5] to (504) 229-6828\n\n## Perceived Performance - The Only Kind That Matters\n\n\"Predictive design\" - using past or current user behavior to predict their next behavior before they take it in order to preload the action\n\n\"Web Performance is a matter of time\"\n\n\"Objective vs Subjective\" perception of time\n\nOptimizing for objective time is easy to measure, but this is not as efficient since this is not how users perceive their experience.\n\n\"Time differences of 20% of less are imperceptible\" in other words, \"shoot for 30% speedup\"\n\n\"Active phase vs passive phase\" - Humans tend to overestimate passive waits by 36%. Great example of comparing side roads commuting vs waiting in traffic.\n\nIdeas he proposes:\n\t- Make passive phases less painful\n\t- Make active phases a greater proportion of the total waiting time\n\nWhat we can do:\n\t- Respond to users immediately\n\t- Give users a sense of certainty\n\t- Occupy users' attention\n\t- Render minimum viable layout\n\n\"It takes about one second for flow to be disrupted.\"\n\t- Mousedown event vs click event (ontouch vs touch) - This starts the reaction chain sooner rather than later. There is a gap between the action of clicking since it waits for the upclick. Brilliant. It seems to give about a 100-150ms head start.\n\t- Stay :active. Use active states. Animation duration sweet spot is 150-200ms. This can coax them into holding down their mouse even longer. Incrediible!\n\n\"Give users certainty!\"\n\t- Uncertain waits feel longer\n\nGreat animation of progress bars text\n\t- Animation makes a huge difference when it comes to users perception of progress bars.\n\t- Counter-animations tend to make the progress bar feel like it's feeling faster.\n\t- Speeding up the counter-animation as it via ease-in helps it feel 12% faster.\n\t- Don't use anything if it is less than 1 second because they won't even realize it. This puts them into a passive state intentionally which is horrible.\n\t- If 1-3 seconds, use the basic progress bar without extraneous information.\n\t- 3 to 10 seconds? Time to get fancy.\n\t- As long as the bar is in a visible area where the user is focused, it is okay.\n\t- Fake progress bars can damage user perceptions because if they pick up on the pattern, they'll lose faith.\n\nWhat about spinners? Meh. (Another great use of animation here)\n\t- Optimal time is around 1-2 seconds, but progress bars is probably still better\n\t- But they are much easier to brand\n\nSlack does a great job of offloading the waiting with an intricate loading screen with multiple loading states.\nGames do this a lot as well.\nMaking things interactive is a great way to help hold users' focus.\n\n\"If this feels like cheating, that's because it is.\"\n\n> \"Our goal is to get users to persist through a longer waiting time that we have little control over.\"\n\n\"Rather than hasten passive phase, increase active phase's time\"\n\n\"Identify what your users interact with first.\" - Remember this first, and then lazyload anything else.\n\t- It is not as simple as \"above the fold\"\n\t- It's about what your users want\n\n### Predictive Design\n\nHouston airport example - +1\n\n\"Users are not snowflakes\" - Their behavior follows observable patterns, but \"your users are\" so don't make sweeping changes.\n\nIf we can predict what users will do, why not preload the action before they take it?\nUse the area around the button as the trigger event and not the button itself.\n\nUse it wisely because you're doing things that users are not asking for. Recommends it to mitigate risk with data.\n\nTLDR; At the end of the day, what matters is how it feels; but always remember to test the hell out of your predictions.\n\n\\#perceivedperf [1 - 5] to (504) 229-6828\n\n## Creativity in Programming by Sarah Drasner (@sarah_edo)\n\nProgramming vs. Creative\n\t- \"Any time you are expressing anything to the compiler, you are doing a creative act.\"\n\nConcept of flow\n\t- Complete immersion in tasks\n\t- Share traits with hyperfocus (reminds me of dying will flame from Reborn)\n\t- Loss of self-reflective consciousness\n\t- \"Happiest points of life\"\n\n1. Questioning the Base Premises\n\t- It's important to challenge what your work with.\n2 Impose artifical bounds\n3 Repupose\n4 Open source\n5 Freedom\n\n_Recommended article:_ \"Hack Physics and JavaScript\" by Rachel Smith\n\n_Grab asset:_ \"It Depends\" by Rachel Smith - Gif\n\n_Look into:_ Lonely planet?\n\n\"The worst code isn't code that breaks, but code that silently corrodes the system over time.\"\n\nMichael Feather quote comparing OO Proramming and FP\n\nLook into AFrame open source VR framework - Made by Mozilla\n\nWhen you're burnt out, she recommends just tweaking and refactoring something just to tinker with things instead of trying to go fresh at it. It's hard to get out of the rut, but start small and decrease what you're expecting of yourself.\n\n\\#creativecode [1 - 5] to (504) 229-6828\n\n## Reactive Animations with CSS Variables by David Khourshid (@davidkpiano)\n\nDemo: Arcade.london\n\nContinuous and discrete - the similarities between animation and music\n\nDeclarative vs. Imperative\n\nImmutable vs Mutable\n\nFunctional Programming & onstraints is a symbiotic relationship\n\nW3C - The Rule of Least Power: Powerful languages inhibit information reuse\n\t- Use the least powerful language suitable for rexpressing information, constraints or programs on the web.\n\nReactive Animations are things you can play around with. Events that lead to discrete changes\n\nEvents in JS are combined into stream that emits values which then go to custom properties that result in reactive styles.\n\nThis is important because mobile apps have been doing this forever and the web is a bit behind in regards to this.\n\n### CSS Variables\n\nCheck out: CSS variables from Lea Verou\n\nCSS Variables allow them to change at run-time\n\nJS Observables are like arrays that are async, immutable and subscribable\n\n_Look Into:_ RxJS - Most popular library for writing Observables.\n\nHammerJS - Observes finger gestures\n\nCombine CSS Variables and JS Observables to get Reactive Animations\n\n\"A 'reactive animation' is one involving **discrete changes**, due to **events**\n\nBy allowing programmers to **express the 'what' of an interactive animation**. one can hope to then **automate the 'how'**\"\n\n- Elliot and Hudak, 1997\n\nLinear interpolation = LIRP?\n\nWhy animate with CSS Variables\n\t- Easily debuggable\n\t- No excessive DOM manipulation\n\t- DOm node indpeendent\n\t- UFll ower of CSS\n\t- Theming and media queries\n\t- calc() is your new best friend\n\t- They work in SVG\n\n\\#ReactAnim [1 - 5] to (504) 229-6828\n\n## Automated UI Testing and You by (@klamping)\n\n_Interesting Technique_: 5 Why's - A root cause analysis tool to get at what's really going on\n\nUI Testing (aka functional / end to end testing). Testing what they would actually be doing and making sure they can do what they want to do\n\nSelenium Automation\n\t- Uses real browsers\n\t- Programmatic control of them\n\t- Free and open-source\n\nWebDriverIO\n\t- NodeJS based\n\t- Streamlined commands\n\t- Lots of integrations and support\n\n### How to Keep UI Tests Useful and Not Horrendous to Maintain\n\nThe Black Triangle - A game dev team and they get excited about this thing that appears on the screen. It's just a black triangle. It represented: the rendering engine, modeling programs, converter programs, etc. All the integrations is what they were celebrating.\n\n> \"Better to have one highly polished and visible test than a whole bunch of invisible ones.\"\n\nWebdriverIO is just one piece of the puzzle.\nNeed a way to create test users\nData variations also impact test cases\nCode pipelines to ensure it's being used\nVisible test results to show that it passes or fails\n\nWhat tests really need:\n\t- test framework\n\t- code repo for tests\n\t- selenium box\n\t- server to run test scripts on\n\t- api hooks to trigger test scripts to run\n\t- api hooks to listen to result of tests\n\t- server to host report test history\n\t- interface to programmatically modify data for a server\n\n\\#UITesting [1 - 5] to (504) 229-6828\n\n## Fighting Burnout by Alicia (@aliciability)\n\nBurnout vs. Technical Growth - Two concepts that are constantly fundamentally at odds with each other\n\nExpectations of technical growth\n\t- Personal projects, side things, coding all the time\n\t- Assuems the person has low number of outside priorities\n\t- Assumes people will speak up when they are starting to weath thin\n\nRealities of technical growth\n\t- There's not infinite time - we've got lives\n\t- It's unpaid labor\n\t- We want technical experts who are young because \"tech ageism\"\n\nStages of Burnout\n\t- The compulsion to prove one's self\n\t- Working harder\n\t- Focuses only on their work\n\t- Becomes obsessed with only that and the idea that they will become irreplaceable by doing so\n\t- Ends up neglecting their own needs\n\t- Revision of values: things like changing what success means to them. In other words, your work is the only thing that is valuable\n\t- Denial of emerging problems\n\t- Withdrawal\n\t- Obvious behavioral changes\n\t- Depersonalization\n\t- Inner emptiness\n\nBurnout vs Brownout\n\t- Encapsulates the early stages of burnout, but has more to with disinterest as opposed to a physical or mental collapse\n\nHow is this affecting our industry?\n\t\"The pipeline is leaky and full of acid. The pipeline leads to a sewage treatment plant. The pipeline ends in a meat grinder.\" - Julie Pagano\n\nWe treat burnout as a badge\n\nSo what do we do about it?\n\t- Burnout is about the organization as much as the individual\n\t- As individuals though...\n\t\t- Say no\n\t\t- Check in on yourself\n\t\t- Learn in moderation\n\t\t- Learn to focus on extensible knowledge\n\t\t- What do you want people to know you for?\n\t\t- Passive learning\n\t- As leaders...\n\t\t- Take no as an answer\n\t\t- Make sure your employees are set up for success\n\t\t- One-on-one meetings\n\t\t- Give them time to learn\n\n\"We all have intellectual FOMO.\" Let's be honest about it.\n\nHow to Recover from Burnout?\n\t- Take time off\n\t- Knowing who your support network is\n\t- Doesn't think you can really recover from burnout\n\n\\#FightBurnout [1 - 5] to (504) 229-6828\n\n## Conference Thoughts\n\nThere's an interesting notion of trying to ensure backwards compatability while future proofing against upcoming specs.\n\nI really like how Grid gets us to focus on markup and not on design.\n\nOfficiallly going to convert to HSL\n\nIt's time to get familiar with the HTML 5 slideshow creator.\n\nExpectations set too high result in no progress.\n\nI've gone through much of my journey pursuing things and jumping around. It's exciting and easy to ramp up to learn new things. I never truly specialized.\n","source":"_drafts/css-dev-conf-day-one.md","raw":"---\ntitle: css-dev-conf-day-one\ntags:\n---\n\n## Keynote by Rachel Andrews\n\nOrigin story. Predated CSS\nThe web gave her a sense of community\n\nThose who went through the browser wars celebrated the survival of IE6\n\nNot every tool technique or best practice is for you\n\nLearn the skill of assessing what is useful to you\n\nHtml CSS J's accessibility and HTTP are the fundamentals of a front end developer\n\nDe developing behind flags means authors need to get proactive in testing\n\nFlexbox was never designed to be two-dimensional. Using it in a 2-D fashion is technically a hack!\n\nIf authors do not just feedback, the web standards developed end up being a reflection of people who do not build websites\n\nLearn how to create\"reduced test cases\"\n\n## Sunsetting Our Grid Systems & Embracing Grid Module by Michael Cohen (@iammikecohen) [buildasign.com]\n\n* Using someone else's system creates a ton of technical debt.\n* You need to make changes now in order to prevent yourself from having a larger project in the future. (This all reminds me of \"future-proofing\" but not as extreme)\n* Take steps now from releasing anti-patterns towards the future implementation of grid layout\n\nRecommends to:\n\n1. **Learn Grid Module from the docs** - Recommends the docs against blog posts because the documentation contains the most up to date information whereas blogs become out of date.\n\nGrids should be considered as the area divided into rectangles and not the rectangles themselves.\nThis is important cause it can decouple markup from the visual output.\n\n\"You must unlearn what you have learned.\" - Thinking \"how do I recreate X in grid module\" is the wrong way to think\n\nWith the way we currently write markup, often the most improtant thing gets hidden beneath cruft. Our markup is dictated by design rather than by what is actually important: the content. (Inspired from the Dr. Bronner's Magic Soaps label)\n\nYou can nest grids inside of grids. Rinse and repeat. Start at the highest level and keep sub-diving as far down as you need to go.\n\n### CSS Architecture with Grid Module - A Difference in Composability\n\nKey difference is how you document how something is created\n\nA lot of people just document the classes in the grid system and how they are used.\n\nGrid systems create a lot of undocumented UI patterns that will cause a huge headache in the future.\n\nProposes that you have design modules as opposed to functional column grids. In other words, start documenting the layout patterns.\n\t* This is an interesting counter proposal to the functional paradigm since it actually proposes that the use of functional classes result in greater pollution whenever things need to change in the future. By using semantic naming instead, this actually scopes the design much more.\n\t* It's important to note that his example utilizes a prefix of \"L\" to indicate layout for the type of class. This seems to be an artifact from a naming architecture.\n\t* Team found that reserving first-letter prefixes indicate specific types of clases. +1 on this.\n\t* Came up with documenting only the pattern and not the complete functional nature. Proposes using single letters instead of semantic names in order to focus on grid as opposed to what content is in it.\n\nRecommends Susy & Singularity\n\n\"Isolation Method\" - Clever way of using margins and negative margins instead of using absolute positioning.\n\nPitfalls to look out for:\n\t- Preprocessor may not support some of the new syntax\n\t- You can name one more line that you provide a measurement for\n\t- Browser may not support the latest draft (use Chrome Canary)\n\t- Don't define one style of Grid and think you can override it with another style\n\t\t- Recommends a min and max for media queries if you're switching between float and isolation layouts\n\nThe argument for breaking away from grid systems is about long term mainatainbility and more importantly to me, the semantic markup and the importance of _content first development_.\n\n\\#sunsetting [1 - 5] to (504) 229-6828\n\n## Perceived Performance - The Only Kind That Matters\n\n\"Predictive design\" - using past or current user behavior to predict their next behavior before they take it in order to preload the action\n\n\"Web Performance is a matter of time\"\n\n\"Objective vs Subjective\" perception of time\n\nOptimizing for objective time is easy to measure, but this is not as efficient since this is not how users perceive their experience.\n\n\"Time differences of 20% of less are imperceptible\" in other words, \"shoot for 30% speedup\"\n\n\"Active phase vs passive phase\" - Humans tend to overestimate passive waits by 36%. Great example of comparing side roads commuting vs waiting in traffic.\n\nIdeas he proposes:\n\t- Make passive phases less painful\n\t- Make active phases a greater proportion of the total waiting time\n\nWhat we can do:\n\t- Respond to users immediately\n\t- Give users a sense of certainty\n\t- Occupy users' attention\n\t- Render minimum viable layout\n\n\"It takes about one second for flow to be disrupted.\"\n\t- Mousedown event vs click event (ontouch vs touch) - This starts the reaction chain sooner rather than later. There is a gap between the action of clicking since it waits for the upclick. Brilliant. It seems to give about a 100-150ms head start.\n\t- Stay :active. Use active states. Animation duration sweet spot is 150-200ms. This can coax them into holding down their mouse even longer. Incrediible!\n\n\"Give users certainty!\"\n\t- Uncertain waits feel longer\n\nGreat animation of progress bars text\n\t- Animation makes a huge difference when it comes to users perception of progress bars.\n\t- Counter-animations tend to make the progress bar feel like it's feeling faster.\n\t- Speeding up the counter-animation as it via ease-in helps it feel 12% faster.\n\t- Don't use anything if it is less than 1 second because they won't even realize it. This puts them into a passive state intentionally which is horrible.\n\t- If 1-3 seconds, use the basic progress bar without extraneous information.\n\t- 3 to 10 seconds? Time to get fancy.\n\t- As long as the bar is in a visible area where the user is focused, it is okay.\n\t- Fake progress bars can damage user perceptions because if they pick up on the pattern, they'll lose faith.\n\nWhat about spinners? Meh. (Another great use of animation here)\n\t- Optimal time is around 1-2 seconds, but progress bars is probably still better\n\t- But they are much easier to brand\n\nSlack does a great job of offloading the waiting with an intricate loading screen with multiple loading states.\nGames do this a lot as well.\nMaking things interactive is a great way to help hold users' focus.\n\n\"If this feels like cheating, that's because it is.\"\n\n> \"Our goal is to get users to persist through a longer waiting time that we have little control over.\"\n\n\"Rather than hasten passive phase, increase active phase's time\"\n\n\"Identify what your users interact with first.\" - Remember this first, and then lazyload anything else.\n\t- It is not as simple as \"above the fold\"\n\t- It's about what your users want\n\n### Predictive Design\n\nHouston airport example - +1\n\n\"Users are not snowflakes\" - Their behavior follows observable patterns, but \"your users are\" so don't make sweeping changes.\n\nIf we can predict what users will do, why not preload the action before they take it?\nUse the area around the button as the trigger event and not the button itself.\n\nUse it wisely because you're doing things that users are not asking for. Recommends it to mitigate risk with data.\n\nTLDR; At the end of the day, what matters is how it feels; but always remember to test the hell out of your predictions.\n\n\\#perceivedperf [1 - 5] to (504) 229-6828\n\n## Creativity in Programming by Sarah Drasner (@sarah_edo)\n\nProgramming vs. Creative\n\t- \"Any time you are expressing anything to the compiler, you are doing a creative act.\"\n\nConcept of flow\n\t- Complete immersion in tasks\n\t- Share traits with hyperfocus (reminds me of dying will flame from Reborn)\n\t- Loss of self-reflective consciousness\n\t- \"Happiest points of life\"\n\n1. Questioning the Base Premises\n\t- It's important to challenge what your work with.\n2 Impose artifical bounds\n3 Repupose\n4 Open source\n5 Freedom\n\n_Recommended article:_ \"Hack Physics and JavaScript\" by Rachel Smith\n\n_Grab asset:_ \"It Depends\" by Rachel Smith - Gif\n\n_Look into:_ Lonely planet?\n\n\"The worst code isn't code that breaks, but code that silently corrodes the system over time.\"\n\nMichael Feather quote comparing OO Proramming and FP\n\nLook into AFrame open source VR framework - Made by Mozilla\n\nWhen you're burnt out, she recommends just tweaking and refactoring something just to tinker with things instead of trying to go fresh at it. It's hard to get out of the rut, but start small and decrease what you're expecting of yourself.\n\n\\#creativecode [1 - 5] to (504) 229-6828\n\n## Reactive Animations with CSS Variables by David Khourshid (@davidkpiano)\n\nDemo: Arcade.london\n\nContinuous and discrete - the similarities between animation and music\n\nDeclarative vs. Imperative\n\nImmutable vs Mutable\n\nFunctional Programming & onstraints is a symbiotic relationship\n\nW3C - The Rule of Least Power: Powerful languages inhibit information reuse\n\t- Use the least powerful language suitable for rexpressing information, constraints or programs on the web.\n\nReactive Animations are things you can play around with. Events that lead to discrete changes\n\nEvents in JS are combined into stream that emits values which then go to custom properties that result in reactive styles.\n\nThis is important because mobile apps have been doing this forever and the web is a bit behind in regards to this.\n\n### CSS Variables\n\nCheck out: CSS variables from Lea Verou\n\nCSS Variables allow them to change at run-time\n\nJS Observables are like arrays that are async, immutable and subscribable\n\n_Look Into:_ RxJS - Most popular library for writing Observables.\n\nHammerJS - Observes finger gestures\n\nCombine CSS Variables and JS Observables to get Reactive Animations\n\n\"A 'reactive animation' is one involving **discrete changes**, due to **events**\n\nBy allowing programmers to **express the 'what' of an interactive animation**. one can hope to then **automate the 'how'**\"\n\n- Elliot and Hudak, 1997\n\nLinear interpolation = LIRP?\n\nWhy animate with CSS Variables\n\t- Easily debuggable\n\t- No excessive DOM manipulation\n\t- DOm node indpeendent\n\t- UFll ower of CSS\n\t- Theming and media queries\n\t- calc() is your new best friend\n\t- They work in SVG\n\n\\#ReactAnim [1 - 5] to (504) 229-6828\n\n## Automated UI Testing and You by (@klamping)\n\n_Interesting Technique_: 5 Why's - A root cause analysis tool to get at what's really going on\n\nUI Testing (aka functional / end to end testing). Testing what they would actually be doing and making sure they can do what they want to do\n\nSelenium Automation\n\t- Uses real browsers\n\t- Programmatic control of them\n\t- Free and open-source\n\nWebDriverIO\n\t- NodeJS based\n\t- Streamlined commands\n\t- Lots of integrations and support\n\n### How to Keep UI Tests Useful and Not Horrendous to Maintain\n\nThe Black Triangle - A game dev team and they get excited about this thing that appears on the screen. It's just a black triangle. It represented: the rendering engine, modeling programs, converter programs, etc. All the integrations is what they were celebrating.\n\n> \"Better to have one highly polished and visible test than a whole bunch of invisible ones.\"\n\nWebdriverIO is just one piece of the puzzle.\nNeed a way to create test users\nData variations also impact test cases\nCode pipelines to ensure it's being used\nVisible test results to show that it passes or fails\n\nWhat tests really need:\n\t- test framework\n\t- code repo for tests\n\t- selenium box\n\t- server to run test scripts on\n\t- api hooks to trigger test scripts to run\n\t- api hooks to listen to result of tests\n\t- server to host report test history\n\t- interface to programmatically modify data for a server\n\n\\#UITesting [1 - 5] to (504) 229-6828\n\n## Fighting Burnout by Alicia (@aliciability)\n\nBurnout vs. Technical Growth - Two concepts that are constantly fundamentally at odds with each other\n\nExpectations of technical growth\n\t- Personal projects, side things, coding all the time\n\t- Assuems the person has low number of outside priorities\n\t- Assumes people will speak up when they are starting to weath thin\n\nRealities of technical growth\n\t- There's not infinite time - we've got lives\n\t- It's unpaid labor\n\t- We want technical experts who are young because \"tech ageism\"\n\nStages of Burnout\n\t- The compulsion to prove one's self\n\t- Working harder\n\t- Focuses only on their work\n\t- Becomes obsessed with only that and the idea that they will become irreplaceable by doing so\n\t- Ends up neglecting their own needs\n\t- Revision of values: things like changing what success means to them. In other words, your work is the only thing that is valuable\n\t- Denial of emerging problems\n\t- Withdrawal\n\t- Obvious behavioral changes\n\t- Depersonalization\n\t- Inner emptiness\n\nBurnout vs Brownout\n\t- Encapsulates the early stages of burnout, but has more to with disinterest as opposed to a physical or mental collapse\n\nHow is this affecting our industry?\n\t\"The pipeline is leaky and full of acid. The pipeline leads to a sewage treatment plant. The pipeline ends in a meat grinder.\" - Julie Pagano\n\nWe treat burnout as a badge\n\nSo what do we do about it?\n\t- Burnout is about the organization as much as the individual\n\t- As individuals though...\n\t\t- Say no\n\t\t- Check in on yourself\n\t\t- Learn in moderation\n\t\t- Learn to focus on extensible knowledge\n\t\t- What do you want people to know you for?\n\t\t- Passive learning\n\t- As leaders...\n\t\t- Take no as an answer\n\t\t- Make sure your employees are set up for success\n\t\t- One-on-one meetings\n\t\t- Give them time to learn\n\n\"We all have intellectual FOMO.\" Let's be honest about it.\n\nHow to Recover from Burnout?\n\t- Take time off\n\t- Knowing who your support network is\n\t- Doesn't think you can really recover from burnout\n\n\\#FightBurnout [1 - 5] to (504) 229-6828\n\n## Conference Thoughts\n\nThere's an interesting notion of trying to ensure backwards compatability while future proofing against upcoming specs.\n\nI really like how Grid gets us to focus on markup and not on design.\n\nOfficiallly going to convert to HSL\n\nIt's time to get familiar with the HTML 5 slideshow creator.\n\nExpectations set too high result in no progress.\n\nI've gone through much of my journey pursuing things and jumping around. It's exciting and easy to ramp up to learn new things. I never truly specialized.\n","slug":"css-dev-conf-day-one","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy42y0006nwxvnnqn10g4","content":"<h2 id=\"Keynote-by-Rachel-Andrews\"><a href=\"#Keynote-by-Rachel-Andrews\" class=\"headerlink\" title=\"Keynote by Rachel Andrews\"></a>Keynote by Rachel Andrews</h2><p>Origin story. Predated CSS<br>The web gave her a sense of community</p>\n<p>Those who went through the browser wars celebrated the survival of IE6</p>\n<p>Not every tool technique or best practice is for you</p>\n<p>Learn the skill of assessing what is useful to you</p>\n<p>Html CSS J’s accessibility and HTTP are the fundamentals of a front end developer</p>\n<p>De developing behind flags means authors need to get proactive in testing</p>\n<p>Flexbox was never designed to be two-dimensional. Using it in a 2-D fashion is technically a hack!</p>\n<p>If authors do not just feedback, the web standards developed end up being a reflection of people who do not build websites</p>\n<p>Learn how to create”reduced test cases”</p>\n<h2 id=\"Sunsetting-Our-Grid-Systems-amp-Embracing-Grid-Module-by-Michael-Cohen-iammikecohen-buildasign-com\"><a href=\"#Sunsetting-Our-Grid-Systems-amp-Embracing-Grid-Module-by-Michael-Cohen-iammikecohen-buildasign-com\" class=\"headerlink\" title=\"Sunsetting Our Grid Systems &amp; Embracing Grid Module by Michael Cohen (@iammikecohen) [buildasign.com]\"></a>Sunsetting Our Grid Systems &amp; Embracing Grid Module by Michael Cohen (@iammikecohen) [buildasign.com]</h2><ul>\n<li>Using someone else’s system creates a ton of technical debt.</li>\n<li>You need to make changes now in order to prevent yourself from having a larger project in the future. (This all reminds me of “future-proofing” but not as extreme)</li>\n<li>Take steps now from releasing anti-patterns towards the future implementation of grid layout</li>\n</ul>\n<p>Recommends to:</p>\n<ol>\n<li><strong>Learn Grid Module from the docs</strong> - Recommends the docs against blog posts because the documentation contains the most up to date information whereas blogs become out of date.</li>\n</ol>\n<p>Grids should be considered as the area divided into rectangles and not the rectangles themselves.<br>This is important cause it can decouple markup from the visual output.</p>\n<p>“You must unlearn what you have learned.” - Thinking “how do I recreate X in grid module” is the wrong way to think</p>\n<p>With the way we currently write markup, often the most improtant thing gets hidden beneath cruft. Our markup is dictated by design rather than by what is actually important: the content. (Inspired from the Dr. Bronner’s Magic Soaps label)</p>\n<p>You can nest grids inside of grids. Rinse and repeat. Start at the highest level and keep sub-diving as far down as you need to go.</p>\n<h3 id=\"CSS-Architecture-with-Grid-Module-A-Difference-in-Composability\"><a href=\"#CSS-Architecture-with-Grid-Module-A-Difference-in-Composability\" class=\"headerlink\" title=\"CSS Architecture with Grid Module - A Difference in Composability\"></a>CSS Architecture with Grid Module - A Difference in Composability</h3><p>Key difference is how you document how something is created</p>\n<p>A lot of people just document the classes in the grid system and how they are used.</p>\n<p>Grid systems create a lot of undocumented UI patterns that will cause a huge headache in the future.</p>\n<p>Proposes that you have design modules as opposed to functional column grids. In other words, start documenting the layout patterns.</p>\n<pre><code>* This is an interesting counter proposal to the functional paradigm since it actually proposes that the use of functional classes result in greater pollution whenever things need to change in the future. By using semantic naming instead, this actually scopes the design much more.\n* It&apos;s important to note that his example utilizes a prefix of &quot;L&quot; to indicate layout for the type of class. This seems to be an artifact from a naming architecture.\n* Team found that reserving first-letter prefixes indicate specific types of clases. +1 on this.\n* Came up with documenting only the pattern and not the complete functional nature. Proposes using single letters instead of semantic names in order to focus on grid as opposed to what content is in it.\n</code></pre><p>Recommends Susy &amp; Singularity</p>\n<p>“Isolation Method” - Clever way of using margins and negative margins instead of using absolute positioning.</p>\n<p>Pitfalls to look out for:</p>\n<pre><code>- Preprocessor may not support some of the new syntax\n- You can name one more line that you provide a measurement for\n- Browser may not support the latest draft (use Chrome Canary)\n- Don&apos;t define one style of Grid and think you can override it with another style\n    - Recommends a min and max for media queries if you&apos;re switching between float and isolation layouts\n</code></pre><p>The argument for breaking away from grid systems is about long term mainatainbility and more importantly to me, the semantic markup and the importance of <em>content first development</em>.</p>\n<p>#sunsetting [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Perceived-Performance-The-Only-Kind-That-Matters\"><a href=\"#Perceived-Performance-The-Only-Kind-That-Matters\" class=\"headerlink\" title=\"Perceived Performance - The Only Kind That Matters\"></a>Perceived Performance - The Only Kind That Matters</h2><p>“Predictive design” - using past or current user behavior to predict their next behavior before they take it in order to preload the action</p>\n<p>“Web Performance is a matter of time”</p>\n<p>“Objective vs Subjective” perception of time</p>\n<p>Optimizing for objective time is easy to measure, but this is not as efficient since this is not how users perceive their experience.</p>\n<p>“Time differences of 20% of less are imperceptible” in other words, “shoot for 30% speedup”</p>\n<p>“Active phase vs passive phase” - Humans tend to overestimate passive waits by 36%. Great example of comparing side roads commuting vs waiting in traffic.</p>\n<p>Ideas he proposes:</p>\n<pre><code>- Make passive phases less painful\n- Make active phases a greater proportion of the total waiting time\n</code></pre><p>What we can do:</p>\n<pre><code>- Respond to users immediately\n- Give users a sense of certainty\n- Occupy users&apos; attention\n- Render minimum viable layout\n</code></pre><p>“It takes about one second for flow to be disrupted.”</p>\n<pre><code>- Mousedown event vs click event (ontouch vs touch) - This starts the reaction chain sooner rather than later. There is a gap between the action of clicking since it waits for the upclick. Brilliant. It seems to give about a 100-150ms head start.\n- Stay :active. Use active states. Animation duration sweet spot is 150-200ms. This can coax them into holding down their mouse even longer. Incrediible!\n</code></pre><p>“Give users certainty!”</p>\n<pre><code>- Uncertain waits feel longer\n</code></pre><p>Great animation of progress bars text</p>\n<pre><code>- Animation makes a huge difference when it comes to users perception of progress bars.\n- Counter-animations tend to make the progress bar feel like it&apos;s feeling faster.\n- Speeding up the counter-animation as it via ease-in helps it feel 12% faster.\n- Don&apos;t use anything if it is less than 1 second because they won&apos;t even realize it. This puts them into a passive state intentionally which is horrible.\n- If 1-3 seconds, use the basic progress bar without extraneous information.\n- 3 to 10 seconds? Time to get fancy.\n- As long as the bar is in a visible area where the user is focused, it is okay.\n- Fake progress bars can damage user perceptions because if they pick up on the pattern, they&apos;ll lose faith.\n</code></pre><p>What about spinners? Meh. (Another great use of animation here)</p>\n<pre><code>- Optimal time is around 1-2 seconds, but progress bars is probably still better\n- But they are much easier to brand\n</code></pre><p>Slack does a great job of offloading the waiting with an intricate loading screen with multiple loading states.<br>Games do this a lot as well.<br>Making things interactive is a great way to help hold users’ focus.</p>\n<p>“If this feels like cheating, that’s because it is.”</p>\n<blockquote>\n<p>“Our goal is to get users to persist through a longer waiting time that we have little control over.”</p>\n</blockquote>\n<p>“Rather than hasten passive phase, increase active phase’s time”</p>\n<p>“Identify what your users interact with first.” - Remember this first, and then lazyload anything else.</p>\n<pre><code>- It is not as simple as &quot;above the fold&quot;\n- It&apos;s about what your users want\n</code></pre><h3 id=\"Predictive-Design\"><a href=\"#Predictive-Design\" class=\"headerlink\" title=\"Predictive Design\"></a>Predictive Design</h3><p>Houston airport example - +1</p>\n<p>“Users are not snowflakes” - Their behavior follows observable patterns, but “your users are” so don’t make sweeping changes.</p>\n<p>If we can predict what users will do, why not preload the action before they take it?<br>Use the area around the button as the trigger event and not the button itself.</p>\n<p>Use it wisely because you’re doing things that users are not asking for. Recommends it to mitigate risk with data.</p>\n<p>TLDR; At the end of the day, what matters is how it feels; but always remember to test the hell out of your predictions.</p>\n<p>#perceivedperf [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Creativity-in-Programming-by-Sarah-Drasner-sarah-edo\"><a href=\"#Creativity-in-Programming-by-Sarah-Drasner-sarah-edo\" class=\"headerlink\" title=\"Creativity in Programming by Sarah Drasner (@sarah_edo)\"></a>Creativity in Programming by Sarah Drasner (@sarah_edo)</h2><p>Programming vs. Creative</p>\n<pre><code>- &quot;Any time you are expressing anything to the compiler, you are doing a creative act.&quot;\n</code></pre><p>Concept of flow</p>\n<pre><code>- Complete immersion in tasks\n- Share traits with hyperfocus (reminds me of dying will flame from Reborn)\n- Loss of self-reflective consciousness\n- &quot;Happiest points of life&quot;\n</code></pre><ol>\n<li>Questioning the Base Premises<ul>\n<li>It’s important to challenge what your work with.<br>2 Impose artifical bounds<br>3 Repupose<br>4 Open source<br>5 Freedom</li>\n</ul>\n</li>\n</ol>\n<p><em>Recommended article:</em> “Hack Physics and JavaScript” by Rachel Smith</p>\n<p><em>Grab asset:</em> “It Depends” by Rachel Smith - Gif</p>\n<p><em>Look into:</em> Lonely planet?</p>\n<p>“The worst code isn’t code that breaks, but code that silently corrodes the system over time.”</p>\n<p>Michael Feather quote comparing OO Proramming and FP</p>\n<p>Look into AFrame open source VR framework - Made by Mozilla</p>\n<p>When you’re burnt out, she recommends just tweaking and refactoring something just to tinker with things instead of trying to go fresh at it. It’s hard to get out of the rut, but start small and decrease what you’re expecting of yourself.</p>\n<p>#creativecode [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Reactive-Animations-with-CSS-Variables-by-David-Khourshid-davidkpiano\"><a href=\"#Reactive-Animations-with-CSS-Variables-by-David-Khourshid-davidkpiano\" class=\"headerlink\" title=\"Reactive Animations with CSS Variables by David Khourshid (@davidkpiano)\"></a>Reactive Animations with CSS Variables by David Khourshid (@davidkpiano)</h2><p>Demo: Arcade.london</p>\n<p>Continuous and discrete - the similarities between animation and music</p>\n<p>Declarative vs. Imperative</p>\n<p>Immutable vs Mutable</p>\n<p>Functional Programming &amp; onstraints is a symbiotic relationship</p>\n<p>W3C - The Rule of Least Power: Powerful languages inhibit information reuse</p>\n<pre><code>- Use the least powerful language suitable for rexpressing information, constraints or programs on the web.\n</code></pre><p>Reactive Animations are things you can play around with. Events that lead to discrete changes</p>\n<p>Events in JS are combined into stream that emits values which then go to custom properties that result in reactive styles.</p>\n<p>This is important because mobile apps have been doing this forever and the web is a bit behind in regards to this.</p>\n<h3 id=\"CSS-Variables\"><a href=\"#CSS-Variables\" class=\"headerlink\" title=\"CSS Variables\"></a>CSS Variables</h3><p>Check out: CSS variables from Lea Verou</p>\n<p>CSS Variables allow them to change at run-time</p>\n<p>JS Observables are like arrays that are async, immutable and subscribable</p>\n<p><em>Look Into:</em> RxJS - Most popular library for writing Observables.</p>\n<p>HammerJS - Observes finger gestures</p>\n<p>Combine CSS Variables and JS Observables to get Reactive Animations</p>\n<p>“A ‘reactive animation’ is one involving <strong>discrete changes</strong>, due to <strong>events</strong></p>\n<p>By allowing programmers to <strong>express the ‘what’ of an interactive animation</strong>. one can hope to then <strong>automate the ‘how’</strong>“</p>\n<ul>\n<li>Elliot and Hudak, 1997</li>\n</ul>\n<p>Linear interpolation = LIRP?</p>\n<p>Why animate with CSS Variables</p>\n<pre><code>- Easily debuggable\n- No excessive DOM manipulation\n- DOm node indpeendent\n- UFll ower of CSS\n- Theming and media queries\n- calc() is your new best friend\n- They work in SVG\n</code></pre><p>#ReactAnim [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Automated-UI-Testing-and-You-by-klamping\"><a href=\"#Automated-UI-Testing-and-You-by-klamping\" class=\"headerlink\" title=\"Automated UI Testing and You by (@klamping)\"></a>Automated UI Testing and You by (@klamping)</h2><p><em>Interesting Technique</em>: 5 Why’s - A root cause analysis tool to get at what’s really going on</p>\n<p>UI Testing (aka functional / end to end testing). Testing what they would actually be doing and making sure they can do what they want to do</p>\n<p>Selenium Automation</p>\n<pre><code>- Uses real browsers\n- Programmatic control of them\n- Free and open-source\n</code></pre><p>WebDriverIO</p>\n<pre><code>- NodeJS based\n- Streamlined commands\n- Lots of integrations and support\n</code></pre><h3 id=\"How-to-Keep-UI-Tests-Useful-and-Not-Horrendous-to-Maintain\"><a href=\"#How-to-Keep-UI-Tests-Useful-and-Not-Horrendous-to-Maintain\" class=\"headerlink\" title=\"How to Keep UI Tests Useful and Not Horrendous to Maintain\"></a>How to Keep UI Tests Useful and Not Horrendous to Maintain</h3><p>The Black Triangle - A game dev team and they get excited about this thing that appears on the screen. It’s just a black triangle. It represented: the rendering engine, modeling programs, converter programs, etc. All the integrations is what they were celebrating.</p>\n<blockquote>\n<p>“Better to have one highly polished and visible test than a whole bunch of invisible ones.”</p>\n</blockquote>\n<p>WebdriverIO is just one piece of the puzzle.<br>Need a way to create test users<br>Data variations also impact test cases<br>Code pipelines to ensure it’s being used<br>Visible test results to show that it passes or fails</p>\n<p>What tests really need:</p>\n<pre><code>- test framework\n- code repo for tests\n- selenium box\n- server to run test scripts on\n- api hooks to trigger test scripts to run\n- api hooks to listen to result of tests\n- server to host report test history\n- interface to programmatically modify data for a server\n</code></pre><p>#UITesting [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Fighting-Burnout-by-Alicia-aliciability\"><a href=\"#Fighting-Burnout-by-Alicia-aliciability\" class=\"headerlink\" title=\"Fighting Burnout by Alicia (@aliciability)\"></a>Fighting Burnout by Alicia (@aliciability)</h2><p>Burnout vs. Technical Growth - Two concepts that are constantly fundamentally at odds with each other</p>\n<p>Expectations of technical growth</p>\n<pre><code>- Personal projects, side things, coding all the time\n- Assuems the person has low number of outside priorities\n- Assumes people will speak up when they are starting to weath thin\n</code></pre><p>Realities of technical growth</p>\n<pre><code>- There&apos;s not infinite time - we&apos;ve got lives\n- It&apos;s unpaid labor\n- We want technical experts who are young because &quot;tech ageism&quot;\n</code></pre><p>Stages of Burnout</p>\n<pre><code>- The compulsion to prove one&apos;s self\n- Working harder\n- Focuses only on their work\n- Becomes obsessed with only that and the idea that they will become irreplaceable by doing so\n- Ends up neglecting their own needs\n- Revision of values: things like changing what success means to them. In other words, your work is the only thing that is valuable\n- Denial of emerging problems\n- Withdrawal\n- Obvious behavioral changes\n- Depersonalization\n- Inner emptiness\n</code></pre><p>Burnout vs Brownout</p>\n<pre><code>- Encapsulates the early stages of burnout, but has more to with disinterest as opposed to a physical or mental collapse\n</code></pre><p>How is this affecting our industry?<br>    “The pipeline is leaky and full of acid. The pipeline leads to a sewage treatment plant. The pipeline ends in a meat grinder.” - Julie Pagano</p>\n<p>We treat burnout as a badge</p>\n<p>So what do we do about it?</p>\n<pre><code>- Burnout is about the organization as much as the individual\n- As individuals though...\n    - Say no\n    - Check in on yourself\n    - Learn in moderation\n    - Learn to focus on extensible knowledge\n    - What do you want people to know you for?\n    - Passive learning\n- As leaders...\n    - Take no as an answer\n    - Make sure your employees are set up for success\n    - One-on-one meetings\n    - Give them time to learn\n</code></pre><p>“We all have intellectual FOMO.” Let’s be honest about it.</p>\n<p>How to Recover from Burnout?</p>\n<pre><code>- Take time off\n- Knowing who your support network is\n- Doesn&apos;t think you can really recover from burnout\n</code></pre><p>#FightBurnout [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Conference-Thoughts\"><a href=\"#Conference-Thoughts\" class=\"headerlink\" title=\"Conference Thoughts\"></a>Conference Thoughts</h2><p>There’s an interesting notion of trying to ensure backwards compatability while future proofing against upcoming specs.</p>\n<p>I really like how Grid gets us to focus on markup and not on design.</p>\n<p>Officiallly going to convert to HSL</p>\n<p>It’s time to get familiar with the HTML 5 slideshow creator.</p>\n<p>Expectations set too high result in no progress.</p>\n<p>I’ve gone through much of my journey pursuing things and jumping around. It’s exciting and easy to ramp up to learn new things. I never truly specialized.</p>\n","excerpt":"","more":"<h2 id=\"Keynote-by-Rachel-Andrews\"><a href=\"#Keynote-by-Rachel-Andrews\" class=\"headerlink\" title=\"Keynote by Rachel Andrews\"></a>Keynote by Rachel Andrews</h2><p>Origin story. Predated CSS<br>The web gave her a sense of community</p>\n<p>Those who went through the browser wars celebrated the survival of IE6</p>\n<p>Not every tool technique or best practice is for you</p>\n<p>Learn the skill of assessing what is useful to you</p>\n<p>Html CSS J’s accessibility and HTTP are the fundamentals of a front end developer</p>\n<p>De developing behind flags means authors need to get proactive in testing</p>\n<p>Flexbox was never designed to be two-dimensional. Using it in a 2-D fashion is technically a hack!</p>\n<p>If authors do not just feedback, the web standards developed end up being a reflection of people who do not build websites</p>\n<p>Learn how to create”reduced test cases”</p>\n<h2 id=\"Sunsetting-Our-Grid-Systems-amp-Embracing-Grid-Module-by-Michael-Cohen-iammikecohen-buildasign-com\"><a href=\"#Sunsetting-Our-Grid-Systems-amp-Embracing-Grid-Module-by-Michael-Cohen-iammikecohen-buildasign-com\" class=\"headerlink\" title=\"Sunsetting Our Grid Systems &amp; Embracing Grid Module by Michael Cohen (@iammikecohen) [buildasign.com]\"></a>Sunsetting Our Grid Systems &amp; Embracing Grid Module by Michael Cohen (@iammikecohen) [buildasign.com]</h2><ul>\n<li>Using someone else’s system creates a ton of technical debt.</li>\n<li>You need to make changes now in order to prevent yourself from having a larger project in the future. (This all reminds me of “future-proofing” but not as extreme)</li>\n<li>Take steps now from releasing anti-patterns towards the future implementation of grid layout</li>\n</ul>\n<p>Recommends to:</p>\n<ol>\n<li><strong>Learn Grid Module from the docs</strong> - Recommends the docs against blog posts because the documentation contains the most up to date information whereas blogs become out of date.</li>\n</ol>\n<p>Grids should be considered as the area divided into rectangles and not the rectangles themselves.<br>This is important cause it can decouple markup from the visual output.</p>\n<p>“You must unlearn what you have learned.” - Thinking “how do I recreate X in grid module” is the wrong way to think</p>\n<p>With the way we currently write markup, often the most improtant thing gets hidden beneath cruft. Our markup is dictated by design rather than by what is actually important: the content. (Inspired from the Dr. Bronner’s Magic Soaps label)</p>\n<p>You can nest grids inside of grids. Rinse and repeat. Start at the highest level and keep sub-diving as far down as you need to go.</p>\n<h3 id=\"CSS-Architecture-with-Grid-Module-A-Difference-in-Composability\"><a href=\"#CSS-Architecture-with-Grid-Module-A-Difference-in-Composability\" class=\"headerlink\" title=\"CSS Architecture with Grid Module - A Difference in Composability\"></a>CSS Architecture with Grid Module - A Difference in Composability</h3><p>Key difference is how you document how something is created</p>\n<p>A lot of people just document the classes in the grid system and how they are used.</p>\n<p>Grid systems create a lot of undocumented UI patterns that will cause a huge headache in the future.</p>\n<p>Proposes that you have design modules as opposed to functional column grids. In other words, start documenting the layout patterns.</p>\n<pre><code>* This is an interesting counter proposal to the functional paradigm since it actually proposes that the use of functional classes result in greater pollution whenever things need to change in the future. By using semantic naming instead, this actually scopes the design much more.\n* It&apos;s important to note that his example utilizes a prefix of &quot;L&quot; to indicate layout for the type of class. This seems to be an artifact from a naming architecture.\n* Team found that reserving first-letter prefixes indicate specific types of clases. +1 on this.\n* Came up with documenting only the pattern and not the complete functional nature. Proposes using single letters instead of semantic names in order to focus on grid as opposed to what content is in it.\n</code></pre><p>Recommends Susy &amp; Singularity</p>\n<p>“Isolation Method” - Clever way of using margins and negative margins instead of using absolute positioning.</p>\n<p>Pitfalls to look out for:</p>\n<pre><code>- Preprocessor may not support some of the new syntax\n- You can name one more line that you provide a measurement for\n- Browser may not support the latest draft (use Chrome Canary)\n- Don&apos;t define one style of Grid and think you can override it with another style\n    - Recommends a min and max for media queries if you&apos;re switching between float and isolation layouts\n</code></pre><p>The argument for breaking away from grid systems is about long term mainatainbility and more importantly to me, the semantic markup and the importance of <em>content first development</em>.</p>\n<p>#sunsetting [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Perceived-Performance-The-Only-Kind-That-Matters\"><a href=\"#Perceived-Performance-The-Only-Kind-That-Matters\" class=\"headerlink\" title=\"Perceived Performance - The Only Kind That Matters\"></a>Perceived Performance - The Only Kind That Matters</h2><p>“Predictive design” - using past or current user behavior to predict their next behavior before they take it in order to preload the action</p>\n<p>“Web Performance is a matter of time”</p>\n<p>“Objective vs Subjective” perception of time</p>\n<p>Optimizing for objective time is easy to measure, but this is not as efficient since this is not how users perceive their experience.</p>\n<p>“Time differences of 20% of less are imperceptible” in other words, “shoot for 30% speedup”</p>\n<p>“Active phase vs passive phase” - Humans tend to overestimate passive waits by 36%. Great example of comparing side roads commuting vs waiting in traffic.</p>\n<p>Ideas he proposes:</p>\n<pre><code>- Make passive phases less painful\n- Make active phases a greater proportion of the total waiting time\n</code></pre><p>What we can do:</p>\n<pre><code>- Respond to users immediately\n- Give users a sense of certainty\n- Occupy users&apos; attention\n- Render minimum viable layout\n</code></pre><p>“It takes about one second for flow to be disrupted.”</p>\n<pre><code>- Mousedown event vs click event (ontouch vs touch) - This starts the reaction chain sooner rather than later. There is a gap between the action of clicking since it waits for the upclick. Brilliant. It seems to give about a 100-150ms head start.\n- Stay :active. Use active states. Animation duration sweet spot is 150-200ms. This can coax them into holding down their mouse even longer. Incrediible!\n</code></pre><p>“Give users certainty!”</p>\n<pre><code>- Uncertain waits feel longer\n</code></pre><p>Great animation of progress bars text</p>\n<pre><code>- Animation makes a huge difference when it comes to users perception of progress bars.\n- Counter-animations tend to make the progress bar feel like it&apos;s feeling faster.\n- Speeding up the counter-animation as it via ease-in helps it feel 12% faster.\n- Don&apos;t use anything if it is less than 1 second because they won&apos;t even realize it. This puts them into a passive state intentionally which is horrible.\n- If 1-3 seconds, use the basic progress bar without extraneous information.\n- 3 to 10 seconds? Time to get fancy.\n- As long as the bar is in a visible area where the user is focused, it is okay.\n- Fake progress bars can damage user perceptions because if they pick up on the pattern, they&apos;ll lose faith.\n</code></pre><p>What about spinners? Meh. (Another great use of animation here)</p>\n<pre><code>- Optimal time is around 1-2 seconds, but progress bars is probably still better\n- But they are much easier to brand\n</code></pre><p>Slack does a great job of offloading the waiting with an intricate loading screen with multiple loading states.<br>Games do this a lot as well.<br>Making things interactive is a great way to help hold users’ focus.</p>\n<p>“If this feels like cheating, that’s because it is.”</p>\n<blockquote>\n<p>“Our goal is to get users to persist through a longer waiting time that we have little control over.”</p>\n</blockquote>\n<p>“Rather than hasten passive phase, increase active phase’s time”</p>\n<p>“Identify what your users interact with first.” - Remember this first, and then lazyload anything else.</p>\n<pre><code>- It is not as simple as &quot;above the fold&quot;\n- It&apos;s about what your users want\n</code></pre><h3 id=\"Predictive-Design\"><a href=\"#Predictive-Design\" class=\"headerlink\" title=\"Predictive Design\"></a>Predictive Design</h3><p>Houston airport example - +1</p>\n<p>“Users are not snowflakes” - Their behavior follows observable patterns, but “your users are” so don’t make sweeping changes.</p>\n<p>If we can predict what users will do, why not preload the action before they take it?<br>Use the area around the button as the trigger event and not the button itself.</p>\n<p>Use it wisely because you’re doing things that users are not asking for. Recommends it to mitigate risk with data.</p>\n<p>TLDR; At the end of the day, what matters is how it feels; but always remember to test the hell out of your predictions.</p>\n<p>#perceivedperf [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Creativity-in-Programming-by-Sarah-Drasner-sarah-edo\"><a href=\"#Creativity-in-Programming-by-Sarah-Drasner-sarah-edo\" class=\"headerlink\" title=\"Creativity in Programming by Sarah Drasner (@sarah_edo)\"></a>Creativity in Programming by Sarah Drasner (@sarah_edo)</h2><p>Programming vs. Creative</p>\n<pre><code>- &quot;Any time you are expressing anything to the compiler, you are doing a creative act.&quot;\n</code></pre><p>Concept of flow</p>\n<pre><code>- Complete immersion in tasks\n- Share traits with hyperfocus (reminds me of dying will flame from Reborn)\n- Loss of self-reflective consciousness\n- &quot;Happiest points of life&quot;\n</code></pre><ol>\n<li>Questioning the Base Premises<ul>\n<li>It’s important to challenge what your work with.<br>2 Impose artifical bounds<br>3 Repupose<br>4 Open source<br>5 Freedom</li>\n</ul>\n</li>\n</ol>\n<p><em>Recommended article:</em> “Hack Physics and JavaScript” by Rachel Smith</p>\n<p><em>Grab asset:</em> “It Depends” by Rachel Smith - Gif</p>\n<p><em>Look into:</em> Lonely planet?</p>\n<p>“The worst code isn’t code that breaks, but code that silently corrodes the system over time.”</p>\n<p>Michael Feather quote comparing OO Proramming and FP</p>\n<p>Look into AFrame open source VR framework - Made by Mozilla</p>\n<p>When you’re burnt out, she recommends just tweaking and refactoring something just to tinker with things instead of trying to go fresh at it. It’s hard to get out of the rut, but start small and decrease what you’re expecting of yourself.</p>\n<p>#creativecode [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Reactive-Animations-with-CSS-Variables-by-David-Khourshid-davidkpiano\"><a href=\"#Reactive-Animations-with-CSS-Variables-by-David-Khourshid-davidkpiano\" class=\"headerlink\" title=\"Reactive Animations with CSS Variables by David Khourshid (@davidkpiano)\"></a>Reactive Animations with CSS Variables by David Khourshid (@davidkpiano)</h2><p>Demo: Arcade.london</p>\n<p>Continuous and discrete - the similarities between animation and music</p>\n<p>Declarative vs. Imperative</p>\n<p>Immutable vs Mutable</p>\n<p>Functional Programming &amp; onstraints is a symbiotic relationship</p>\n<p>W3C - The Rule of Least Power: Powerful languages inhibit information reuse</p>\n<pre><code>- Use the least powerful language suitable for rexpressing information, constraints or programs on the web.\n</code></pre><p>Reactive Animations are things you can play around with. Events that lead to discrete changes</p>\n<p>Events in JS are combined into stream that emits values which then go to custom properties that result in reactive styles.</p>\n<p>This is important because mobile apps have been doing this forever and the web is a bit behind in regards to this.</p>\n<h3 id=\"CSS-Variables\"><a href=\"#CSS-Variables\" class=\"headerlink\" title=\"CSS Variables\"></a>CSS Variables</h3><p>Check out: CSS variables from Lea Verou</p>\n<p>CSS Variables allow them to change at run-time</p>\n<p>JS Observables are like arrays that are async, immutable and subscribable</p>\n<p><em>Look Into:</em> RxJS - Most popular library for writing Observables.</p>\n<p>HammerJS - Observes finger gestures</p>\n<p>Combine CSS Variables and JS Observables to get Reactive Animations</p>\n<p>“A ‘reactive animation’ is one involving <strong>discrete changes</strong>, due to <strong>events</strong></p>\n<p>By allowing programmers to <strong>express the ‘what’ of an interactive animation</strong>. one can hope to then <strong>automate the ‘how’</strong>“</p>\n<ul>\n<li>Elliot and Hudak, 1997</li>\n</ul>\n<p>Linear interpolation = LIRP?</p>\n<p>Why animate with CSS Variables</p>\n<pre><code>- Easily debuggable\n- No excessive DOM manipulation\n- DOm node indpeendent\n- UFll ower of CSS\n- Theming and media queries\n- calc() is your new best friend\n- They work in SVG\n</code></pre><p>#ReactAnim [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Automated-UI-Testing-and-You-by-klamping\"><a href=\"#Automated-UI-Testing-and-You-by-klamping\" class=\"headerlink\" title=\"Automated UI Testing and You by (@klamping)\"></a>Automated UI Testing and You by (@klamping)</h2><p><em>Interesting Technique</em>: 5 Why’s - A root cause analysis tool to get at what’s really going on</p>\n<p>UI Testing (aka functional / end to end testing). Testing what they would actually be doing and making sure they can do what they want to do</p>\n<p>Selenium Automation</p>\n<pre><code>- Uses real browsers\n- Programmatic control of them\n- Free and open-source\n</code></pre><p>WebDriverIO</p>\n<pre><code>- NodeJS based\n- Streamlined commands\n- Lots of integrations and support\n</code></pre><h3 id=\"How-to-Keep-UI-Tests-Useful-and-Not-Horrendous-to-Maintain\"><a href=\"#How-to-Keep-UI-Tests-Useful-and-Not-Horrendous-to-Maintain\" class=\"headerlink\" title=\"How to Keep UI Tests Useful and Not Horrendous to Maintain\"></a>How to Keep UI Tests Useful and Not Horrendous to Maintain</h3><p>The Black Triangle - A game dev team and they get excited about this thing that appears on the screen. It’s just a black triangle. It represented: the rendering engine, modeling programs, converter programs, etc. All the integrations is what they were celebrating.</p>\n<blockquote>\n<p>“Better to have one highly polished and visible test than a whole bunch of invisible ones.”</p>\n</blockquote>\n<p>WebdriverIO is just one piece of the puzzle.<br>Need a way to create test users<br>Data variations also impact test cases<br>Code pipelines to ensure it’s being used<br>Visible test results to show that it passes or fails</p>\n<p>What tests really need:</p>\n<pre><code>- test framework\n- code repo for tests\n- selenium box\n- server to run test scripts on\n- api hooks to trigger test scripts to run\n- api hooks to listen to result of tests\n- server to host report test history\n- interface to programmatically modify data for a server\n</code></pre><p>#UITesting [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Fighting-Burnout-by-Alicia-aliciability\"><a href=\"#Fighting-Burnout-by-Alicia-aliciability\" class=\"headerlink\" title=\"Fighting Burnout by Alicia (@aliciability)\"></a>Fighting Burnout by Alicia (@aliciability)</h2><p>Burnout vs. Technical Growth - Two concepts that are constantly fundamentally at odds with each other</p>\n<p>Expectations of technical growth</p>\n<pre><code>- Personal projects, side things, coding all the time\n- Assuems the person has low number of outside priorities\n- Assumes people will speak up when they are starting to weath thin\n</code></pre><p>Realities of technical growth</p>\n<pre><code>- There&apos;s not infinite time - we&apos;ve got lives\n- It&apos;s unpaid labor\n- We want technical experts who are young because &quot;tech ageism&quot;\n</code></pre><p>Stages of Burnout</p>\n<pre><code>- The compulsion to prove one&apos;s self\n- Working harder\n- Focuses only on their work\n- Becomes obsessed with only that and the idea that they will become irreplaceable by doing so\n- Ends up neglecting their own needs\n- Revision of values: things like changing what success means to them. In other words, your work is the only thing that is valuable\n- Denial of emerging problems\n- Withdrawal\n- Obvious behavioral changes\n- Depersonalization\n- Inner emptiness\n</code></pre><p>Burnout vs Brownout</p>\n<pre><code>- Encapsulates the early stages of burnout, but has more to with disinterest as opposed to a physical or mental collapse\n</code></pre><p>How is this affecting our industry?<br>    “The pipeline is leaky and full of acid. The pipeline leads to a sewage treatment plant. The pipeline ends in a meat grinder.” - Julie Pagano</p>\n<p>We treat burnout as a badge</p>\n<p>So what do we do about it?</p>\n<pre><code>- Burnout is about the organization as much as the individual\n- As individuals though...\n    - Say no\n    - Check in on yourself\n    - Learn in moderation\n    - Learn to focus on extensible knowledge\n    - What do you want people to know you for?\n    - Passive learning\n- As leaders...\n    - Take no as an answer\n    - Make sure your employees are set up for success\n    - One-on-one meetings\n    - Give them time to learn\n</code></pre><p>“We all have intellectual FOMO.” Let’s be honest about it.</p>\n<p>How to Recover from Burnout?</p>\n<pre><code>- Take time off\n- Knowing who your support network is\n- Doesn&apos;t think you can really recover from burnout\n</code></pre><p>#FightBurnout [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Conference-Thoughts\"><a href=\"#Conference-Thoughts\" class=\"headerlink\" title=\"Conference Thoughts\"></a>Conference Thoughts</h2><p>There’s an interesting notion of trying to ensure backwards compatability while future proofing against upcoming specs.</p>\n<p>I really like how Grid gets us to focus on markup and not on design.</p>\n<p>Officiallly going to convert to HSL</p>\n<p>It’s time to get familiar with the HTML 5 slideshow creator.</p>\n<p>Expectations set too high result in no progress.</p>\n<p>I’ve gone through much of my journey pursuing things and jumping around. It’s exciting and easy to ramp up to learn new things. I never truly specialized.</p>\n"},{"title":"css-dev-conf-day-two","_content":"\n## Revolutionize Your Page: Real Art Direction on the Web by Jen Simmons (@jensimmons)\n\nAtt direction is about being in conversation with the audience\n\nbrand & art direction = conversation\n\n\"The vast majority of editorail design has at its heart **the idea of communicating an idea of a story** through the organization of and presentation of words and visuals\"- Caldwell and Cappaterra (Editorial Design)\n\n\"We're stuck in the idea that every layout needs to be one of three shapes. You have a brand new product that's unique but your website looks like everyone elses.\"\n\n\"Which one of these two web pages are you designing right now?\"\n\nChallenges 960 grid.\n\n\"Layout shouldn't be a multiple choice question. It should be an essay question.\"\n\n\"Separate tooling needs from the design process\"\n\n\"Don't make a 12 column layout out of CSS grid\"\n\n_Books to look into:_ \"Grids and Page Layouts\"\n\nlabs.jensimmons.com\n\n`initial letter: 4 (rows of text)` WHAT?!?!\n\n**Feature Queries**: WHAT?!?!?!?!?!?!?!?!?!??!??!\n\n@support (property: value) { // bunch of css }\n\n**Viewport Units**\n\nNeed to start using this more for framing cnotent on different screens\n\n**Object Fit**\n\nFill the space that's available and crop it. WHAT IS THIS MADNESS?!??!?!\n\n**Clip Path and Shape Object**\n\n**Sizing Based on Edges**\n\n**Flexbox and CSS Grid**\n\nFlexbox thinks of the world in one line. Great image of wrapping content still being connected via a \"line\"\n\n**CSS Box Alignment**\n\nflexboxdefense.com and flexboxfroggy.com\n\n**Grid Module**\n\nJen Simmons' demo of Jazz at Lincoln Center is AMAZING. MUST SHOW AND look for other stuff to do the same\n\nGreat point about Pocket and people downloading these simple text version of your web pages.\n\nCreate a fallback layout for non-grid layout.\n\nPlace each item into a specific cell/area. Let the browser place everything using autoplacement algorithm.\n\n\"It's not buggy. It's not shipped yet!\"\n\n_Interesting_ CSS Grid Inspector - Plugin that shows you the gridline\n\n\"Code is not a 2x2 grid of do or don't. It's works and doesn't work at the same time.\"\n\nEstimates Spring 2017 for evergreen browsers will have implemented Grid System.\n\njensimmons.com/presentation/progressing-our-layouts\njensimmons.com/presentation/modern-layouts-getting-out-of-our-ruts\n\nwww.layout.land\n\n## Responsive Web Applications with Responsive Queries by Jonathan Snook (@snookca)\n\nA talk more about process than code\n\nXero - Beautiful Accounting Software\n\nGoal #1: Evolve the design\n\nGoal #2: Support Multiple Devices\n\n\"Designers see a feature through all platforms\"\n\n\"Monolithic app with accessible templates\"\n\n\"Web applications have components in multiple contexts needing to respond differently.\"\n\nBrowsers do not have a way for **container queries**. The remedy for now is:\n\t- CSS, HTML or JavaScript\n\t- They chose JavaScript\n\n\"Going Responsive meant a consistent feature set across all devices.\"\nThis also means that \"new features automatically have cross-device support\"\n\n\"Product design is a team sport.\"\n\n\"Make the right things easy and the wrong things hard.\" Recommends a linting tool.\n\nShopify is getting of Container Queries due to performance. Relies more on flexbox instead.\n\n\"Designers should think Responsive before they need to\"\n\n_Interesting Group_: Responsive Issues Community Group\n\n\\#RWDQueries [1 - 5] to (504) 229-6828\n\n## Start Using ES6 Today by Wes Bos (@wesbos)\n\n### Life makers - features that make life so much better\n\n#### let and const\n\n\t- block scoped\n\nThinks of curly braces as \"fences\" that keep the variables within it. Nice analogy.\n\nNever use var for \"for loops\"\n\n\"const does not mean it is immutable!\"\n\n\"Using const makes sure we can't wipe - or rebind - wes out\"\n\nIf you want to make sure nothing changes, use Object.freeze\n\n#### template strings\n\nProposes the idea of never using regular quotes again. All backticks!\n\nAllows you to write markup very easily\n\n\"JavaScript is a templating language!\"\n\nUse the ternerary operator for if conditions\n\nBuild your own render functions when you want to nest complicated functions in your template strings\n\n#### default function arguments\n\nyou can set default arguments in your function\n\n#### Arrow functions\n\nparantheses around single arguments are optional. I kind of like it better since it's cleaner\nthere is an implicit return statement iwth arrow functions\n\tif you need a curly bracket for object, you need the parantheses around the implicit return value\n\n**this**\n\n**With arrow functions, the value of THIS does not change.** THIS is equal to whatever it is bound to and can go directly up to the window.\n\nArrow functions - the value of this does not change. It looks for the relative parent until it finds a funciton that already has at this value bound to it.\n\n#### Enhanced Object Literals\n\nYou can use a single property declaration if the variable is the same as the property name. In other words, if you have:\n\n{\n\tfirst: first\n}\n\ncan now be\n\n{\n\tfirst\n}\n\n##### Method Definition\n\nYou can eliminate function keyword if you can't use arrow functions and want to shortcut it in objects.\n\n### Deep End\n\n#### Destructuring\n\nPut it simply, it allows us to create and assign multiple variables in a single line of code. It works with both objects and arrays.\n\nexample: `const { first, twitter, city } = person;`\n\nYou can rename while you destructure: `const { twitter: tweet, facebook, fb } = wes.links.social;`\n\nYou can even set default fallback values! `cont { first, middle = 'killer', last } = person`\n\nAnd you can combine all those together!\n\nYou can swap values with destructuring\n\n`[current, benched] = [benched, current]`\n\nYou can return multiple values in a function it if returns an object:\n\n`const {USD, GBP, AUD, MEX } = convertCurrency(100);`\n\n#### Sets\n\nKind of like the arrays you have always wanted\n\n\"A set isn ES^ is like a unique array with a nice api for adding/removing/checking its items.\"\n\n`const students = new Set();`\n\npush, pop, snap, crackle and pop - nice array joke\n\nSets only contains unique data\n\n\\#ES6Tips [1 - 5] to (504) 229-6828\n\n## Speakers Panel\n\nDiscussion of the UX Engineer. A lot of companies try to cobble together UI developers who know JavaScript but don't really know design (CSS).\n\n\"Jam / Jab Session\" - Collaboration of every team before work gets started on a project\n\nGetting designers to achieve what they're getting at or trying to achieve and not simply trying to make it \"look right.\"\n\nPriority of interest for job candidates:\n\t1. Boss\n\t2. Co-workers\n\t3. Environment\n\t4. Tech Stack\n\t5...\n\n## Pattern Libraries by Adam McCombs (@adammccombs)\n\n\"Recurring solutions that solve common design problems.\" - Paul Boag | Nov 12, 2013\n\nPattern libraries are NOT\n\t- your framework\n\t- static mockups\n\t- limited to designers\n\n\"Technically a pattern library is a simple collection of UI componenents, but in order for design system users to do their best work, a pattern library should also present other improtant info.\" - Brad Frost, 2016\n\nWhy are pattern libraries a necessity?\n\t1. **Consistency** in all things\n\t\t- Keep the brand of the product with your styleguide\n\t2. **Reusability** of elements and front-end markup\n\t3. **Maintainability** of codebase before and after lunch\n\t4. **Speed and Cost** because time is money\n\t5. **Allows your to develop systems** not pages\n\n\t- 'The Dreaded' waterfall process and just 'throw it over the wall'\n\t- \"Content (RWD) is like water.\"\n\nExamples to check out:\n\t- Mailchimp: Typography\n\t- Github: Buttons - even talks about accessibility as well!\n\nThe Structure\n\t- Style: Color, typography, images\n\t- Layouts\n\t- Components\n\t- Patterns\n\nInteracting with projects:\n\t- External: patterns are externalized but pushes into your project as library.css\n\t- internal: Patterns are sepcific to an individual project\n\t- Isolated: Patterns can be updated but have no automatic effect on the projects\n\n\"Pattern libraries (and really CSS in general) is one of those things that everyone has an opinion on how to implement because of its low barrier to entry. This can (and likely will) cause strong opinions to form among various members of your team.\"\n\n### What should you build into your pattern library?\n\n\t1. **Documentation** - Document everything!\n\t\t- Pattern name\n\t\t- Pattern usage description\n\t\t- Why does this pattern exist? Link to a live page if possible!\n\t\t- What is the wrong way to use a pattern?\n\t2. **Pattern Preview** - How should this be displayed?\n\t3. **Markup** - Bonus points for copy & paste\n\n### How should you maintain your project after it launches?\n\n\t- Automate, automate, automate\n\t- \"Unless it's part of your build, your style guide is just more documentation to maintain.\" - Phil Hawksworth\n\n### Design System Maturiy Model\n\n\t- Governed: the pattern library process is built into your organization\n\t- AUtomatic: The pattern library is a part of your app build process\n\t- Manual: This pattern library has code snippets\n\t- Static: A static PDF of your brand guidelines\n\t- Inconsistent: The absence of a design system\n\n### Working in a team?\n\n\t- Standards: code standards, naming convention, file organization\n\t- Tools: other systems/libraries, gulp, grunt, Github pages\n\t- Goals: what are your objectives, pattern library timelines, post launch maintenance\n\nRecommended Resources:\n\t- styleguides.io\n\t- Fight the Zombie Pattern Library\n\t- 3 Years of Pattern Libraries: Lessons Learned\n\n## Data Visualization with Responsive D3.js by Julia Konivestska\n\ntaurusj.slides.com/taurusj/deck-1-5-6\n\nD3 - Data Driven Documents\n\t- It is...\n\t\t- not a chart library\n\t\t- not for rendering things\n\t\t- not for IE8 and older\n\t- It is...\n\t\t- a combination of building blocks (modules)\n\t\t- a great tool for mapping dta for the DOM\n\t\t- transform the data\n\t\t- smooth transition between UI states\n\nYou can use a default bundle or use modules to pick and choose what you want\n\nYou need SVG, npm, html, css, js\n\nSections\n\t- Data\n\t\t- Data can be represented in many ways\n\t- Selections\n\t\t- selects elements and attaches data\n\t\t- it's similar to jQuery\n\t- Data join\n\t\t- Terminology: Entered, Updated, Removed\n\t\t- States: `.data()` `.enter()` `.exit()`\n\t- svg\n\t- scales\n\t- axis\n\t- responsive\n\t- animation\n\n## The Seasonal Web Designer by Trent Walton (@TrentWalton)\n\n__Fun app__: Reigns - It shows how complicated balance can be in real life\n\nFour roles inspired from talks grouped categorically based on his analysis:\n\n\t1. Philosophical (The Philosopher)\n\t\t- What should the web be like?\n\t\t- Why should it be like that?\n\t\t- We want to find purpose in what we're doing\n\t\t- \"The sites we build should not be cut de sacs for the inquisitve visitors\" - Jeremy Rains\n\t2. Adventurous (The Crusader)\n\t\t- How can I translate my beliefs into action?\n\t\t- How old is this remote? Quote by Tim Urban\n\t3. Constructive (The Builder)\n\t\t- How can I do my job effectively and efficiently?\n\t\t- Find ways to make hard work more efficient and sharing it with the community\n\t4. Restorative (The Restorer)\n\t\t- Can I be okay giving myself time to rest, rethink and reevaluate?\n\t\t- The web oesn't anturally encourage rest & restoration...\n\t\t- \"Write when inspired, rest when tired.\" - Zeldman\n\nLet's talk about balance\n\n\t- Know thyself\n\nSeasonal\n\n\tPhilosophical => Adventurous => Constructive => Restorative\n\nFirst Wave\n\n\tChapter 1 - The web should be an expressive medium!\n\tChapter 2 - If I can do it in Photoshop, I will do it with HTML & CSS!\n\tChapter 3 - Let's build these these exciting things for clients too\n\tChapter 4 - Today I found three browser bugs and three new gray hairs\n\nSecond Wave\n\n\tWeb Fonts...\n\n## Conference Thoughts\n\nRevolutionize my portfolio layout\n\nI like the labs prefix to domain to show off fun stuff\n\nLots of exciting things to try. This was super invigorating and inspiring.\n\nDefinitely get the blog running as soon as I can.\n\nLove the use of GIFs to show progression and not make people confused\n\nPrepare for Grid Frameworks because the advantage is not incremental, it's game-changing.\n\nResumes: Ramsey Principle: A restaurant should have no more than 5 specialties on their menu.\n\n_CodePen Meetup Idea_: Panel to talk about bridging conversation between design and dev.\n\nI like how Adam uses a right rail to track what section / bullet he's going into detail about\n\nCheck out Gregor's art in CSS - http://slides.com/gregoradams/impressive-art-in-css#/\n\nIt seems like a lot of conference topics take contrarian views that sometimes serve a bit like click bait for people to go to.\n\nYou don't choose a specialization. you just keep building things and it'll find you.\n\nRemake this with Sass animation http://bl.ocks.org/mbostock/1123639\n\nInspired for Gregor's talk:  Creating optimcal illusions with CSS\n","source":"_drafts/css-dev-conf-day-two.md","raw":"---\ntitle: css-dev-conf-day-two\ntags:\n\t- cssdevconf\n\t- conferences\n---\n\n## Revolutionize Your Page: Real Art Direction on the Web by Jen Simmons (@jensimmons)\n\nAtt direction is about being in conversation with the audience\n\nbrand & art direction = conversation\n\n\"The vast majority of editorail design has at its heart **the idea of communicating an idea of a story** through the organization of and presentation of words and visuals\"- Caldwell and Cappaterra (Editorial Design)\n\n\"We're stuck in the idea that every layout needs to be one of three shapes. You have a brand new product that's unique but your website looks like everyone elses.\"\n\n\"Which one of these two web pages are you designing right now?\"\n\nChallenges 960 grid.\n\n\"Layout shouldn't be a multiple choice question. It should be an essay question.\"\n\n\"Separate tooling needs from the design process\"\n\n\"Don't make a 12 column layout out of CSS grid\"\n\n_Books to look into:_ \"Grids and Page Layouts\"\n\nlabs.jensimmons.com\n\n`initial letter: 4 (rows of text)` WHAT?!?!\n\n**Feature Queries**: WHAT?!?!?!?!?!?!?!?!?!??!??!\n\n@support (property: value) { // bunch of css }\n\n**Viewport Units**\n\nNeed to start using this more for framing cnotent on different screens\n\n**Object Fit**\n\nFill the space that's available and crop it. WHAT IS THIS MADNESS?!??!?!\n\n**Clip Path and Shape Object**\n\n**Sizing Based on Edges**\n\n**Flexbox and CSS Grid**\n\nFlexbox thinks of the world in one line. Great image of wrapping content still being connected via a \"line\"\n\n**CSS Box Alignment**\n\nflexboxdefense.com and flexboxfroggy.com\n\n**Grid Module**\n\nJen Simmons' demo of Jazz at Lincoln Center is AMAZING. MUST SHOW AND look for other stuff to do the same\n\nGreat point about Pocket and people downloading these simple text version of your web pages.\n\nCreate a fallback layout for non-grid layout.\n\nPlace each item into a specific cell/area. Let the browser place everything using autoplacement algorithm.\n\n\"It's not buggy. It's not shipped yet!\"\n\n_Interesting_ CSS Grid Inspector - Plugin that shows you the gridline\n\n\"Code is not a 2x2 grid of do or don't. It's works and doesn't work at the same time.\"\n\nEstimates Spring 2017 for evergreen browsers will have implemented Grid System.\n\njensimmons.com/presentation/progressing-our-layouts\njensimmons.com/presentation/modern-layouts-getting-out-of-our-ruts\n\nwww.layout.land\n\n## Responsive Web Applications with Responsive Queries by Jonathan Snook (@snookca)\n\nA talk more about process than code\n\nXero - Beautiful Accounting Software\n\nGoal #1: Evolve the design\n\nGoal #2: Support Multiple Devices\n\n\"Designers see a feature through all platforms\"\n\n\"Monolithic app with accessible templates\"\n\n\"Web applications have components in multiple contexts needing to respond differently.\"\n\nBrowsers do not have a way for **container queries**. The remedy for now is:\n\t- CSS, HTML or JavaScript\n\t- They chose JavaScript\n\n\"Going Responsive meant a consistent feature set across all devices.\"\nThis also means that \"new features automatically have cross-device support\"\n\n\"Product design is a team sport.\"\n\n\"Make the right things easy and the wrong things hard.\" Recommends a linting tool.\n\nShopify is getting of Container Queries due to performance. Relies more on flexbox instead.\n\n\"Designers should think Responsive before they need to\"\n\n_Interesting Group_: Responsive Issues Community Group\n\n\\#RWDQueries [1 - 5] to (504) 229-6828\n\n## Start Using ES6 Today by Wes Bos (@wesbos)\n\n### Life makers - features that make life so much better\n\n#### let and const\n\n\t- block scoped\n\nThinks of curly braces as \"fences\" that keep the variables within it. Nice analogy.\n\nNever use var for \"for loops\"\n\n\"const does not mean it is immutable!\"\n\n\"Using const makes sure we can't wipe - or rebind - wes out\"\n\nIf you want to make sure nothing changes, use Object.freeze\n\n#### template strings\n\nProposes the idea of never using regular quotes again. All backticks!\n\nAllows you to write markup very easily\n\n\"JavaScript is a templating language!\"\n\nUse the ternerary operator for if conditions\n\nBuild your own render functions when you want to nest complicated functions in your template strings\n\n#### default function arguments\n\nyou can set default arguments in your function\n\n#### Arrow functions\n\nparantheses around single arguments are optional. I kind of like it better since it's cleaner\nthere is an implicit return statement iwth arrow functions\n\tif you need a curly bracket for object, you need the parantheses around the implicit return value\n\n**this**\n\n**With arrow functions, the value of THIS does not change.** THIS is equal to whatever it is bound to and can go directly up to the window.\n\nArrow functions - the value of this does not change. It looks for the relative parent until it finds a funciton that already has at this value bound to it.\n\n#### Enhanced Object Literals\n\nYou can use a single property declaration if the variable is the same as the property name. In other words, if you have:\n\n{\n\tfirst: first\n}\n\ncan now be\n\n{\n\tfirst\n}\n\n##### Method Definition\n\nYou can eliminate function keyword if you can't use arrow functions and want to shortcut it in objects.\n\n### Deep End\n\n#### Destructuring\n\nPut it simply, it allows us to create and assign multiple variables in a single line of code. It works with both objects and arrays.\n\nexample: `const { first, twitter, city } = person;`\n\nYou can rename while you destructure: `const { twitter: tweet, facebook, fb } = wes.links.social;`\n\nYou can even set default fallback values! `cont { first, middle = 'killer', last } = person`\n\nAnd you can combine all those together!\n\nYou can swap values with destructuring\n\n`[current, benched] = [benched, current]`\n\nYou can return multiple values in a function it if returns an object:\n\n`const {USD, GBP, AUD, MEX } = convertCurrency(100);`\n\n#### Sets\n\nKind of like the arrays you have always wanted\n\n\"A set isn ES^ is like a unique array with a nice api for adding/removing/checking its items.\"\n\n`const students = new Set();`\n\npush, pop, snap, crackle and pop - nice array joke\n\nSets only contains unique data\n\n\\#ES6Tips [1 - 5] to (504) 229-6828\n\n## Speakers Panel\n\nDiscussion of the UX Engineer. A lot of companies try to cobble together UI developers who know JavaScript but don't really know design (CSS).\n\n\"Jam / Jab Session\" - Collaboration of every team before work gets started on a project\n\nGetting designers to achieve what they're getting at or trying to achieve and not simply trying to make it \"look right.\"\n\nPriority of interest for job candidates:\n\t1. Boss\n\t2. Co-workers\n\t3. Environment\n\t4. Tech Stack\n\t5...\n\n## Pattern Libraries by Adam McCombs (@adammccombs)\n\n\"Recurring solutions that solve common design problems.\" - Paul Boag | Nov 12, 2013\n\nPattern libraries are NOT\n\t- your framework\n\t- static mockups\n\t- limited to designers\n\n\"Technically a pattern library is a simple collection of UI componenents, but in order for design system users to do their best work, a pattern library should also present other improtant info.\" - Brad Frost, 2016\n\nWhy are pattern libraries a necessity?\n\t1. **Consistency** in all things\n\t\t- Keep the brand of the product with your styleguide\n\t2. **Reusability** of elements and front-end markup\n\t3. **Maintainability** of codebase before and after lunch\n\t4. **Speed and Cost** because time is money\n\t5. **Allows your to develop systems** not pages\n\n\t- 'The Dreaded' waterfall process and just 'throw it over the wall'\n\t- \"Content (RWD) is like water.\"\n\nExamples to check out:\n\t- Mailchimp: Typography\n\t- Github: Buttons - even talks about accessibility as well!\n\nThe Structure\n\t- Style: Color, typography, images\n\t- Layouts\n\t- Components\n\t- Patterns\n\nInteracting with projects:\n\t- External: patterns are externalized but pushes into your project as library.css\n\t- internal: Patterns are sepcific to an individual project\n\t- Isolated: Patterns can be updated but have no automatic effect on the projects\n\n\"Pattern libraries (and really CSS in general) is one of those things that everyone has an opinion on how to implement because of its low barrier to entry. This can (and likely will) cause strong opinions to form among various members of your team.\"\n\n### What should you build into your pattern library?\n\n\t1. **Documentation** - Document everything!\n\t\t- Pattern name\n\t\t- Pattern usage description\n\t\t- Why does this pattern exist? Link to a live page if possible!\n\t\t- What is the wrong way to use a pattern?\n\t2. **Pattern Preview** - How should this be displayed?\n\t3. **Markup** - Bonus points for copy & paste\n\n### How should you maintain your project after it launches?\n\n\t- Automate, automate, automate\n\t- \"Unless it's part of your build, your style guide is just more documentation to maintain.\" - Phil Hawksworth\n\n### Design System Maturiy Model\n\n\t- Governed: the pattern library process is built into your organization\n\t- AUtomatic: The pattern library is a part of your app build process\n\t- Manual: This pattern library has code snippets\n\t- Static: A static PDF of your brand guidelines\n\t- Inconsistent: The absence of a design system\n\n### Working in a team?\n\n\t- Standards: code standards, naming convention, file organization\n\t- Tools: other systems/libraries, gulp, grunt, Github pages\n\t- Goals: what are your objectives, pattern library timelines, post launch maintenance\n\nRecommended Resources:\n\t- styleguides.io\n\t- Fight the Zombie Pattern Library\n\t- 3 Years of Pattern Libraries: Lessons Learned\n\n## Data Visualization with Responsive D3.js by Julia Konivestska\n\ntaurusj.slides.com/taurusj/deck-1-5-6\n\nD3 - Data Driven Documents\n\t- It is...\n\t\t- not a chart library\n\t\t- not for rendering things\n\t\t- not for IE8 and older\n\t- It is...\n\t\t- a combination of building blocks (modules)\n\t\t- a great tool for mapping dta for the DOM\n\t\t- transform the data\n\t\t- smooth transition between UI states\n\nYou can use a default bundle or use modules to pick and choose what you want\n\nYou need SVG, npm, html, css, js\n\nSections\n\t- Data\n\t\t- Data can be represented in many ways\n\t- Selections\n\t\t- selects elements and attaches data\n\t\t- it's similar to jQuery\n\t- Data join\n\t\t- Terminology: Entered, Updated, Removed\n\t\t- States: `.data()` `.enter()` `.exit()`\n\t- svg\n\t- scales\n\t- axis\n\t- responsive\n\t- animation\n\n## The Seasonal Web Designer by Trent Walton (@TrentWalton)\n\n__Fun app__: Reigns - It shows how complicated balance can be in real life\n\nFour roles inspired from talks grouped categorically based on his analysis:\n\n\t1. Philosophical (The Philosopher)\n\t\t- What should the web be like?\n\t\t- Why should it be like that?\n\t\t- We want to find purpose in what we're doing\n\t\t- \"The sites we build should not be cut de sacs for the inquisitve visitors\" - Jeremy Rains\n\t2. Adventurous (The Crusader)\n\t\t- How can I translate my beliefs into action?\n\t\t- How old is this remote? Quote by Tim Urban\n\t3. Constructive (The Builder)\n\t\t- How can I do my job effectively and efficiently?\n\t\t- Find ways to make hard work more efficient and sharing it with the community\n\t4. Restorative (The Restorer)\n\t\t- Can I be okay giving myself time to rest, rethink and reevaluate?\n\t\t- The web oesn't anturally encourage rest & restoration...\n\t\t- \"Write when inspired, rest when tired.\" - Zeldman\n\nLet's talk about balance\n\n\t- Know thyself\n\nSeasonal\n\n\tPhilosophical => Adventurous => Constructive => Restorative\n\nFirst Wave\n\n\tChapter 1 - The web should be an expressive medium!\n\tChapter 2 - If I can do it in Photoshop, I will do it with HTML & CSS!\n\tChapter 3 - Let's build these these exciting things for clients too\n\tChapter 4 - Today I found three browser bugs and three new gray hairs\n\nSecond Wave\n\n\tWeb Fonts...\n\n## Conference Thoughts\n\nRevolutionize my portfolio layout\n\nI like the labs prefix to domain to show off fun stuff\n\nLots of exciting things to try. This was super invigorating and inspiring.\n\nDefinitely get the blog running as soon as I can.\n\nLove the use of GIFs to show progression and not make people confused\n\nPrepare for Grid Frameworks because the advantage is not incremental, it's game-changing.\n\nResumes: Ramsey Principle: A restaurant should have no more than 5 specialties on their menu.\n\n_CodePen Meetup Idea_: Panel to talk about bridging conversation between design and dev.\n\nI like how Adam uses a right rail to track what section / bullet he's going into detail about\n\nCheck out Gregor's art in CSS - http://slides.com/gregoradams/impressive-art-in-css#/\n\nIt seems like a lot of conference topics take contrarian views that sometimes serve a bit like click bait for people to go to.\n\nYou don't choose a specialization. you just keep building things and it'll find you.\n\nRemake this with Sass animation http://bl.ocks.org/mbostock/1123639\n\nInspired for Gregor's talk:  Creating optimcal illusions with CSS\n","slug":"css-dev-conf-day-two","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy43q000fnwxvosel9lic","content":"<h2 id=\"Revolutionize-Your-Page-Real-Art-Direction-on-the-Web-by-Jen-Simmons-jensimmons\"><a href=\"#Revolutionize-Your-Page-Real-Art-Direction-on-the-Web-by-Jen-Simmons-jensimmons\" class=\"headerlink\" title=\"Revolutionize Your Page: Real Art Direction on the Web by Jen Simmons (@jensimmons)\"></a>Revolutionize Your Page: Real Art Direction on the Web by Jen Simmons (@jensimmons)</h2><p>Att direction is about being in conversation with the audience</p>\n<p>brand &amp; art direction = conversation</p>\n<p>“The vast majority of editorail design has at its heart <strong>the idea of communicating an idea of a story</strong> through the organization of and presentation of words and visuals”- Caldwell and Cappaterra (Editorial Design)</p>\n<p>“We’re stuck in the idea that every layout needs to be one of three shapes. You have a brand new product that’s unique but your website looks like everyone elses.”</p>\n<p>“Which one of these two web pages are you designing right now?”</p>\n<p>Challenges 960 grid.</p>\n<p>“Layout shouldn’t be a multiple choice question. It should be an essay question.”</p>\n<p>“Separate tooling needs from the design process”</p>\n<p>“Don’t make a 12 column layout out of CSS grid”</p>\n<p><em>Books to look into:</em> “Grids and Page Layouts”</p>\n<p>labs.jensimmons.com</p>\n<p><code>initial letter: 4 (rows of text)</code> WHAT?!?!</p>\n<p><strong>Feature Queries</strong>: WHAT?!?!?!?!?!?!?!?!?!??!??!</p>\n<p>@support (property: value) { // bunch of css }</p>\n<p><strong>Viewport Units</strong></p>\n<p>Need to start using this more for framing cnotent on different screens</p>\n<p><strong>Object Fit</strong></p>\n<p>Fill the space that’s available and crop it. WHAT IS THIS MADNESS?!??!?!</p>\n<p><strong>Clip Path and Shape Object</strong></p>\n<p><strong>Sizing Based on Edges</strong></p>\n<p><strong>Flexbox and CSS Grid</strong></p>\n<p>Flexbox thinks of the world in one line. Great image of wrapping content still being connected via a “line”</p>\n<p><strong>CSS Box Alignment</strong></p>\n<p>flexboxdefense.com and flexboxfroggy.com</p>\n<p><strong>Grid Module</strong></p>\n<p>Jen Simmons’ demo of Jazz at Lincoln Center is AMAZING. MUST SHOW AND look for other stuff to do the same</p>\n<p>Great point about Pocket and people downloading these simple text version of your web pages.</p>\n<p>Create a fallback layout for non-grid layout.</p>\n<p>Place each item into a specific cell/area. Let the browser place everything using autoplacement algorithm.</p>\n<p>“It’s not buggy. It’s not shipped yet!”</p>\n<p><em>Interesting</em> CSS Grid Inspector - Plugin that shows you the gridline</p>\n<p>“Code is not a 2x2 grid of do or don’t. It’s works and doesn’t work at the same time.”</p>\n<p>Estimates Spring 2017 for evergreen browsers will have implemented Grid System.</p>\n<p>jensimmons.com/presentation/progressing-our-layouts<br>jensimmons.com/presentation/modern-layouts-getting-out-of-our-ruts</p>\n<p>www.layout.land</p>\n<h2 id=\"Responsive-Web-Applications-with-Responsive-Queries-by-Jonathan-Snook-snookca\"><a href=\"#Responsive-Web-Applications-with-Responsive-Queries-by-Jonathan-Snook-snookca\" class=\"headerlink\" title=\"Responsive Web Applications with Responsive Queries by Jonathan Snook (@snookca)\"></a>Responsive Web Applications with Responsive Queries by Jonathan Snook (@snookca)</h2><p>A talk more about process than code</p>\n<p>Xero - Beautiful Accounting Software</p>\n<p>Goal #1: Evolve the design</p>\n<p>Goal #2: Support Multiple Devices</p>\n<p>“Designers see a feature through all platforms”</p>\n<p>“Monolithic app with accessible templates”</p>\n<p>“Web applications have components in multiple contexts needing to respond differently.”</p>\n<p>Browsers do not have a way for <strong>container queries</strong>. The remedy for now is:</p>\n<pre><code>- CSS, HTML or JavaScript\n- They chose JavaScript\n</code></pre><p>“Going Responsive meant a consistent feature set across all devices.”<br>This also means that “new features automatically have cross-device support”</p>\n<p>“Product design is a team sport.”</p>\n<p>“Make the right things easy and the wrong things hard.” Recommends a linting tool.</p>\n<p>Shopify is getting of Container Queries due to performance. Relies more on flexbox instead.</p>\n<p>“Designers should think Responsive before they need to”</p>\n<p><em>Interesting Group</em>: Responsive Issues Community Group</p>\n<p>#RWDQueries [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Start-Using-ES6-Today-by-Wes-Bos-wesbos\"><a href=\"#Start-Using-ES6-Today-by-Wes-Bos-wesbos\" class=\"headerlink\" title=\"Start Using ES6 Today by Wes Bos (@wesbos)\"></a>Start Using ES6 Today by Wes Bos (@wesbos)</h2><h3 id=\"Life-makers-features-that-make-life-so-much-better\"><a href=\"#Life-makers-features-that-make-life-so-much-better\" class=\"headerlink\" title=\"Life makers - features that make life so much better\"></a>Life makers - features that make life so much better</h3><h4 id=\"let-and-const\"><a href=\"#let-and-const\" class=\"headerlink\" title=\"let and const\"></a>let and const</h4><pre><code>- block scoped\n</code></pre><p>Thinks of curly braces as “fences” that keep the variables within it. Nice analogy.</p>\n<p>Never use var for “for loops”</p>\n<p>“const does not mean it is immutable!”</p>\n<p>“Using const makes sure we can’t wipe - or rebind - wes out”</p>\n<p>If you want to make sure nothing changes, use Object.freeze</p>\n<h4 id=\"template-strings\"><a href=\"#template-strings\" class=\"headerlink\" title=\"template strings\"></a>template strings</h4><p>Proposes the idea of never using regular quotes again. All backticks!</p>\n<p>Allows you to write markup very easily</p>\n<p>“JavaScript is a templating language!”</p>\n<p>Use the ternerary operator for if conditions</p>\n<p>Build your own render functions when you want to nest complicated functions in your template strings</p>\n<h4 id=\"default-function-arguments\"><a href=\"#default-function-arguments\" class=\"headerlink\" title=\"default function arguments\"></a>default function arguments</h4><p>you can set default arguments in your function</p>\n<h4 id=\"Arrow-functions\"><a href=\"#Arrow-functions\" class=\"headerlink\" title=\"Arrow functions\"></a>Arrow functions</h4><p>parantheses around single arguments are optional. I kind of like it better since it’s cleaner<br>there is an implicit return statement iwth arrow functions<br>    if you need a curly bracket for object, you need the parantheses around the implicit return value</p>\n<p><strong>this</strong></p>\n<p><strong>With arrow functions, the value of THIS does not change.</strong> THIS is equal to whatever it is bound to and can go directly up to the window.</p>\n<p>Arrow functions - the value of this does not change. It looks for the relative parent until it finds a funciton that already has at this value bound to it.</p>\n<h4 id=\"Enhanced-Object-Literals\"><a href=\"#Enhanced-Object-Literals\" class=\"headerlink\" title=\"Enhanced Object Literals\"></a>Enhanced Object Literals</h4><p>You can use a single property declaration if the variable is the same as the property name. In other words, if you have:</p>\n<p>{<br>    first: first<br>}</p>\n<p>can now be</p>\n<p>{<br>    first<br>}</p>\n<h5 id=\"Method-Definition\"><a href=\"#Method-Definition\" class=\"headerlink\" title=\"Method Definition\"></a>Method Definition</h5><p>You can eliminate function keyword if you can’t use arrow functions and want to shortcut it in objects.</p>\n<h3 id=\"Deep-End\"><a href=\"#Deep-End\" class=\"headerlink\" title=\"Deep End\"></a>Deep End</h3><h4 id=\"Destructuring\"><a href=\"#Destructuring\" class=\"headerlink\" title=\"Destructuring\"></a>Destructuring</h4><p>Put it simply, it allows us to create and assign multiple variables in a single line of code. It works with both objects and arrays.</p>\n<p>example: <code>const { first, twitter, city } = person;</code></p>\n<p>You can rename while you destructure: <code>const { twitter: tweet, facebook, fb } = wes.links.social;</code></p>\n<p>You can even set default fallback values! <code>cont { first, middle = &#39;killer&#39;, last } = person</code></p>\n<p>And you can combine all those together!</p>\n<p>You can swap values with destructuring</p>\n<p><code>[current, benched] = [benched, current]</code></p>\n<p>You can return multiple values in a function it if returns an object:</p>\n<p><code>const {USD, GBP, AUD, MEX } = convertCurrency(100);</code></p>\n<h4 id=\"Sets\"><a href=\"#Sets\" class=\"headerlink\" title=\"Sets\"></a>Sets</h4><p>Kind of like the arrays you have always wanted</p>\n<p>“A set isn ES^ is like a unique array with a nice api for adding/removing/checking its items.”</p>\n<p><code>const students = new Set();</code></p>\n<p>push, pop, snap, crackle and pop - nice array joke</p>\n<p>Sets only contains unique data</p>\n<p>#ES6Tips [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Speakers-Panel\"><a href=\"#Speakers-Panel\" class=\"headerlink\" title=\"Speakers Panel\"></a>Speakers Panel</h2><p>Discussion of the UX Engineer. A lot of companies try to cobble together UI developers who know JavaScript but don’t really know design (CSS).</p>\n<p>“Jam / Jab Session” - Collaboration of every team before work gets started on a project</p>\n<p>Getting designers to achieve what they’re getting at or trying to achieve and not simply trying to make it “look right.”</p>\n<p>Priority of interest for job candidates:</p>\n<pre><code>1. Boss\n2. Co-workers\n3. Environment\n4. Tech Stack\n5...\n</code></pre><h2 id=\"Pattern-Libraries-by-Adam-McCombs-adammccombs\"><a href=\"#Pattern-Libraries-by-Adam-McCombs-adammccombs\" class=\"headerlink\" title=\"Pattern Libraries by Adam McCombs (@adammccombs)\"></a>Pattern Libraries by Adam McCombs (@adammccombs)</h2><p>“Recurring solutions that solve common design problems.” - Paul Boag | Nov 12, 2013</p>\n<p>Pattern libraries are NOT</p>\n<pre><code>- your framework\n- static mockups\n- limited to designers\n</code></pre><p>“Technically a pattern library is a simple collection of UI componenents, but in order for design system users to do their best work, a pattern library should also present other improtant info.” - Brad Frost, 2016</p>\n<p>Why are pattern libraries a necessity?</p>\n<pre><code>1. **Consistency** in all things\n    - Keep the brand of the product with your styleguide\n2. **Reusability** of elements and front-end markup\n3. **Maintainability** of codebase before and after lunch\n4. **Speed and Cost** because time is money\n5. **Allows your to develop systems** not pages\n\n- &apos;The Dreaded&apos; waterfall process and just &apos;throw it over the wall&apos;\n- &quot;Content (RWD) is like water.&quot;\n</code></pre><p>Examples to check out:</p>\n<pre><code>- Mailchimp: Typography\n- Github: Buttons - even talks about accessibility as well!\n</code></pre><p>The Structure</p>\n<pre><code>- Style: Color, typography, images\n- Layouts\n- Components\n- Patterns\n</code></pre><p>Interacting with projects:</p>\n<pre><code>- External: patterns are externalized but pushes into your project as library.css\n- internal: Patterns are sepcific to an individual project\n- Isolated: Patterns can be updated but have no automatic effect on the projects\n</code></pre><p>“Pattern libraries (and really CSS in general) is one of those things that everyone has an opinion on how to implement because of its low barrier to entry. This can (and likely will) cause strong opinions to form among various members of your team.”</p>\n<h3 id=\"What-should-you-build-into-your-pattern-library\"><a href=\"#What-should-you-build-into-your-pattern-library\" class=\"headerlink\" title=\"What should you build into your pattern library?\"></a>What should you build into your pattern library?</h3><pre><code>1. **Documentation** - Document everything!\n    - Pattern name\n    - Pattern usage description\n    - Why does this pattern exist? Link to a live page if possible!\n    - What is the wrong way to use a pattern?\n2. **Pattern Preview** - How should this be displayed?\n3. **Markup** - Bonus points for copy &amp; paste\n</code></pre><h3 id=\"How-should-you-maintain-your-project-after-it-launches\"><a href=\"#How-should-you-maintain-your-project-after-it-launches\" class=\"headerlink\" title=\"How should you maintain your project after it launches?\"></a>How should you maintain your project after it launches?</h3><pre><code>- Automate, automate, automate\n- &quot;Unless it&apos;s part of your build, your style guide is just more documentation to maintain.&quot; - Phil Hawksworth\n</code></pre><h3 id=\"Design-System-Maturiy-Model\"><a href=\"#Design-System-Maturiy-Model\" class=\"headerlink\" title=\"Design System Maturiy Model\"></a>Design System Maturiy Model</h3><pre><code>- Governed: the pattern library process is built into your organization\n- AUtomatic: The pattern library is a part of your app build process\n- Manual: This pattern library has code snippets\n- Static: A static PDF of your brand guidelines\n- Inconsistent: The absence of a design system\n</code></pre><h3 id=\"Working-in-a-team\"><a href=\"#Working-in-a-team\" class=\"headerlink\" title=\"Working in a team?\"></a>Working in a team?</h3><pre><code>- Standards: code standards, naming convention, file organization\n- Tools: other systems/libraries, gulp, grunt, Github pages\n- Goals: what are your objectives, pattern library timelines, post launch maintenance\n</code></pre><p>Recommended Resources:</p>\n<pre><code>- styleguides.io\n- Fight the Zombie Pattern Library\n- 3 Years of Pattern Libraries: Lessons Learned\n</code></pre><h2 id=\"Data-Visualization-with-Responsive-D3-js-by-Julia-Konivestska\"><a href=\"#Data-Visualization-with-Responsive-D3-js-by-Julia-Konivestska\" class=\"headerlink\" title=\"Data Visualization with Responsive D3.js by Julia Konivestska\"></a>Data Visualization with Responsive D3.js by Julia Konivestska</h2><p>taurusj.slides.com/taurusj/deck-1-5-6</p>\n<p>D3 - Data Driven Documents</p>\n<pre><code>- It is...\n    - not a chart library\n    - not for rendering things\n    - not for IE8 and older\n- It is...\n    - a combination of building blocks (modules)\n    - a great tool for mapping dta for the DOM\n    - transform the data\n    - smooth transition between UI states\n</code></pre><p>You can use a default bundle or use modules to pick and choose what you want</p>\n<p>You need SVG, npm, html, css, js</p>\n<p>Sections</p>\n<pre><code>- Data\n    - Data can be represented in many ways\n- Selections\n    - selects elements and attaches data\n    - it&apos;s similar to jQuery\n- Data join\n    - Terminology: Entered, Updated, Removed\n    - States: `.data()` `.enter()` `.exit()`\n- svg\n- scales\n- axis\n- responsive\n- animation\n</code></pre><h2 id=\"The-Seasonal-Web-Designer-by-Trent-Walton-TrentWalton\"><a href=\"#The-Seasonal-Web-Designer-by-Trent-Walton-TrentWalton\" class=\"headerlink\" title=\"The Seasonal Web Designer by Trent Walton (@TrentWalton)\"></a>The Seasonal Web Designer by Trent Walton (@TrentWalton)</h2><p><strong>Fun app</strong>: Reigns - It shows how complicated balance can be in real life</p>\n<p>Four roles inspired from talks grouped categorically based on his analysis:</p>\n<pre><code>1. Philosophical (The Philosopher)\n    - What should the web be like?\n    - Why should it be like that?\n    - We want to find purpose in what we&apos;re doing\n    - &quot;The sites we build should not be cut de sacs for the inquisitve visitors&quot; - Jeremy Rains\n2. Adventurous (The Crusader)\n    - How can I translate my beliefs into action?\n    - How old is this remote? Quote by Tim Urban\n3. Constructive (The Builder)\n    - How can I do my job effectively and efficiently?\n    - Find ways to make hard work more efficient and sharing it with the community\n4. Restorative (The Restorer)\n    - Can I be okay giving myself time to rest, rethink and reevaluate?\n    - The web oesn&apos;t anturally encourage rest &amp; restoration...\n    - &quot;Write when inspired, rest when tired.&quot; - Zeldman\n</code></pre><p>Let’s talk about balance</p>\n<pre><code>- Know thyself\n</code></pre><p>Seasonal</p>\n<pre><code>Philosophical =&gt; Adventurous =&gt; Constructive =&gt; Restorative\n</code></pre><p>First Wave</p>\n<pre><code>Chapter 1 - The web should be an expressive medium!\nChapter 2 - If I can do it in Photoshop, I will do it with HTML &amp; CSS!\nChapter 3 - Let&apos;s build these these exciting things for clients too\nChapter 4 - Today I found three browser bugs and three new gray hairs\n</code></pre><p>Second Wave</p>\n<pre><code>Web Fonts...\n</code></pre><h2 id=\"Conference-Thoughts\"><a href=\"#Conference-Thoughts\" class=\"headerlink\" title=\"Conference Thoughts\"></a>Conference Thoughts</h2><p>Revolutionize my portfolio layout</p>\n<p>I like the labs prefix to domain to show off fun stuff</p>\n<p>Lots of exciting things to try. This was super invigorating and inspiring.</p>\n<p>Definitely get the blog running as soon as I can.</p>\n<p>Love the use of GIFs to show progression and not make people confused</p>\n<p>Prepare for Grid Frameworks because the advantage is not incremental, it’s game-changing.</p>\n<p>Resumes: Ramsey Principle: A restaurant should have no more than 5 specialties on their menu.</p>\n<p><em>CodePen Meetup Idea</em>: Panel to talk about bridging conversation between design and dev.</p>\n<p>I like how Adam uses a right rail to track what section / bullet he’s going into detail about</p>\n<p>Check out Gregor’s art in CSS - <a href=\"http://slides.com/gregoradams/impressive-art-in-css#/\" target=\"_blank\" rel=\"external\">http://slides.com/gregoradams/impressive-art-in-css#/</a></p>\n<p>It seems like a lot of conference topics take contrarian views that sometimes serve a bit like click bait for people to go to.</p>\n<p>You don’t choose a specialization. you just keep building things and it’ll find you.</p>\n<p>Remake this with Sass animation <a href=\"http://bl.ocks.org/mbostock/1123639\" target=\"_blank\" rel=\"external\">http://bl.ocks.org/mbostock/1123639</a></p>\n<p>Inspired for Gregor’s talk:  Creating optimcal illusions with CSS</p>\n","excerpt":"","more":"<h2 id=\"Revolutionize-Your-Page-Real-Art-Direction-on-the-Web-by-Jen-Simmons-jensimmons\"><a href=\"#Revolutionize-Your-Page-Real-Art-Direction-on-the-Web-by-Jen-Simmons-jensimmons\" class=\"headerlink\" title=\"Revolutionize Your Page: Real Art Direction on the Web by Jen Simmons (@jensimmons)\"></a>Revolutionize Your Page: Real Art Direction on the Web by Jen Simmons (@jensimmons)</h2><p>Att direction is about being in conversation with the audience</p>\n<p>brand &amp; art direction = conversation</p>\n<p>“The vast majority of editorail design has at its heart <strong>the idea of communicating an idea of a story</strong> through the organization of and presentation of words and visuals”- Caldwell and Cappaterra (Editorial Design)</p>\n<p>“We’re stuck in the idea that every layout needs to be one of three shapes. You have a brand new product that’s unique but your website looks like everyone elses.”</p>\n<p>“Which one of these two web pages are you designing right now?”</p>\n<p>Challenges 960 grid.</p>\n<p>“Layout shouldn’t be a multiple choice question. It should be an essay question.”</p>\n<p>“Separate tooling needs from the design process”</p>\n<p>“Don’t make a 12 column layout out of CSS grid”</p>\n<p><em>Books to look into:</em> “Grids and Page Layouts”</p>\n<p>labs.jensimmons.com</p>\n<p><code>initial letter: 4 (rows of text)</code> WHAT?!?!</p>\n<p><strong>Feature Queries</strong>: WHAT?!?!?!?!?!?!?!?!?!??!??!</p>\n<p>@support (property: value) { // bunch of css }</p>\n<p><strong>Viewport Units</strong></p>\n<p>Need to start using this more for framing cnotent on different screens</p>\n<p><strong>Object Fit</strong></p>\n<p>Fill the space that’s available and crop it. WHAT IS THIS MADNESS?!??!?!</p>\n<p><strong>Clip Path and Shape Object</strong></p>\n<p><strong>Sizing Based on Edges</strong></p>\n<p><strong>Flexbox and CSS Grid</strong></p>\n<p>Flexbox thinks of the world in one line. Great image of wrapping content still being connected via a “line”</p>\n<p><strong>CSS Box Alignment</strong></p>\n<p>flexboxdefense.com and flexboxfroggy.com</p>\n<p><strong>Grid Module</strong></p>\n<p>Jen Simmons’ demo of Jazz at Lincoln Center is AMAZING. MUST SHOW AND look for other stuff to do the same</p>\n<p>Great point about Pocket and people downloading these simple text version of your web pages.</p>\n<p>Create a fallback layout for non-grid layout.</p>\n<p>Place each item into a specific cell/area. Let the browser place everything using autoplacement algorithm.</p>\n<p>“It’s not buggy. It’s not shipped yet!”</p>\n<p><em>Interesting</em> CSS Grid Inspector - Plugin that shows you the gridline</p>\n<p>“Code is not a 2x2 grid of do or don’t. It’s works and doesn’t work at the same time.”</p>\n<p>Estimates Spring 2017 for evergreen browsers will have implemented Grid System.</p>\n<p>jensimmons.com/presentation/progressing-our-layouts<br>jensimmons.com/presentation/modern-layouts-getting-out-of-our-ruts</p>\n<p>www.layout.land</p>\n<h2 id=\"Responsive-Web-Applications-with-Responsive-Queries-by-Jonathan-Snook-snookca\"><a href=\"#Responsive-Web-Applications-with-Responsive-Queries-by-Jonathan-Snook-snookca\" class=\"headerlink\" title=\"Responsive Web Applications with Responsive Queries by Jonathan Snook (@snookca)\"></a>Responsive Web Applications with Responsive Queries by Jonathan Snook (@snookca)</h2><p>A talk more about process than code</p>\n<p>Xero - Beautiful Accounting Software</p>\n<p>Goal #1: Evolve the design</p>\n<p>Goal #2: Support Multiple Devices</p>\n<p>“Designers see a feature through all platforms”</p>\n<p>“Monolithic app with accessible templates”</p>\n<p>“Web applications have components in multiple contexts needing to respond differently.”</p>\n<p>Browsers do not have a way for <strong>container queries</strong>. The remedy for now is:</p>\n<pre><code>- CSS, HTML or JavaScript\n- They chose JavaScript\n</code></pre><p>“Going Responsive meant a consistent feature set across all devices.”<br>This also means that “new features automatically have cross-device support”</p>\n<p>“Product design is a team sport.”</p>\n<p>“Make the right things easy and the wrong things hard.” Recommends a linting tool.</p>\n<p>Shopify is getting of Container Queries due to performance. Relies more on flexbox instead.</p>\n<p>“Designers should think Responsive before they need to”</p>\n<p><em>Interesting Group</em>: Responsive Issues Community Group</p>\n<p>#RWDQueries [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Start-Using-ES6-Today-by-Wes-Bos-wesbos\"><a href=\"#Start-Using-ES6-Today-by-Wes-Bos-wesbos\" class=\"headerlink\" title=\"Start Using ES6 Today by Wes Bos (@wesbos)\"></a>Start Using ES6 Today by Wes Bos (@wesbos)</h2><h3 id=\"Life-makers-features-that-make-life-so-much-better\"><a href=\"#Life-makers-features-that-make-life-so-much-better\" class=\"headerlink\" title=\"Life makers - features that make life so much better\"></a>Life makers - features that make life so much better</h3><h4 id=\"let-and-const\"><a href=\"#let-and-const\" class=\"headerlink\" title=\"let and const\"></a>let and const</h4><pre><code>- block scoped\n</code></pre><p>Thinks of curly braces as “fences” that keep the variables within it. Nice analogy.</p>\n<p>Never use var for “for loops”</p>\n<p>“const does not mean it is immutable!”</p>\n<p>“Using const makes sure we can’t wipe - or rebind - wes out”</p>\n<p>If you want to make sure nothing changes, use Object.freeze</p>\n<h4 id=\"template-strings\"><a href=\"#template-strings\" class=\"headerlink\" title=\"template strings\"></a>template strings</h4><p>Proposes the idea of never using regular quotes again. All backticks!</p>\n<p>Allows you to write markup very easily</p>\n<p>“JavaScript is a templating language!”</p>\n<p>Use the ternerary operator for if conditions</p>\n<p>Build your own render functions when you want to nest complicated functions in your template strings</p>\n<h4 id=\"default-function-arguments\"><a href=\"#default-function-arguments\" class=\"headerlink\" title=\"default function arguments\"></a>default function arguments</h4><p>you can set default arguments in your function</p>\n<h4 id=\"Arrow-functions\"><a href=\"#Arrow-functions\" class=\"headerlink\" title=\"Arrow functions\"></a>Arrow functions</h4><p>parantheses around single arguments are optional. I kind of like it better since it’s cleaner<br>there is an implicit return statement iwth arrow functions<br>    if you need a curly bracket for object, you need the parantheses around the implicit return value</p>\n<p><strong>this</strong></p>\n<p><strong>With arrow functions, the value of THIS does not change.</strong> THIS is equal to whatever it is bound to and can go directly up to the window.</p>\n<p>Arrow functions - the value of this does not change. It looks for the relative parent until it finds a funciton that already has at this value bound to it.</p>\n<h4 id=\"Enhanced-Object-Literals\"><a href=\"#Enhanced-Object-Literals\" class=\"headerlink\" title=\"Enhanced Object Literals\"></a>Enhanced Object Literals</h4><p>You can use a single property declaration if the variable is the same as the property name. In other words, if you have:</p>\n<p>{<br>    first: first<br>}</p>\n<p>can now be</p>\n<p>{<br>    first<br>}</p>\n<h5 id=\"Method-Definition\"><a href=\"#Method-Definition\" class=\"headerlink\" title=\"Method Definition\"></a>Method Definition</h5><p>You can eliminate function keyword if you can’t use arrow functions and want to shortcut it in objects.</p>\n<h3 id=\"Deep-End\"><a href=\"#Deep-End\" class=\"headerlink\" title=\"Deep End\"></a>Deep End</h3><h4 id=\"Destructuring\"><a href=\"#Destructuring\" class=\"headerlink\" title=\"Destructuring\"></a>Destructuring</h4><p>Put it simply, it allows us to create and assign multiple variables in a single line of code. It works with both objects and arrays.</p>\n<p>example: <code>const { first, twitter, city } = person;</code></p>\n<p>You can rename while you destructure: <code>const { twitter: tweet, facebook, fb } = wes.links.social;</code></p>\n<p>You can even set default fallback values! <code>cont { first, middle = &#39;killer&#39;, last } = person</code></p>\n<p>And you can combine all those together!</p>\n<p>You can swap values with destructuring</p>\n<p><code>[current, benched] = [benched, current]</code></p>\n<p>You can return multiple values in a function it if returns an object:</p>\n<p><code>const {USD, GBP, AUD, MEX } = convertCurrency(100);</code></p>\n<h4 id=\"Sets\"><a href=\"#Sets\" class=\"headerlink\" title=\"Sets\"></a>Sets</h4><p>Kind of like the arrays you have always wanted</p>\n<p>“A set isn ES^ is like a unique array with a nice api for adding/removing/checking its items.”</p>\n<p><code>const students = new Set();</code></p>\n<p>push, pop, snap, crackle and pop - nice array joke</p>\n<p>Sets only contains unique data</p>\n<p>#ES6Tips [1 - 5] to (504) 229-6828</p>\n<h2 id=\"Speakers-Panel\"><a href=\"#Speakers-Panel\" class=\"headerlink\" title=\"Speakers Panel\"></a>Speakers Panel</h2><p>Discussion of the UX Engineer. A lot of companies try to cobble together UI developers who know JavaScript but don’t really know design (CSS).</p>\n<p>“Jam / Jab Session” - Collaboration of every team before work gets started on a project</p>\n<p>Getting designers to achieve what they’re getting at or trying to achieve and not simply trying to make it “look right.”</p>\n<p>Priority of interest for job candidates:</p>\n<pre><code>1. Boss\n2. Co-workers\n3. Environment\n4. Tech Stack\n5...\n</code></pre><h2 id=\"Pattern-Libraries-by-Adam-McCombs-adammccombs\"><a href=\"#Pattern-Libraries-by-Adam-McCombs-adammccombs\" class=\"headerlink\" title=\"Pattern Libraries by Adam McCombs (@adammccombs)\"></a>Pattern Libraries by Adam McCombs (@adammccombs)</h2><p>“Recurring solutions that solve common design problems.” - Paul Boag | Nov 12, 2013</p>\n<p>Pattern libraries are NOT</p>\n<pre><code>- your framework\n- static mockups\n- limited to designers\n</code></pre><p>“Technically a pattern library is a simple collection of UI componenents, but in order for design system users to do their best work, a pattern library should also present other improtant info.” - Brad Frost, 2016</p>\n<p>Why are pattern libraries a necessity?</p>\n<pre><code>1. **Consistency** in all things\n    - Keep the brand of the product with your styleguide\n2. **Reusability** of elements and front-end markup\n3. **Maintainability** of codebase before and after lunch\n4. **Speed and Cost** because time is money\n5. **Allows your to develop systems** not pages\n\n- &apos;The Dreaded&apos; waterfall process and just &apos;throw it over the wall&apos;\n- &quot;Content (RWD) is like water.&quot;\n</code></pre><p>Examples to check out:</p>\n<pre><code>- Mailchimp: Typography\n- Github: Buttons - even talks about accessibility as well!\n</code></pre><p>The Structure</p>\n<pre><code>- Style: Color, typography, images\n- Layouts\n- Components\n- Patterns\n</code></pre><p>Interacting with projects:</p>\n<pre><code>- External: patterns are externalized but pushes into your project as library.css\n- internal: Patterns are sepcific to an individual project\n- Isolated: Patterns can be updated but have no automatic effect on the projects\n</code></pre><p>“Pattern libraries (and really CSS in general) is one of those things that everyone has an opinion on how to implement because of its low barrier to entry. This can (and likely will) cause strong opinions to form among various members of your team.”</p>\n<h3 id=\"What-should-you-build-into-your-pattern-library\"><a href=\"#What-should-you-build-into-your-pattern-library\" class=\"headerlink\" title=\"What should you build into your pattern library?\"></a>What should you build into your pattern library?</h3><pre><code>1. **Documentation** - Document everything!\n    - Pattern name\n    - Pattern usage description\n    - Why does this pattern exist? Link to a live page if possible!\n    - What is the wrong way to use a pattern?\n2. **Pattern Preview** - How should this be displayed?\n3. **Markup** - Bonus points for copy &amp; paste\n</code></pre><h3 id=\"How-should-you-maintain-your-project-after-it-launches\"><a href=\"#How-should-you-maintain-your-project-after-it-launches\" class=\"headerlink\" title=\"How should you maintain your project after it launches?\"></a>How should you maintain your project after it launches?</h3><pre><code>- Automate, automate, automate\n- &quot;Unless it&apos;s part of your build, your style guide is just more documentation to maintain.&quot; - Phil Hawksworth\n</code></pre><h3 id=\"Design-System-Maturiy-Model\"><a href=\"#Design-System-Maturiy-Model\" class=\"headerlink\" title=\"Design System Maturiy Model\"></a>Design System Maturiy Model</h3><pre><code>- Governed: the pattern library process is built into your organization\n- AUtomatic: The pattern library is a part of your app build process\n- Manual: This pattern library has code snippets\n- Static: A static PDF of your brand guidelines\n- Inconsistent: The absence of a design system\n</code></pre><h3 id=\"Working-in-a-team\"><a href=\"#Working-in-a-team\" class=\"headerlink\" title=\"Working in a team?\"></a>Working in a team?</h3><pre><code>- Standards: code standards, naming convention, file organization\n- Tools: other systems/libraries, gulp, grunt, Github pages\n- Goals: what are your objectives, pattern library timelines, post launch maintenance\n</code></pre><p>Recommended Resources:</p>\n<pre><code>- styleguides.io\n- Fight the Zombie Pattern Library\n- 3 Years of Pattern Libraries: Lessons Learned\n</code></pre><h2 id=\"Data-Visualization-with-Responsive-D3-js-by-Julia-Konivestska\"><a href=\"#Data-Visualization-with-Responsive-D3-js-by-Julia-Konivestska\" class=\"headerlink\" title=\"Data Visualization with Responsive D3.js by Julia Konivestska\"></a>Data Visualization with Responsive D3.js by Julia Konivestska</h2><p>taurusj.slides.com/taurusj/deck-1-5-6</p>\n<p>D3 - Data Driven Documents</p>\n<pre><code>- It is...\n    - not a chart library\n    - not for rendering things\n    - not for IE8 and older\n- It is...\n    - a combination of building blocks (modules)\n    - a great tool for mapping dta for the DOM\n    - transform the data\n    - smooth transition between UI states\n</code></pre><p>You can use a default bundle or use modules to pick and choose what you want</p>\n<p>You need SVG, npm, html, css, js</p>\n<p>Sections</p>\n<pre><code>- Data\n    - Data can be represented in many ways\n- Selections\n    - selects elements and attaches data\n    - it&apos;s similar to jQuery\n- Data join\n    - Terminology: Entered, Updated, Removed\n    - States: `.data()` `.enter()` `.exit()`\n- svg\n- scales\n- axis\n- responsive\n- animation\n</code></pre><h2 id=\"The-Seasonal-Web-Designer-by-Trent-Walton-TrentWalton\"><a href=\"#The-Seasonal-Web-Designer-by-Trent-Walton-TrentWalton\" class=\"headerlink\" title=\"The Seasonal Web Designer by Trent Walton (@TrentWalton)\"></a>The Seasonal Web Designer by Trent Walton (@TrentWalton)</h2><p><strong>Fun app</strong>: Reigns - It shows how complicated balance can be in real life</p>\n<p>Four roles inspired from talks grouped categorically based on his analysis:</p>\n<pre><code>1. Philosophical (The Philosopher)\n    - What should the web be like?\n    - Why should it be like that?\n    - We want to find purpose in what we&apos;re doing\n    - &quot;The sites we build should not be cut de sacs for the inquisitve visitors&quot; - Jeremy Rains\n2. Adventurous (The Crusader)\n    - How can I translate my beliefs into action?\n    - How old is this remote? Quote by Tim Urban\n3. Constructive (The Builder)\n    - How can I do my job effectively and efficiently?\n    - Find ways to make hard work more efficient and sharing it with the community\n4. Restorative (The Restorer)\n    - Can I be okay giving myself time to rest, rethink and reevaluate?\n    - The web oesn&apos;t anturally encourage rest &amp; restoration...\n    - &quot;Write when inspired, rest when tired.&quot; - Zeldman\n</code></pre><p>Let’s talk about balance</p>\n<pre><code>- Know thyself\n</code></pre><p>Seasonal</p>\n<pre><code>Philosophical =&gt; Adventurous =&gt; Constructive =&gt; Restorative\n</code></pre><p>First Wave</p>\n<pre><code>Chapter 1 - The web should be an expressive medium!\nChapter 2 - If I can do it in Photoshop, I will do it with HTML &amp; CSS!\nChapter 3 - Let&apos;s build these these exciting things for clients too\nChapter 4 - Today I found three browser bugs and three new gray hairs\n</code></pre><p>Second Wave</p>\n<pre><code>Web Fonts...\n</code></pre><h2 id=\"Conference-Thoughts\"><a href=\"#Conference-Thoughts\" class=\"headerlink\" title=\"Conference Thoughts\"></a>Conference Thoughts</h2><p>Revolutionize my portfolio layout</p>\n<p>I like the labs prefix to domain to show off fun stuff</p>\n<p>Lots of exciting things to try. This was super invigorating and inspiring.</p>\n<p>Definitely get the blog running as soon as I can.</p>\n<p>Love the use of GIFs to show progression and not make people confused</p>\n<p>Prepare for Grid Frameworks because the advantage is not incremental, it’s game-changing.</p>\n<p>Resumes: Ramsey Principle: A restaurant should have no more than 5 specialties on their menu.</p>\n<p><em>CodePen Meetup Idea</em>: Panel to talk about bridging conversation between design and dev.</p>\n<p>I like how Adam uses a right rail to track what section / bullet he’s going into detail about</p>\n<p>Check out Gregor’s art in CSS - <a href=\"http://slides.com/gregoradams/impressive-art-in-css#/\">http://slides.com/gregoradams/impressive-art-in-css#/</a></p>\n<p>It seems like a lot of conference topics take contrarian views that sometimes serve a bit like click bait for people to go to.</p>\n<p>You don’t choose a specialization. you just keep building things and it’ll find you.</p>\n<p>Remake this with Sass animation <a href=\"http://bl.ocks.org/mbostock/1123639\">http://bl.ocks.org/mbostock/1123639</a></p>\n<p>Inspired for Gregor’s talk:  Creating optimcal illusions with CSS</p>\n"},{"title":"embrace-your-individual-brand-of-work","_content":"\nNo matter how hard you look. Everyone has a slightly different way of doing things. And odds are, you will never find a working environment where anyone has the exact same philosopophy as you when it comes to doing things.\n\nYet, while this may seem to be extremely frustrating, it's actually great because it opens you up to new ideas which you can absorb into your own style and better improve your work. Don't focus on trying to \"fix\" everyone else.\n","source":"_drafts/embrace-your-individual-brand-of-work.md","raw":"---\ntitle: embrace-your-individual-brand-of-work\ntags:\n---\n\nNo matter how hard you look. Everyone has a slightly different way of doing things. And odds are, you will never find a working environment where anyone has the exact same philosopophy as you when it comes to doing things.\n\nYet, while this may seem to be extremely frustrating, it's actually great because it opens you up to new ideas which you can absorb into your own style and better improve your work. Don't focus on trying to \"fix\" everyone else.\n","slug":"embrace-your-individual-brand-of-work","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy43u000gnwxvxait8l70","content":"<p>No matter how hard you look. Everyone has a slightly different way of doing things. And odds are, you will never find a working environment where anyone has the exact same philosopophy as you when it comes to doing things.</p>\n<p>Yet, while this may seem to be extremely frustrating, it’s actually great because it opens you up to new ideas which you can absorb into your own style and better improve your work. Don’t focus on trying to “fix” everyone else.</p>\n","excerpt":"","more":"<p>No matter how hard you look. Everyone has a slightly different way of doing things. And odds are, you will never find a working environment where anyone has the exact same philosopophy as you when it comes to doing things.</p>\n<p>Yet, while this may seem to be extremely frustrating, it’s actually great because it opens you up to new ideas which you can absorb into your own style and better improve your work. Don’t focus on trying to “fix” everyone else.</p>\n"},{"title":"imperative-vs-declarative","_content":"\nApparently I write a lot of my code in imperative. Whoops.\n\nUp until now, the most common explanation for understanding imperative vs declarative coding is that imperative is telling the computer how to do it while declarative tells the computive what to do it. And while how and what are clearly two different words, at the beginning, there's this slight cognitive dissonance because you think, \"Wait... isn't writing code telling the computer what to do it and how to do it at the same time?\"\n\nThat's the initial thought I had as well. However, while the difference between the two may seem nuanced, the method of thinking is quite different. Let's take this simple example:\n\nProblem: Take an array of n numbers and return the total\n\nThe simplest and perhaps most popular method of solving this problem would be the following:\n\nlet numbers = [1, 2, 3, 4, 5],\n\ttotal = 0\n\nfor (let i = 0; i < numbers.length; i++) {\n\ttotal += numbers[i]\n}\n\nreturn total\n\nWhile there is nothing wrong with this solution, this is an example of imperative programming. The reason for this is because you are explicitly telling the computer **how** it should obtain the total. In other words:\n\n1. Create a variable to track the total\n2. Use a for loop to iterate through the array\n3. Add it to the total variable so you can return it later\n\nAgain, there's nothing wrong with the code. It works perfectly fine and everything would run smoothly when you deploy it. However, there are a couple things lacking with the approach:\n\n* It locks you into a single mechanism for summing up total.\n* The function for getting the total is isolated and would make refactoring difficult in the future if a more performant method came about.\n\nLet's look at the declarative way of doing this:\n\nlet numbers = [1, 2, 3, 4, 5]\n\nnumbers.reduce\n\n** Notes: Use an object and not the number method since it relies on previous knowledge of the reduce functionality which new users could get hung up on\n\n","source":"_drafts/imperative-vs-declarative.md","raw":"---\ntitle: imperative-vs-declarative\ntags:\n---\n\nApparently I write a lot of my code in imperative. Whoops.\n\nUp until now, the most common explanation for understanding imperative vs declarative coding is that imperative is telling the computer how to do it while declarative tells the computive what to do it. And while how and what are clearly two different words, at the beginning, there's this slight cognitive dissonance because you think, \"Wait... isn't writing code telling the computer what to do it and how to do it at the same time?\"\n\nThat's the initial thought I had as well. However, while the difference between the two may seem nuanced, the method of thinking is quite different. Let's take this simple example:\n\nProblem: Take an array of n numbers and return the total\n\nThe simplest and perhaps most popular method of solving this problem would be the following:\n\nlet numbers = [1, 2, 3, 4, 5],\n\ttotal = 0\n\nfor (let i = 0; i < numbers.length; i++) {\n\ttotal += numbers[i]\n}\n\nreturn total\n\nWhile there is nothing wrong with this solution, this is an example of imperative programming. The reason for this is because you are explicitly telling the computer **how** it should obtain the total. In other words:\n\n1. Create a variable to track the total\n2. Use a for loop to iterate through the array\n3. Add it to the total variable so you can return it later\n\nAgain, there's nothing wrong with the code. It works perfectly fine and everything would run smoothly when you deploy it. However, there are a couple things lacking with the approach:\n\n* It locks you into a single mechanism for summing up total.\n* The function for getting the total is isolated and would make refactoring difficult in the future if a more performant method came about.\n\nLet's look at the declarative way of doing this:\n\nlet numbers = [1, 2, 3, 4, 5]\n\nnumbers.reduce\n\n** Notes: Use an object and not the number method since it relies on previous knowledge of the reduce functionality which new users could get hung up on\n\n","slug":"imperative-vs-declarative","published":0,"date":"2017-04-08T15:33:35.000Z","updated":"2017-04-08T15:57:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy43w000inwxv0pi9k7w2","content":"<p>Apparently I write a lot of my code in imperative. Whoops.</p>\n<p>Up until now, the most common explanation for understanding imperative vs declarative coding is that imperative is telling the computer how to do it while declarative tells the computive what to do it. And while how and what are clearly two different words, at the beginning, there’s this slight cognitive dissonance because you think, “Wait… isn’t writing code telling the computer what to do it and how to do it at the same time?”</p>\n<p>That’s the initial thought I had as well. However, while the difference between the two may seem nuanced, the method of thinking is quite different. Let’s take this simple example:</p>\n<p>Problem: Take an array of n numbers and return the total</p>\n<p>The simplest and perhaps most popular method of solving this problem would be the following:</p>\n<p>let numbers = [1, 2, 3, 4, 5],<br>    total = 0</p>\n<p>for (let i = 0; i &lt; numbers.length; i++) {<br>    total += numbers[i]<br>}</p>\n<p>return total</p>\n<p>While there is nothing wrong with this solution, this is an example of imperative programming. The reason for this is because you are explicitly telling the computer <strong>how</strong> it should obtain the total. In other words:</p>\n<ol>\n<li>Create a variable to track the total</li>\n<li>Use a for loop to iterate through the array</li>\n<li>Add it to the total variable so you can return it later</li>\n</ol>\n<p>Again, there’s nothing wrong with the code. It works perfectly fine and everything would run smoothly when you deploy it. However, there are a couple things lacking with the approach:</p>\n<ul>\n<li>It locks you into a single mechanism for summing up total.</li>\n<li>The function for getting the total is isolated and would make refactoring difficult in the future if a more performant method came about.</li>\n</ul>\n<p>Let’s look at the declarative way of doing this:</p>\n<p>let numbers = [1, 2, 3, 4, 5]</p>\n<p>numbers.reduce</p>\n<p>** Notes: Use an object and not the number method since it relies on previous knowledge of the reduce functionality which new users could get hung up on</p>\n","excerpt":"","more":"<p>Apparently I write a lot of my code in imperative. Whoops.</p>\n<p>Up until now, the most common explanation for understanding imperative vs declarative coding is that imperative is telling the computer how to do it while declarative tells the computive what to do it. And while how and what are clearly two different words, at the beginning, there’s this slight cognitive dissonance because you think, “Wait… isn’t writing code telling the computer what to do it and how to do it at the same time?”</p>\n<p>That’s the initial thought I had as well. However, while the difference between the two may seem nuanced, the method of thinking is quite different. Let’s take this simple example:</p>\n<p>Problem: Take an array of n numbers and return the total</p>\n<p>The simplest and perhaps most popular method of solving this problem would be the following:</p>\n<p>let numbers = [1, 2, 3, 4, 5],<br>    total = 0</p>\n<p>for (let i = 0; i &lt; numbers.length; i++) {<br>    total += numbers[i]<br>}</p>\n<p>return total</p>\n<p>While there is nothing wrong with this solution, this is an example of imperative programming. The reason for this is because you are explicitly telling the computer <strong>how</strong> it should obtain the total. In other words:</p>\n<ol>\n<li>Create a variable to track the total</li>\n<li>Use a for loop to iterate through the array</li>\n<li>Add it to the total variable so you can return it later</li>\n</ol>\n<p>Again, there’s nothing wrong with the code. It works perfectly fine and everything would run smoothly when you deploy it. However, there are a couple things lacking with the approach:</p>\n<ul>\n<li>It locks you into a single mechanism for summing up total.</li>\n<li>The function for getting the total is isolated and would make refactoring difficult in the future if a more performant method came about.</li>\n</ul>\n<p>Let’s look at the declarative way of doing this:</p>\n<p>let numbers = [1, 2, 3, 4, 5]</p>\n<p>numbers.reduce</p>\n<p>** Notes: Use an object and not the number method since it relies on previous knowledge of the reduce functionality which new users could get hung up on</p>\n"},{"title":"learning-functional-programming-with-professor-risby","_content":"\n## General Impressions\n\nI'm familiar with principles such as DRY, YAGNI, and single responsibility; but what's interesting is that Professor Risby states that \"they're merely tangential to our ultiamte goal.\" Talk about hooking me in. Interested to see where it goes from here!\n\n> A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect.\n\nGreat analogy of the difference between slice and splice.\n\n> An effect is \"anything that occurs in our computation other than the calculation of a result.\"\n\nSuch an elegant and simple definition...\n\n> A side effect is a change of system state or _observable interaction_ with the outside world that occurs during the calculation of a result.\n\nThe thing to remember that it's not like side effects are forbidden. Instead, \"we want to contain them and run them in a controlled way.\"\n\n## Thoughts to Marinate\n\n> A function is a special relationship between values: Each of its input values gives back exactly one output value.\n\nThis is interesting. I'm so used to have functions do a variety of things that this is somewhat counter-intuitive for me.\n\n\"Pure functions _are_ mathematical functions and they're what functional programming is all about.\"\n\nFood for thought...\n\n\n\n## Favorite Quotes\n\n\"It's like donning your heaviest parka in the dead of July to blast the air and demand an ice lolly.\"\n\n\"By using specific naming, we've seemingly tied ourselves to specific data. This happens quite a bit and is a source of much reinvention.\"\n\n\"... we're striving for reliable functions that return the same result every time, not functions that leave a mess in their wake...\"\n\n\"Reliance on state is one of the largest conributors to system complexity.\"\n\n## Things I Learned Indirectly\n\n\"Memoization is an optimization technique used to primarily speed up programs by storing results of expensive function calls and returning the cached result when the same inputs occur again.\"\n","source":"_drafts/learning-functional-programming-with-professor-risby.md","raw":"---\ntitle: learning-functional-programming-with-professor-risby\ntags:\n---\n\n## General Impressions\n\nI'm familiar with principles such as DRY, YAGNI, and single responsibility; but what's interesting is that Professor Risby states that \"they're merely tangential to our ultiamte goal.\" Talk about hooking me in. Interested to see where it goes from here!\n\n> A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect.\n\nGreat analogy of the difference between slice and splice.\n\n> An effect is \"anything that occurs in our computation other than the calculation of a result.\"\n\nSuch an elegant and simple definition...\n\n> A side effect is a change of system state or _observable interaction_ with the outside world that occurs during the calculation of a result.\n\nThe thing to remember that it's not like side effects are forbidden. Instead, \"we want to contain them and run them in a controlled way.\"\n\n## Thoughts to Marinate\n\n> A function is a special relationship between values: Each of its input values gives back exactly one output value.\n\nThis is interesting. I'm so used to have functions do a variety of things that this is somewhat counter-intuitive for me.\n\n\"Pure functions _are_ mathematical functions and they're what functional programming is all about.\"\n\nFood for thought...\n\n\n\n## Favorite Quotes\n\n\"It's like donning your heaviest parka in the dead of July to blast the air and demand an ice lolly.\"\n\n\"By using specific naming, we've seemingly tied ourselves to specific data. This happens quite a bit and is a source of much reinvention.\"\n\n\"... we're striving for reliable functions that return the same result every time, not functions that leave a mess in their wake...\"\n\n\"Reliance on state is one of the largest conributors to system complexity.\"\n\n## Things I Learned Indirectly\n\n\"Memoization is an optimization technique used to primarily speed up programs by storing results of expensive function calls and returning the cached result when the same inputs occur again.\"\n","slug":"learning-functional-programming-with-professor-risby","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy441000jnwxvpwcu3au7","content":"<h2 id=\"General-Impressions\"><a href=\"#General-Impressions\" class=\"headerlink\" title=\"General Impressions\"></a>General Impressions</h2><p>I’m familiar with principles such as DRY, YAGNI, and single responsibility; but what’s interesting is that Professor Risby states that “they’re merely tangential to our ultiamte goal.” Talk about hooking me in. Interested to see where it goes from here!</p>\n<blockquote>\n<p>A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect.</p>\n</blockquote>\n<p>Great analogy of the difference between slice and splice.</p>\n<blockquote>\n<p>An effect is “anything that occurs in our computation other than the calculation of a result.”</p>\n</blockquote>\n<p>Such an elegant and simple definition…</p>\n<blockquote>\n<p>A side effect is a change of system state or <em>observable interaction</em> with the outside world that occurs during the calculation of a result.</p>\n</blockquote>\n<p>The thing to remember that it’s not like side effects are forbidden. Instead, “we want to contain them and run them in a controlled way.”</p>\n<h2 id=\"Thoughts-to-Marinate\"><a href=\"#Thoughts-to-Marinate\" class=\"headerlink\" title=\"Thoughts to Marinate\"></a>Thoughts to Marinate</h2><blockquote>\n<p>A function is a special relationship between values: Each of its input values gives back exactly one output value.</p>\n</blockquote>\n<p>This is interesting. I’m so used to have functions do a variety of things that this is somewhat counter-intuitive for me.</p>\n<p>“Pure functions <em>are</em> mathematical functions and they’re what functional programming is all about.”</p>\n<p>Food for thought…</p>\n<h2 id=\"Favorite-Quotes\"><a href=\"#Favorite-Quotes\" class=\"headerlink\" title=\"Favorite Quotes\"></a>Favorite Quotes</h2><p>“It’s like donning your heaviest parka in the dead of July to blast the air and demand an ice lolly.”</p>\n<p>“By using specific naming, we’ve seemingly tied ourselves to specific data. This happens quite a bit and is a source of much reinvention.”</p>\n<p>“… we’re striving for reliable functions that return the same result every time, not functions that leave a mess in their wake…”</p>\n<p>“Reliance on state is one of the largest conributors to system complexity.”</p>\n<h2 id=\"Things-I-Learned-Indirectly\"><a href=\"#Things-I-Learned-Indirectly\" class=\"headerlink\" title=\"Things I Learned Indirectly\"></a>Things I Learned Indirectly</h2><p>“Memoization is an optimization technique used to primarily speed up programs by storing results of expensive function calls and returning the cached result when the same inputs occur again.”</p>\n","excerpt":"","more":"<h2 id=\"General-Impressions\"><a href=\"#General-Impressions\" class=\"headerlink\" title=\"General Impressions\"></a>General Impressions</h2><p>I’m familiar with principles such as DRY, YAGNI, and single responsibility; but what’s interesting is that Professor Risby states that “they’re merely tangential to our ultiamte goal.” Talk about hooking me in. Interested to see where it goes from here!</p>\n<blockquote>\n<p>A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect.</p>\n</blockquote>\n<p>Great analogy of the difference between slice and splice.</p>\n<blockquote>\n<p>An effect is “anything that occurs in our computation other than the calculation of a result.”</p>\n</blockquote>\n<p>Such an elegant and simple definition…</p>\n<blockquote>\n<p>A side effect is a change of system state or <em>observable interaction</em> with the outside world that occurs during the calculation of a result.</p>\n</blockquote>\n<p>The thing to remember that it’s not like side effects are forbidden. Instead, “we want to contain them and run them in a controlled way.”</p>\n<h2 id=\"Thoughts-to-Marinate\"><a href=\"#Thoughts-to-Marinate\" class=\"headerlink\" title=\"Thoughts to Marinate\"></a>Thoughts to Marinate</h2><blockquote>\n<p>A function is a special relationship between values: Each of its input values gives back exactly one output value.</p>\n</blockquote>\n<p>This is interesting. I’m so used to have functions do a variety of things that this is somewhat counter-intuitive for me.</p>\n<p>“Pure functions <em>are</em> mathematical functions and they’re what functional programming is all about.”</p>\n<p>Food for thought…</p>\n<h2 id=\"Favorite-Quotes\"><a href=\"#Favorite-Quotes\" class=\"headerlink\" title=\"Favorite Quotes\"></a>Favorite Quotes</h2><p>“It’s like donning your heaviest parka in the dead of July to blast the air and demand an ice lolly.”</p>\n<p>“By using specific naming, we’ve seemingly tied ourselves to specific data. This happens quite a bit and is a source of much reinvention.”</p>\n<p>“… we’re striving for reliable functions that return the same result every time, not functions that leave a mess in their wake…”</p>\n<p>“Reliance on state is one of the largest conributors to system complexity.”</p>\n<h2 id=\"Things-I-Learned-Indirectly\"><a href=\"#Things-I-Learned-Indirectly\" class=\"headerlink\" title=\"Things I Learned Indirectly\"></a>Things I Learned Indirectly</h2><p>“Memoization is an optimization technique used to primarily speed up programs by storing results of expensive function calls and returning the cached result when the same inputs occur again.”</p>\n"},{"title":"learning-redux-with-dan","_content":"\nThree core principles of Redux:\n\n1. There is a single source of truth.\n\nIn other words, the state of the entire application is stored within a single tree.\n\n2. State is read-only\n\nIn other words, the state can never be overwritten. Instead, actions are the only way to emit a new state which appears \"changed\" but is actually separate from the previous state.\n\n3. Changes are only made with pure functions\n\nSimilar to core principle #2, you never ever mutate the previous state. Instead, you take a state and an action in order to return a new state.\n\nRedux variables have the following main methods\n\t- getState\n\t- displach\n\t- subscribe = register a callback when a dispatch occurs","source":"_drafts/learning-redux-with-dan.md","raw":"---\ntitle: learning-redux-with-dan\ntags:\n---\n\nThree core principles of Redux:\n\n1. There is a single source of truth.\n\nIn other words, the state of the entire application is stored within a single tree.\n\n2. State is read-only\n\nIn other words, the state can never be overwritten. Instead, actions are the only way to emit a new state which appears \"changed\" but is actually separate from the previous state.\n\n3. Changes are only made with pure functions\n\nSimilar to core principle #2, you never ever mutate the previous state. Instead, you take a state and an action in order to return a new state.\n\nRedux variables have the following main methods\n\t- getState\n\t- displach\n\t- subscribe = register a callback when a dispatch occurs","slug":"learning-redux-with-dan","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy442000knwxvdqw5u7ws","content":"<p>Three core principles of Redux:</p>\n<ol>\n<li>There is a single source of truth.</li>\n</ol>\n<p>In other words, the state of the entire application is stored within a single tree.</p>\n<ol>\n<li>State is read-only</li>\n</ol>\n<p>In other words, the state can never be overwritten. Instead, actions are the only way to emit a new state which appears “changed” but is actually separate from the previous state.</p>\n<ol>\n<li>Changes are only made with pure functions</li>\n</ol>\n<p>Similar to core principle #2, you never ever mutate the previous state. Instead, you take a state and an action in order to return a new state.</p>\n<p>Redux variables have the following main methods</p>\n<pre><code>- getState\n- displach\n- subscribe = register a callback when a dispatch occurs\n</code></pre>","excerpt":"","more":"<p>Three core principles of Redux:</p>\n<ol>\n<li>There is a single source of truth.</li>\n</ol>\n<p>In other words, the state of the entire application is stored within a single tree.</p>\n<ol>\n<li>State is read-only</li>\n</ol>\n<p>In other words, the state can never be overwritten. Instead, actions are the only way to emit a new state which appears “changed” but is actually separate from the previous state.</p>\n<ol>\n<li>Changes are only made with pure functions</li>\n</ol>\n<p>Similar to core principle #2, you never ever mutate the previous state. Instead, you take a state and an action in order to return a new state.</p>\n<p>Redux variables have the following main methods</p>\n<pre><code>- getState\n- displach\n- subscribe = register a callback when a dispatch occurs\n</code></pre>"},{"title":"my-first-skill-with-alexa-sdk","_content":"\n\n","source":"_drafts/my-first-skill-with-alexa-sdk.md","raw":"---\ntitle: my-first-skill-with-alexa-sdk\ntags:\n\t- AmazonAlexa\n\t- SDK\n---\n\n\n","slug":"my-first-skill-with-alexa-sdk","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy445000mnwxvo9293ke5","content":"","excerpt":"","more":""},{"title":"managing-time","_content":"\nhttp://aelikes.com/c/s/ssz/6cPnr/s/64x/5mn/6LijtF/sHKQobtmS0/P\n\nBuffet and Gates\n\nCalendar is empty","source":"_drafts/managing-time.md","raw":"---\ntitle: managing-time\ntags:\n---\n\nhttp://aelikes.com/c/s/ssz/6cPnr/s/64x/5mn/6LijtF/sHKQobtmS0/P\n\nBuffet and Gates\n\nCalendar is empty","slug":"managing-time","published":0,"date":"2017-03-01T19:06:45.000Z","updated":"2017-03-01T19:07:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy449000nnwxvh3e4hfdn","content":"<p><a href=\"http://aelikes.com/c/s/ssz/6cPnr/s/64x/5mn/6LijtF/sHKQobtmS0/P\" target=\"_blank\" rel=\"external\">http://aelikes.com/c/s/ssz/6cPnr/s/64x/5mn/6LijtF/sHKQobtmS0/P</a></p>\n<p>Buffet and Gates</p>\n<p>Calendar is empty</p>\n","excerpt":"","more":"<p><a href=\"http://aelikes.com/c/s/ssz/6cPnr/s/64x/5mn/6LijtF/sHKQobtmS0/P\">http://aelikes.com/c/s/ssz/6cPnr/s/64x/5mn/6LijtF/sHKQobtmS0/P</a></p>\n<p>Buffet and Gates</p>\n<p>Calendar is empty</p>\n"},{"title":"migrating-from-wordpress-to-hexo","_content":"","source":"_drafts/migrating-from-wordpress-to-hexo.md","raw":"---\ntitle: migrating-from-wordpress-to-hexo\ntags:\n---\n","slug":"migrating-from-wordpress-to-hexo","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy44d000pnwxv83t3lsa8","content":"","excerpt":"","more":""},{"title":"my-experience-with-rss","_content":"\nFeedly. It has the URL feed in the top.\n","source":"_drafts/my-experience-with-rss.md","raw":"---\ntitle: my-experience-with-rss\ntags:\n---\n\nFeedly. It has the URL feed in the top.\n","slug":"my-experience-with-rss","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy44g000rnwxvmra55g4p","content":"<p>Feedly. It has the URL feed in the top.</p>\n","excerpt":"","more":"<p>Feedly. It has the URL feed in the top.</p>\n"},{"title":"why-burnout-is-so-common","_content":"\nAs most of us know, the majority of people who get into the tech industry (which I'll speak more specifically to design and front-end development) get involved because it's what we love. So separating work from fun becomes an almost impossible line to distinguish a lot of the times.","source":"_drafts/why-burnout-is-so-common.md","raw":"---\ntitle: why-burnout-is-so-common\ntags:\n---\n\nAs most of us know, the majority of people who get into the tech industry (which I'll speak more specifically to design and front-end development) get involved because it's what we love. So separating work from fun becomes an almost impossible line to distinguish a lot of the times.","slug":"why-burnout-is-so-common","published":0,"date":"2017-05-03T17:17:33.000Z","updated":"2017-05-03T17:18:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy44j000tnwxv0amyme3o","content":"<p>As most of us know, the majority of people who get into the tech industry (which I’ll speak more specifically to design and front-end development) get involved because it’s what we love. So separating work from fun becomes an almost impossible line to distinguish a lot of the times.</p>\n","excerpt":"","more":"<p>As most of us know, the majority of people who get into the tech industry (which I’ll speak more specifically to design and front-end development) get involved because it’s what we love. So separating work from fun becomes an almost impossible line to distinguish a lot of the times.</p>\n"},{"title":"pressure-is-privilege","_content":"\nThis is not to encourage burnout in any way.\n\nMy dad mentioned what people in Vietnam would do if they were given the opportunity to be in his shoes.\n","source":"_drafts/pressure-is-privilege.md","raw":"---\ntitle: pressure-is-privilege\ntags:\n---\n\nThis is not to encourage burnout in any way.\n\nMy dad mentioned what people in Vietnam would do if they were given the opportunity to be in his shoes.\n","slug":"pressure-is-privilege","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy44o000vnwxvf4uv530o","content":"<p>This is not to encourage burnout in any way.</p>\n<p>My dad mentioned what people in Vietnam would do if they were given the opportunity to be in his shoes.</p>\n","excerpt":"","more":"<p>This is not to encourage burnout in any way.</p>\n<p>My dad mentioned what people in Vietnam would do if they were given the opportunity to be in his shoes.</p>\n"},{"title":"throwaway-css","_content":"","source":"_drafts/throwaway-css.md","raw":"---\ntitle: throwaway-css\ntags:\n---\n","slug":"throwaway-css","published":0,"date":"2017-02-28T05:07:22.000Z","updated":"2017-02-28T05:07:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy44q000wnwxvpggx3vu0","content":"","excerpt":"","more":""},{"title":"A Change in Scenery","date":"2017-05-04T16:23:37.000Z","_content":"\nOver these past couple of months, I have had the opportunity to work on some fun and challenging projects. And while it's been a phenomenal learning experience, it has been a bit of a whirlwind and I'm a little burnt out. So in an effort to try and get my head on straight again, I decided to get out of town for a bit.\n\n<!-- more -->\n\nThey say when you are starting to feel yourself get in a rut or starting to burnout, it's usually a good idea to get a change of scenery. And what better way to get a change of scenery than to travel? So that's what I did. As I am writing this post, I am currently sitting in a cafe while listening to live music in New Orleans.\n\nInterestingly enough, while I came to New Orleans to get away from the busy tech scene, [Collision Conference 2017](https://collisionconf.com/) happens to be going on this week. And like anyone who suffers from FOMO, I felt an urge to start carrying my laptop and try to learn the next great thing. Except, let's not forget, the purpose of this trip was to recharge.\n\nAbout midway through my trip, I was still feeling pretty burntout and was starting to worry that I was way more burnt out thatn I realized. Even though I didn't end up doing much work, it turned out that the very nature of carrying my laptop with me wherever I went was preventing me from recovering. It seems like such a small thing, but the moment I left it at the hotel, the trip took a turn for the better and I started feeling a lot better.\n\nWith that said, New Orleans has been a blast and I would recommend it for anyone looking to recharge their creative batteries. And oh, don't forget to get beignets!\n","source":"_posts/change-in-scenery.md","raw":"---\ntitle: A Change in Scenery\ndate: 2017-05-04 12:23:37\ncategories: Journal\ntags:\n\t- travel\n---\n\nOver these past couple of months, I have had the opportunity to work on some fun and challenging projects. And while it's been a phenomenal learning experience, it has been a bit of a whirlwind and I'm a little burnt out. So in an effort to try and get my head on straight again, I decided to get out of town for a bit.\n\n<!-- more -->\n\nThey say when you are starting to feel yourself get in a rut or starting to burnout, it's usually a good idea to get a change of scenery. And what better way to get a change of scenery than to travel? So that's what I did. As I am writing this post, I am currently sitting in a cafe while listening to live music in New Orleans.\n\nInterestingly enough, while I came to New Orleans to get away from the busy tech scene, [Collision Conference 2017](https://collisionconf.com/) happens to be going on this week. And like anyone who suffers from FOMO, I felt an urge to start carrying my laptop and try to learn the next great thing. Except, let's not forget, the purpose of this trip was to recharge.\n\nAbout midway through my trip, I was still feeling pretty burntout and was starting to worry that I was way more burnt out thatn I realized. Even though I didn't end up doing much work, it turned out that the very nature of carrying my laptop with me wherever I went was preventing me from recovering. It seems like such a small thing, but the moment I left it at the hotel, the trip took a turn for the better and I started feeling a lot better.\n\nWith that said, New Orleans has been a blast and I would recommend it for anyone looking to recharge their creative batteries. And oh, don't forget to get beignets!\n","slug":"change-in-scenery","published":1,"updated":"2017-05-06T17:15:54.000Z","_id":"cj2ddy44t000xnwxvby50vfmq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Over these past couple of months, I have had the opportunity to work on some fun and challenging projects. And while it’s been a phenomenal learning experience, it has been a bit of a whirlwind and I’m a little burnt out. So in an effort to try and get my head on straight again, I decided to get out of town for a bit.</p>\n<a id=\"more\"></a>\n<p>They say when you are starting to feel yourself get in a rut or starting to burnout, it’s usually a good idea to get a change of scenery. And what better way to get a change of scenery than to travel? So that’s what I did. As I am writing this post, I am currently sitting in a cafe while listening to live music in New Orleans.</p>\n<p>Interestingly enough, while I came to New Orleans to get away from the busy tech scene, <a href=\"https://collisionconf.com/\" target=\"_blank\" rel=\"external\">Collision Conference 2017</a> happens to be going on this week. And like anyone who suffers from FOMO, I felt an urge to start carrying my laptop and try to learn the next great thing. Except, let’s not forget, the purpose of this trip was to recharge.</p>\n<p>About midway through my trip, I was still feeling pretty burntout and was starting to worry that I was way more burnt out thatn I realized. Even though I didn’t end up doing much work, it turned out that the very nature of carrying my laptop with me wherever I went was preventing me from recovering. It seems like such a small thing, but the moment I left it at the hotel, the trip took a turn for the better and I started feeling a lot better.</p>\n<p>With that said, New Orleans has been a blast and I would recommend it for anyone looking to recharge their creative batteries. And oh, don’t forget to get beignets!</p>\n","excerpt":"<p>Over these past couple of months, I have had the opportunity to work on some fun and challenging projects. And while it’s been a phenomenal learning experience, it has been a bit of a whirlwind and I’m a little burnt out. So in an effort to try and get my head on straight again, I decided to get out of town for a bit.</p>","more":"<p>They say when you are starting to feel yourself get in a rut or starting to burnout, it’s usually a good idea to get a change of scenery. And what better way to get a change of scenery than to travel? So that’s what I did. As I am writing this post, I am currently sitting in a cafe while listening to live music in New Orleans.</p>\n<p>Interestingly enough, while I came to New Orleans to get away from the busy tech scene, <a href=\"https://collisionconf.com/\">Collision Conference 2017</a> happens to be going on this week. And like anyone who suffers from FOMO, I felt an urge to start carrying my laptop and try to learn the next great thing. Except, let’s not forget, the purpose of this trip was to recharge.</p>\n<p>About midway through my trip, I was still feeling pretty burntout and was starting to worry that I was way more burnt out thatn I realized. Even though I didn’t end up doing much work, it turned out that the very nature of carrying my laptop with me wherever I went was preventing me from recovering. It seems like such a small thing, but the moment I left it at the hotel, the trip took a turn for the better and I started feeling a lot better.</p>\n<p>With that said, New Orleans has been a blast and I would recommend it for anyone looking to recharge their creative batteries. And oh, don’t forget to get beignets!</p>"},{"title":"ultimateangularjs","_content":"\nAngularJS apps typically consists of:\n\n* Modules - chunks of codes that contain routes, views, components, services. A block of code that you can pull out of your application and drop into another one.\n\n* Routing + Views - controls navigation for the user; creates the Controllers and Views\n\n* Controllers - responsible for View logica nd exposing properties for View binding\n\n* Components - declares new templates, bind and display Controller properties\n\n* Directives - bind to existing templates/HTML and add new behavior\n\n* Services - contains business logic, non-view specific, such as API requests\n\nAngular 1.5 introduced components as opposed to only having directives.\n\nSo the basic trees would be:\n\n1. Root module - top level module, pulls in comon and component sub-modules\n2. Component - standalone features built with component architecture\n3. Common module - application specifi module or global common functionality\n\nOne-way data flow introduced in Angular 1.5.\n\nProperty binding\n\t- bind to custom HTML props\n\t- pass data down via one-way data-binding\n\t- stateful and stateless components\n\nEvent binding\n\t- delegate parent methods through custom HTML props\n\t- clone parent data, treating it as immutable\n\t- pass mutated clone back up through events\n","source":"_drafts/ultimateangularjs.md","raw":"---\ntitle: ultimateangularjs\ntags:\n---\n\nAngularJS apps typically consists of:\n\n* Modules - chunks of codes that contain routes, views, components, services. A block of code that you can pull out of your application and drop into another one.\n\n* Routing + Views - controls navigation for the user; creates the Controllers and Views\n\n* Controllers - responsible for View logica nd exposing properties for View binding\n\n* Components - declares new templates, bind and display Controller properties\n\n* Directives - bind to existing templates/HTML and add new behavior\n\n* Services - contains business logic, non-view specific, such as API requests\n\nAngular 1.5 introduced components as opposed to only having directives.\n\nSo the basic trees would be:\n\n1. Root module - top level module, pulls in comon and component sub-modules\n2. Component - standalone features built with component architecture\n3. Common module - application specifi module or global common functionality\n\nOne-way data flow introduced in Angular 1.5.\n\nProperty binding\n\t- bind to custom HTML props\n\t- pass data down via one-way data-binding\n\t- stateful and stateless components\n\nEvent binding\n\t- delegate parent methods through custom HTML props\n\t- clone parent data, treating it as immutable\n\t- pass mutated clone back up through events\n","slug":"ultimateangularjs","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy44v000znwxvkix2vzwe","content":"<p>AngularJS apps typically consists of:</p>\n<ul>\n<li><p>Modules - chunks of codes that contain routes, views, components, services. A block of code that you can pull out of your application and drop into another one.</p>\n</li>\n<li><p>Routing + Views - controls navigation for the user; creates the Controllers and Views</p>\n</li>\n<li><p>Controllers - responsible for View logica nd exposing properties for View binding</p>\n</li>\n<li><p>Components - declares new templates, bind and display Controller properties</p>\n</li>\n<li><p>Directives - bind to existing templates/HTML and add new behavior</p>\n</li>\n<li><p>Services - contains business logic, non-view specific, such as API requests</p>\n</li>\n</ul>\n<p>Angular 1.5 introduced components as opposed to only having directives.</p>\n<p>So the basic trees would be:</p>\n<ol>\n<li>Root module - top level module, pulls in comon and component sub-modules</li>\n<li>Component - standalone features built with component architecture</li>\n<li>Common module - application specifi module or global common functionality</li>\n</ol>\n<p>One-way data flow introduced in Angular 1.5.</p>\n<p>Property binding</p>\n<pre><code>- bind to custom HTML props\n- pass data down via one-way data-binding\n- stateful and stateless components\n</code></pre><p>Event binding</p>\n<pre><code>- delegate parent methods through custom HTML props\n- clone parent data, treating it as immutable\n- pass mutated clone back up through events\n</code></pre>","excerpt":"","more":"<p>AngularJS apps typically consists of:</p>\n<ul>\n<li><p>Modules - chunks of codes that contain routes, views, components, services. A block of code that you can pull out of your application and drop into another one.</p>\n</li>\n<li><p>Routing + Views - controls navigation for the user; creates the Controllers and Views</p>\n</li>\n<li><p>Controllers - responsible for View logica nd exposing properties for View binding</p>\n</li>\n<li><p>Components - declares new templates, bind and display Controller properties</p>\n</li>\n<li><p>Directives - bind to existing templates/HTML and add new behavior</p>\n</li>\n<li><p>Services - contains business logic, non-view specific, such as API requests</p>\n</li>\n</ul>\n<p>Angular 1.5 introduced components as opposed to only having directives.</p>\n<p>So the basic trees would be:</p>\n<ol>\n<li>Root module - top level module, pulls in comon and component sub-modules</li>\n<li>Component - standalone features built with component architecture</li>\n<li>Common module - application specifi module or global common functionality</li>\n</ol>\n<p>One-way data flow introduced in Angular 1.5.</p>\n<p>Property binding</p>\n<pre><code>- bind to custom HTML props\n- pass data down via one-way data-binding\n- stateful and stateless components\n</code></pre><p>Event binding</p>\n<pre><code>- delegate parent methods through custom HTML props\n- clone parent data, treating it as immutable\n- pass mutated clone back up through events\n</code></pre>"},{"title":"why-i-converted-to-tabs","_content":"\nBottom line: It's better for more developers. More flexible. The more compassionate one that does not dictate anything.","source":"_drafts/why-i-converted-to-tabs.md","raw":"---\ntitle: why-i-converted-to-tabs\ntags:\n---\n\nBottom line: It's better for more developers. More flexible. The more compassionate one that does not dictate anything.","slug":"why-i-converted-to-tabs","published":0,"date":"2017-02-25T16:52:42.000Z","updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy44x0013nwxvc55oubxz","content":"<p>Bottom line: It’s better for more developers. More flexible. The more compassionate one that does not dictate anything.</p>\n","excerpt":"","more":"<p>Bottom line: It’s better for more developers. More flexible. The more compassionate one that does not dictate anything.</p>\n"},{"title":"Developers. Don't Get Too Comfortable","date":"2017-03-11T17:28:44.000Z","_content":"\nI had heard about Milton Glaser's [\"Ten Thing I Have Learned\"](https://www.miltonglaser.com/files/Essays-10things-8400.pdf) essay from numerous people, but it wasn't until a recent mention on [@FrontEndHH](https://twitter.com/frontendhh) by [Gordon Zhu](https://twitter.com/gordon_zhu) that I finally decided to check it out. And while the essay as a whole contains great advice, the following section struck of chord with me: \"2. If you have a choice, never have a job.\"\n\n> ‘Never have a job, because if you have a job someday someone will take it away from you and then you will be unprepared for your old age. For me, it has always been the same every since the age of 12. I wake up in the morning and I try to figure out how am I going to put bread on the table today? It is the same at 75, I wake up every morning and I think how am I going to put bread on the table today? I am exceedingly well prepared for my old age’ [John Cage] said.\n\nWhile the statement could be taken literally, that would cause most people to dismiss it outright and completely misses the critical part of the message: the proper mindset one should take taking on our lives.\" After all, many approach jobs as something that should be more or less a given if one puts the necessary work and preparation to earn one. Sadly enough, even after countless stories of massive layoffs, bubble bursts, stock market crashes, many still continue to hold the same mentality.\n\nAs many developers know, we are currently living in a \"golden-age\" of technology. Developers are high in demand and can command some pretty ridiculous salaries compared to the rest of the jobs out there. Bootcamps are all the rage and everyone wants a piece of the action because that's where the money is. It's tempting to sit perched on our golden thrones enjoying this comfortable lifestyle, it's important that we refrain from doing so at all cost.\n\nEven though I'm a bit skeptical that machines can completely replace developers in the near future, it is a legitimate possibility. And if that should come to pass, will developers at the time ironically call foul for having their jobs automated the way others are doing so now? If they do, the blame will fall on no one else but themselves change is inevitable. If you think that the skills you have now will still allow you to have the same salary ten years from now, I can only hope you are able to escape the fate reality has prepared for you.\n\nJust as many other articles have written about the correct attitude people need to take if they want to be developers, our value as human beings is our ability to learn, grow, and add new value to people's lives in ways not thought of or possible beforehand. What will be required of us five years from now is hard to say; but if you decide to continue pursuing a career in the tech field, I hope you will follow in the advice of John Cage and wake up each morning trying to figure out how you will \"put bread on the table today.\"\n","source":"_posts/developers-dont-get-too-comfortable.md","raw":"---\ntitle: \"Developers. Don't Get Too Comfortable\"\ndate: 2017-03-11 12:28:44\ntags:\n\t- advice\n\t- career\n\t- jobs\n---\n\nI had heard about Milton Glaser's [\"Ten Thing I Have Learned\"](https://www.miltonglaser.com/files/Essays-10things-8400.pdf) essay from numerous people, but it wasn't until a recent mention on [@FrontEndHH](https://twitter.com/frontendhh) by [Gordon Zhu](https://twitter.com/gordon_zhu) that I finally decided to check it out. And while the essay as a whole contains great advice, the following section struck of chord with me: \"2. If you have a choice, never have a job.\"\n\n> ‘Never have a job, because if you have a job someday someone will take it away from you and then you will be unprepared for your old age. For me, it has always been the same every since the age of 12. I wake up in the morning and I try to figure out how am I going to put bread on the table today? It is the same at 75, I wake up every morning and I think how am I going to put bread on the table today? I am exceedingly well prepared for my old age’ [John Cage] said.\n\nWhile the statement could be taken literally, that would cause most people to dismiss it outright and completely misses the critical part of the message: the proper mindset one should take taking on our lives.\" After all, many approach jobs as something that should be more or less a given if one puts the necessary work and preparation to earn one. Sadly enough, even after countless stories of massive layoffs, bubble bursts, stock market crashes, many still continue to hold the same mentality.\n\nAs many developers know, we are currently living in a \"golden-age\" of technology. Developers are high in demand and can command some pretty ridiculous salaries compared to the rest of the jobs out there. Bootcamps are all the rage and everyone wants a piece of the action because that's where the money is. It's tempting to sit perched on our golden thrones enjoying this comfortable lifestyle, it's important that we refrain from doing so at all cost.\n\nEven though I'm a bit skeptical that machines can completely replace developers in the near future, it is a legitimate possibility. And if that should come to pass, will developers at the time ironically call foul for having their jobs automated the way others are doing so now? If they do, the blame will fall on no one else but themselves change is inevitable. If you think that the skills you have now will still allow you to have the same salary ten years from now, I can only hope you are able to escape the fate reality has prepared for you.\n\nJust as many other articles have written about the correct attitude people need to take if they want to be developers, our value as human beings is our ability to learn, grow, and add new value to people's lives in ways not thought of or possible beforehand. What will be required of us five years from now is hard to say; but if you decide to continue pursuing a career in the tech field, I hope you will follow in the advice of John Cage and wake up each morning trying to figure out how you will \"put bread on the table today.\"\n","slug":"developers-dont-get-too-comfortable","published":1,"updated":"2017-03-11T17:32:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy44y0014nwxvmdi715j8","content":"<p>I had heard about Milton Glaser’s <a href=\"https://www.miltonglaser.com/files/Essays-10things-8400.pdf\" target=\"_blank\" rel=\"external\">“Ten Thing I Have Learned”</a> essay from numerous people, but it wasn’t until a recent mention on <a href=\"https://twitter.com/frontendhh\" target=\"_blank\" rel=\"external\">@FrontEndHH</a> by <a href=\"https://twitter.com/gordon_zhu\" target=\"_blank\" rel=\"external\">Gordon Zhu</a> that I finally decided to check it out. And while the essay as a whole contains great advice, the following section struck of chord with me: “2. If you have a choice, never have a job.”</p>\n<blockquote>\n<p>‘Never have a job, because if you have a job someday someone will take it away from you and then you will be unprepared for your old age. For me, it has always been the same every since the age of 12. I wake up in the morning and I try to figure out how am I going to put bread on the table today? It is the same at 75, I wake up every morning and I think how am I going to put bread on the table today? I am exceedingly well prepared for my old age’ [John Cage] said.</p>\n</blockquote>\n<p>While the statement could be taken literally, that would cause most people to dismiss it outright and completely misses the critical part of the message: the proper mindset one should take taking on our lives.” After all, many approach jobs as something that should be more or less a given if one puts the necessary work and preparation to earn one. Sadly enough, even after countless stories of massive layoffs, bubble bursts, stock market crashes, many still continue to hold the same mentality.</p>\n<p>As many developers know, we are currently living in a “golden-age” of technology. Developers are high in demand and can command some pretty ridiculous salaries compared to the rest of the jobs out there. Bootcamps are all the rage and everyone wants a piece of the action because that’s where the money is. It’s tempting to sit perched on our golden thrones enjoying this comfortable lifestyle, it’s important that we refrain from doing so at all cost.</p>\n<p>Even though I’m a bit skeptical that machines can completely replace developers in the near future, it is a legitimate possibility. And if that should come to pass, will developers at the time ironically call foul for having their jobs automated the way others are doing so now? If they do, the blame will fall on no one else but themselves change is inevitable. If you think that the skills you have now will still allow you to have the same salary ten years from now, I can only hope you are able to escape the fate reality has prepared for you.</p>\n<p>Just as many other articles have written about the correct attitude people need to take if they want to be developers, our value as human beings is our ability to learn, grow, and add new value to people’s lives in ways not thought of or possible beforehand. What will be required of us five years from now is hard to say; but if you decide to continue pursuing a career in the tech field, I hope you will follow in the advice of John Cage and wake up each morning trying to figure out how you will “put bread on the table today.”</p>\n","excerpt":"","more":"<p>I had heard about Milton Glaser’s <a href=\"https://www.miltonglaser.com/files/Essays-10things-8400.pdf\">“Ten Thing I Have Learned”</a> essay from numerous people, but it wasn’t until a recent mention on <a href=\"https://twitter.com/frontendhh\">@FrontEndHH</a> by <a href=\"https://twitter.com/gordon_zhu\">Gordon Zhu</a> that I finally decided to check it out. And while the essay as a whole contains great advice, the following section struck of chord with me: “2. If you have a choice, never have a job.”</p>\n<blockquote>\n<p>‘Never have a job, because if you have a job someday someone will take it away from you and then you will be unprepared for your old age. For me, it has always been the same every since the age of 12. I wake up in the morning and I try to figure out how am I going to put bread on the table today? It is the same at 75, I wake up every morning and I think how am I going to put bread on the table today? I am exceedingly well prepared for my old age’ [John Cage] said.</p>\n</blockquote>\n<p>While the statement could be taken literally, that would cause most people to dismiss it outright and completely misses the critical part of the message: the proper mindset one should take taking on our lives.” After all, many approach jobs as something that should be more or less a given if one puts the necessary work and preparation to earn one. Sadly enough, even after countless stories of massive layoffs, bubble bursts, stock market crashes, many still continue to hold the same mentality.</p>\n<p>As many developers know, we are currently living in a “golden-age” of technology. Developers are high in demand and can command some pretty ridiculous salaries compared to the rest of the jobs out there. Bootcamps are all the rage and everyone wants a piece of the action because that’s where the money is. It’s tempting to sit perched on our golden thrones enjoying this comfortable lifestyle, it’s important that we refrain from doing so at all cost.</p>\n<p>Even though I’m a bit skeptical that machines can completely replace developers in the near future, it is a legitimate possibility. And if that should come to pass, will developers at the time ironically call foul for having their jobs automated the way others are doing so now? If they do, the blame will fall on no one else but themselves change is inevitable. If you think that the skills you have now will still allow you to have the same salary ten years from now, I can only hope you are able to escape the fate reality has prepared for you.</p>\n<p>Just as many other articles have written about the correct attitude people need to take if they want to be developers, our value as human beings is our ability to learn, grow, and add new value to people’s lives in ways not thought of or possible beforehand. What will be required of us five years from now is hard to say; but if you decide to continue pursuing a career in the tech field, I hope you will follow in the advice of John Cage and wake up each morning trying to figure out how you will “put bread on the table today.”</p>\n"},{"title":"Emerging From a Crucible","date":"2017-04-16T19:22:12.000Z","_content":"\nIt's been a little over a month since I last wrote here. And in that time, I have challenged myself to dive headfirst into projects equipped with little more than a belief that I could figure it out along the way. I'm proud to say that in this past month, I found myself completely immersed in two projects that would take me into technology I had always been hesitant to learn: (1) a proper client-side JS framework and (2) hybrid mobile app technology.\n\nAt a high level, I got to spend a lot of quality time learning and building projects with [VueJS](https://vuejs.org) and got a glimpse into the world of [Ionic](https://ionicframework.com/) and [ReactNative](https://facebook.github.io/react-native/). While it has been a challenging month, I look back on it with a gratitude to the trials and tribulations I underwent as a crucicle in my journey to improve my abilities as a developer.\n\nMore is to come on the lessons learned from this past month and why it has been such a meaningful experience; but in the meantime, what I will say is this: Unlike walking and running which build upon successive skills, taking the leap into something new that is terrifying is more like a young bird learning to fly. Sometimes, the best thing you can do is to spread your wings, leap and flap like crazy until you figure it out on the way down.\n","source":"_posts/emerging-from-a-crucible.md","raw":"---\ntitle: Emerging From a Crucible\ndate: 2017-04-16 15:22:12\ncategories: Journal\ntags:\n---\n\nIt's been a little over a month since I last wrote here. And in that time, I have challenged myself to dive headfirst into projects equipped with little more than a belief that I could figure it out along the way. I'm proud to say that in this past month, I found myself completely immersed in two projects that would take me into technology I had always been hesitant to learn: (1) a proper client-side JS framework and (2) hybrid mobile app technology.\n\nAt a high level, I got to spend a lot of quality time learning and building projects with [VueJS](https://vuejs.org) and got a glimpse into the world of [Ionic](https://ionicframework.com/) and [ReactNative](https://facebook.github.io/react-native/). While it has been a challenging month, I look back on it with a gratitude to the trials and tribulations I underwent as a crucicle in my journey to improve my abilities as a developer.\n\nMore is to come on the lessons learned from this past month and why it has been such a meaningful experience; but in the meantime, what I will say is this: Unlike walking and running which build upon successive skills, taking the leap into something new that is terrifying is more like a young bird learning to fly. Sometimes, the best thing you can do is to spread your wings, leap and flap like crazy until you figure it out on the way down.\n","slug":"emerging-from-a-crucible","published":1,"updated":"2017-04-17T00:51:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy4500015nwxv82dgbqaz","content":"<p>It’s been a little over a month since I last wrote here. And in that time, I have challenged myself to dive headfirst into projects equipped with little more than a belief that I could figure it out along the way. I’m proud to say that in this past month, I found myself completely immersed in two projects that would take me into technology I had always been hesitant to learn: (1) a proper client-side JS framework and (2) hybrid mobile app technology.</p>\n<p>At a high level, I got to spend a lot of quality time learning and building projects with <a href=\"https://vuejs.org\" target=\"_blank\" rel=\"external\">VueJS</a> and got a glimpse into the world of <a href=\"https://ionicframework.com/\" target=\"_blank\" rel=\"external\">Ionic</a> and <a href=\"https://facebook.github.io/react-native/\" target=\"_blank\" rel=\"external\">ReactNative</a>. While it has been a challenging month, I look back on it with a gratitude to the trials and tribulations I underwent as a crucicle in my journey to improve my abilities as a developer.</p>\n<p>More is to come on the lessons learned from this past month and why it has been such a meaningful experience; but in the meantime, what I will say is this: Unlike walking and running which build upon successive skills, taking the leap into something new that is terrifying is more like a young bird learning to fly. Sometimes, the best thing you can do is to spread your wings, leap and flap like crazy until you figure it out on the way down.</p>\n","excerpt":"","more":"<p>It’s been a little over a month since I last wrote here. And in that time, I have challenged myself to dive headfirst into projects equipped with little more than a belief that I could figure it out along the way. I’m proud to say that in this past month, I found myself completely immersed in two projects that would take me into technology I had always been hesitant to learn: (1) a proper client-side JS framework and (2) hybrid mobile app technology.</p>\n<p>At a high level, I got to spend a lot of quality time learning and building projects with <a href=\"https://vuejs.org\">VueJS</a> and got a glimpse into the world of <a href=\"https://ionicframework.com/\">Ionic</a> and <a href=\"https://facebook.github.io/react-native/\">ReactNative</a>. While it has been a challenging month, I look back on it with a gratitude to the trials and tribulations I underwent as a crucicle in my journey to improve my abilities as a developer.</p>\n<p>More is to come on the lessons learned from this past month and why it has been such a meaningful experience; but in the meantime, what I will say is this: Unlike walking and running which build upon successive skills, taking the leap into something new that is terrifying is more like a young bird learning to fly. Sometimes, the best thing you can do is to spread your wings, leap and flap like crazy until you figure it out on the way down.</p>\n"},{"title":"Do It Even If It's Ugly","date":"2017-03-02T04:47:05.000Z","_content":"\nI read [this article](https://medium.com/@addyosmani/totally-get-your-frustration-ea11adf237e3#.uiw3hwcli) by [Addy Osmani](https://twitter.com/addyosmani) a while back that was in response to the \"How It Feels to Learn JavaScript in 2016\" post. For those who haven't read it, the essence of the article boiled down to this:\n\n> First do it, then do it right, then do it better.\n\nSounds like a great motto to follow by yes? Well, while I agreed with it whole-heartedly when I read it, recent events have shown me that I clearly hadn't put it into practice yet. In fact, for whatever reason, I took it as great advice for people starting out in the field while completely missing the fact that it was a commentary on learning as a whole.\n\nI don't know about the rest of you, but I often find myself getting lost in my head whenever I try to build things. If we were to use the analogy of the dreaded whiteboard exercise during a job interview, it's the equivalent of me staring silently as I try to devise the \"perfect\" solution to the question I'm provided. And as most of you know, this is one of the worst things you can do.\n\nNow, there are probably numerous things for why this keeps happening to me (e.g., some degree of perfectionism combined with a subconscious desire to be more clever than necessary). However, the core issue boils down to this: *I keep trying to do things as elegantly as possible the first time around.* It's as if I was playing a game of [go](https://en.wikipedia.org/wiki/Go_(game)) and I'm trying to figure out the best move possible because there are no undos in a proper game of go.\n\nOf course, this is utterly ridiculous because there are plenty of opportunities to change your mind when coding. And returning to the whiteboard exercise analogy, the correct strategy is to start out by sketching out a basic solution and then talk your way through it as you change / improve it as you go. After all, it's not as if we're writing our code with typewriters and can never get a chance to try again.\n\nThe reality is that your initial solution is going to be flawed and ugly (i.e., not the most concise or elegant way the code could be written). Yes, I know, that sounds horrifying; but I assure you that it is perfectly fine. The key thing to focus on here is to get something working. Once the MVP is up and running, you can happily iterate to your hearts content knowing that your solution is getting better with each cycle.\n\nAt the end of day, I can assure you this much: no matter how clunky your prototype is, it beats going home empty-handed because you got stuck in your head.\n","source":"_posts/do-it-even-if-its-ugly.md","raw":"---\ntitle: Do It Even If It's Ugly\ndate: 2017-03-01 23:47:05\ntags:\n\t- advice\n\t- workflow\n---\n\nI read [this article](https://medium.com/@addyosmani/totally-get-your-frustration-ea11adf237e3#.uiw3hwcli) by [Addy Osmani](https://twitter.com/addyosmani) a while back that was in response to the \"How It Feels to Learn JavaScript in 2016\" post. For those who haven't read it, the essence of the article boiled down to this:\n\n> First do it, then do it right, then do it better.\n\nSounds like a great motto to follow by yes? Well, while I agreed with it whole-heartedly when I read it, recent events have shown me that I clearly hadn't put it into practice yet. In fact, for whatever reason, I took it as great advice for people starting out in the field while completely missing the fact that it was a commentary on learning as a whole.\n\nI don't know about the rest of you, but I often find myself getting lost in my head whenever I try to build things. If we were to use the analogy of the dreaded whiteboard exercise during a job interview, it's the equivalent of me staring silently as I try to devise the \"perfect\" solution to the question I'm provided. And as most of you know, this is one of the worst things you can do.\n\nNow, there are probably numerous things for why this keeps happening to me (e.g., some degree of perfectionism combined with a subconscious desire to be more clever than necessary). However, the core issue boils down to this: *I keep trying to do things as elegantly as possible the first time around.* It's as if I was playing a game of [go](https://en.wikipedia.org/wiki/Go_(game)) and I'm trying to figure out the best move possible because there are no undos in a proper game of go.\n\nOf course, this is utterly ridiculous because there are plenty of opportunities to change your mind when coding. And returning to the whiteboard exercise analogy, the correct strategy is to start out by sketching out a basic solution and then talk your way through it as you change / improve it as you go. After all, it's not as if we're writing our code with typewriters and can never get a chance to try again.\n\nThe reality is that your initial solution is going to be flawed and ugly (i.e., not the most concise or elegant way the code could be written). Yes, I know, that sounds horrifying; but I assure you that it is perfectly fine. The key thing to focus on here is to get something working. Once the MVP is up and running, you can happily iterate to your hearts content knowing that your solution is getting better with each cycle.\n\nAt the end of day, I can assure you this much: no matter how clunky your prototype is, it beats going home empty-handed because you got stuck in your head.\n","slug":"do-it-even-if-its-ugly","published":1,"updated":"2017-03-02T04:47:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy4530018nwxvrl0zaspl","content":"<p>I read <a href=\"https://medium.com/@addyosmani/totally-get-your-frustration-ea11adf237e3#.uiw3hwcli\" target=\"_blank\" rel=\"external\">this article</a> by <a href=\"https://twitter.com/addyosmani\" target=\"_blank\" rel=\"external\">Addy Osmani</a> a while back that was in response to the “How It Feels to Learn JavaScript in 2016” post. For those who haven’t read it, the essence of the article boiled down to this:</p>\n<blockquote>\n<p>First do it, then do it right, then do it better.</p>\n</blockquote>\n<p>Sounds like a great motto to follow by yes? Well, while I agreed with it whole-heartedly when I read it, recent events have shown me that I clearly hadn’t put it into practice yet. In fact, for whatever reason, I took it as great advice for people starting out in the field while completely missing the fact that it was a commentary on learning as a whole.</p>\n<p>I don’t know about the rest of you, but I often find myself getting lost in my head whenever I try to build things. If we were to use the analogy of the dreaded whiteboard exercise during a job interview, it’s the equivalent of me staring silently as I try to devise the “perfect” solution to the question I’m provided. And as most of you know, this is one of the worst things you can do.</p>\n<p>Now, there are probably numerous things for why this keeps happening to me (e.g., some degree of perfectionism combined with a subconscious desire to be more clever than necessary). However, the core issue boils down to this: <em>I keep trying to do things as elegantly as possible the first time around.</em> It’s as if I was playing a game of <a href=\"https://en.wikipedia.org/wiki/Go_(game\" target=\"_blank\" rel=\"external\">go</a>) and I’m trying to figure out the best move possible because there are no undos in a proper game of go.</p>\n<p>Of course, this is utterly ridiculous because there are plenty of opportunities to change your mind when coding. And returning to the whiteboard exercise analogy, the correct strategy is to start out by sketching out a basic solution and then talk your way through it as you change / improve it as you go. After all, it’s not as if we’re writing our code with typewriters and can never get a chance to try again.</p>\n<p>The reality is that your initial solution is going to be flawed and ugly (i.e., not the most concise or elegant way the code could be written). Yes, I know, that sounds horrifying; but I assure you that it is perfectly fine. The key thing to focus on here is to get something working. Once the MVP is up and running, you can happily iterate to your hearts content knowing that your solution is getting better with each cycle.</p>\n<p>At the end of day, I can assure you this much: no matter how clunky your prototype is, it beats going home empty-handed because you got stuck in your head.</p>\n","excerpt":"","more":"<p>I read <a href=\"https://medium.com/@addyosmani/totally-get-your-frustration-ea11adf237e3#.uiw3hwcli\">this article</a> by <a href=\"https://twitter.com/addyosmani\">Addy Osmani</a> a while back that was in response to the “How It Feels to Learn JavaScript in 2016” post. For those who haven’t read it, the essence of the article boiled down to this:</p>\n<blockquote>\n<p>First do it, then do it right, then do it better.</p>\n</blockquote>\n<p>Sounds like a great motto to follow by yes? Well, while I agreed with it whole-heartedly when I read it, recent events have shown me that I clearly hadn’t put it into practice yet. In fact, for whatever reason, I took it as great advice for people starting out in the field while completely missing the fact that it was a commentary on learning as a whole.</p>\n<p>I don’t know about the rest of you, but I often find myself getting lost in my head whenever I try to build things. If we were to use the analogy of the dreaded whiteboard exercise during a job interview, it’s the equivalent of me staring silently as I try to devise the “perfect” solution to the question I’m provided. And as most of you know, this is one of the worst things you can do.</p>\n<p>Now, there are probably numerous things for why this keeps happening to me (e.g., some degree of perfectionism combined with a subconscious desire to be more clever than necessary). However, the core issue boils down to this: <em>I keep trying to do things as elegantly as possible the first time around.</em> It’s as if I was playing a game of <a href=\"https://en.wikipedia.org/wiki/Go_(game\">go</a>) and I’m trying to figure out the best move possible because there are no undos in a proper game of go.</p>\n<p>Of course, this is utterly ridiculous because there are plenty of opportunities to change your mind when coding. And returning to the whiteboard exercise analogy, the correct strategy is to start out by sketching out a basic solution and then talk your way through it as you change / improve it as you go. After all, it’s not as if we’re writing our code with typewriters and can never get a chance to try again.</p>\n<p>The reality is that your initial solution is going to be flawed and ugly (i.e., not the most concise or elegant way the code could be written). Yes, I know, that sounds horrifying; but I assure you that it is perfectly fine. The key thing to focus on here is to get something working. Once the MVP is up and running, you can happily iterate to your hearts content knowing that your solution is getting better with each cycle.</p>\n<p>At the end of day, I can assure you this much: no matter how clunky your prototype is, it beats going home empty-handed because you got stuck in your head.</p>\n"},{"title":"Just Google Translate Everything Right?","date":"2017-02-28T05:05:09.000Z","_content":"\nAs I continue catching up on [Front End Happy Hour](http://frontendhappyhour.com/), I came across the episode [Mixed drinks and Mixed languages](http://frontendhappyhour.com/episodes/mixed-drinks-and-mixed-languages/). The topic of discussion was on the trials and tribulations that come with trying to create a site / application that is supported globally (i.e., multiple languages).\n\nTo be honest, when I first read the episode summary, it seemed like it would be a lackluster topic since after all, it's just a matter of swapping in text right? Well if that were the case, it would certainly make for a boring hour of discussion no?\n\nFor the record, I did not really think that translation was a matter of simply replacing English content with the language equivalent. After all, as someone who speaks Chinese more or less fluently, I'm well aware of the difficulties of trying to achieve the \"perfect\" translation. And more often than not, the translation can fall just short of the original meaning.\n\nAs I listened to their stories, a few things stuck out to me:\n\n1. **The idea that an amazing design built around English content might actually be terrible in another language.** For example, simple statements in English could end up being multiple lines of characters in another language. Or what about languages whose letters have different line heights or extra symbols not yet accounted for?\n\n2. **It is critical to be sensitive to cultural norms with design elements we often take for granted.** A simple example of this is imagery. What is perfectly acceptable to us could be completely unacceptable in another country.\n\n3. **Google Translate might seem like an easy solution to making your site accessible in multiple languages, but the general consensus from the panel is that it is a terrible idea.** Now to be honest, I used Google Translate for my go blog for a good while. And though I'm sure that the translation was far from perfect, it served the purpose I needed at the time since it was simply a recreational blog where the readers have low expectations as far as the quality of translation. I would never dream of doing something like that for a professional project though.\n\n4. **Even though one might expect that people whose language reads from right to left would have similar expectations of UI elements like a video player, that assumptions turns out to be wrong.** The reason is because their first introduction to the UI concept was the VCR (which goes from left to right). Fun trivia courtesy of [Brian Holt](https://twitter.com/holtbt) or one of the Netflix engineers if I'm not mistaken.\n\nAnd though I have yet to take part in a project that requires multi-language support, I feel much more informed on the topic and am glad I took the time to listen to this episode!\n","source":"_posts/just-google-translate-everything-right.md","raw":"---\ntitle: Just Google Translate Everything Right?\ndate: 2017-02-28 00:05:09\ntags:\n  - languages\n---\n\nAs I continue catching up on [Front End Happy Hour](http://frontendhappyhour.com/), I came across the episode [Mixed drinks and Mixed languages](http://frontendhappyhour.com/episodes/mixed-drinks-and-mixed-languages/). The topic of discussion was on the trials and tribulations that come with trying to create a site / application that is supported globally (i.e., multiple languages).\n\nTo be honest, when I first read the episode summary, it seemed like it would be a lackluster topic since after all, it's just a matter of swapping in text right? Well if that were the case, it would certainly make for a boring hour of discussion no?\n\nFor the record, I did not really think that translation was a matter of simply replacing English content with the language equivalent. After all, as someone who speaks Chinese more or less fluently, I'm well aware of the difficulties of trying to achieve the \"perfect\" translation. And more often than not, the translation can fall just short of the original meaning.\n\nAs I listened to their stories, a few things stuck out to me:\n\n1. **The idea that an amazing design built around English content might actually be terrible in another language.** For example, simple statements in English could end up being multiple lines of characters in another language. Or what about languages whose letters have different line heights or extra symbols not yet accounted for?\n\n2. **It is critical to be sensitive to cultural norms with design elements we often take for granted.** A simple example of this is imagery. What is perfectly acceptable to us could be completely unacceptable in another country.\n\n3. **Google Translate might seem like an easy solution to making your site accessible in multiple languages, but the general consensus from the panel is that it is a terrible idea.** Now to be honest, I used Google Translate for my go blog for a good while. And though I'm sure that the translation was far from perfect, it served the purpose I needed at the time since it was simply a recreational blog where the readers have low expectations as far as the quality of translation. I would never dream of doing something like that for a professional project though.\n\n4. **Even though one might expect that people whose language reads from right to left would have similar expectations of UI elements like a video player, that assumptions turns out to be wrong.** The reason is because their first introduction to the UI concept was the VCR (which goes from left to right). Fun trivia courtesy of [Brian Holt](https://twitter.com/holtbt) or one of the Netflix engineers if I'm not mistaken.\n\nAnd though I have yet to take part in a project that requires multi-language support, I feel much more informed on the topic and am glad I took the time to listen to this episode!\n","slug":"just-google-translate-everything-right","published":1,"updated":"2017-02-28T05:06:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy457001anwxvovdp0v0a","content":"<p>As I continue catching up on <a href=\"http://frontendhappyhour.com/\" target=\"_blank\" rel=\"external\">Front End Happy Hour</a>, I came across the episode <a href=\"http://frontendhappyhour.com/episodes/mixed-drinks-and-mixed-languages/\" target=\"_blank\" rel=\"external\">Mixed drinks and Mixed languages</a>. The topic of discussion was on the trials and tribulations that come with trying to create a site / application that is supported globally (i.e., multiple languages).</p>\n<p>To be honest, when I first read the episode summary, it seemed like it would be a lackluster topic since after all, it’s just a matter of swapping in text right? Well if that were the case, it would certainly make for a boring hour of discussion no?</p>\n<p>For the record, I did not really think that translation was a matter of simply replacing English content with the language equivalent. After all, as someone who speaks Chinese more or less fluently, I’m well aware of the difficulties of trying to achieve the “perfect” translation. And more often than not, the translation can fall just short of the original meaning.</p>\n<p>As I listened to their stories, a few things stuck out to me:</p>\n<ol>\n<li><p><strong>The idea that an amazing design built around English content might actually be terrible in another language.</strong> For example, simple statements in English could end up being multiple lines of characters in another language. Or what about languages whose letters have different line heights or extra symbols not yet accounted for?</p>\n</li>\n<li><p><strong>It is critical to be sensitive to cultural norms with design elements we often take for granted.</strong> A simple example of this is imagery. What is perfectly acceptable to us could be completely unacceptable in another country.</p>\n</li>\n<li><p><strong>Google Translate might seem like an easy solution to making your site accessible in multiple languages, but the general consensus from the panel is that it is a terrible idea.</strong> Now to be honest, I used Google Translate for my go blog for a good while. And though I’m sure that the translation was far from perfect, it served the purpose I needed at the time since it was simply a recreational blog where the readers have low expectations as far as the quality of translation. I would never dream of doing something like that for a professional project though.</p>\n</li>\n<li><p><strong>Even though one might expect that people whose language reads from right to left would have similar expectations of UI elements like a video player, that assumptions turns out to be wrong.</strong> The reason is because their first introduction to the UI concept was the VCR (which goes from left to right). Fun trivia courtesy of <a href=\"https://twitter.com/holtbt\" target=\"_blank\" rel=\"external\">Brian Holt</a> or one of the Netflix engineers if I’m not mistaken.</p>\n</li>\n</ol>\n<p>And though I have yet to take part in a project that requires multi-language support, I feel much more informed on the topic and am glad I took the time to listen to this episode!</p>\n","excerpt":"","more":"<p>As I continue catching up on <a href=\"http://frontendhappyhour.com/\">Front End Happy Hour</a>, I came across the episode <a href=\"http://frontendhappyhour.com/episodes/mixed-drinks-and-mixed-languages/\">Mixed drinks and Mixed languages</a>. The topic of discussion was on the trials and tribulations that come with trying to create a site / application that is supported globally (i.e., multiple languages).</p>\n<p>To be honest, when I first read the episode summary, it seemed like it would be a lackluster topic since after all, it’s just a matter of swapping in text right? Well if that were the case, it would certainly make for a boring hour of discussion no?</p>\n<p>For the record, I did not really think that translation was a matter of simply replacing English content with the language equivalent. After all, as someone who speaks Chinese more or less fluently, I’m well aware of the difficulties of trying to achieve the “perfect” translation. And more often than not, the translation can fall just short of the original meaning.</p>\n<p>As I listened to their stories, a few things stuck out to me:</p>\n<ol>\n<li><p><strong>The idea that an amazing design built around English content might actually be terrible in another language.</strong> For example, simple statements in English could end up being multiple lines of characters in another language. Or what about languages whose letters have different line heights or extra symbols not yet accounted for?</p>\n</li>\n<li><p><strong>It is critical to be sensitive to cultural norms with design elements we often take for granted.</strong> A simple example of this is imagery. What is perfectly acceptable to us could be completely unacceptable in another country.</p>\n</li>\n<li><p><strong>Google Translate might seem like an easy solution to making your site accessible in multiple languages, but the general consensus from the panel is that it is a terrible idea.</strong> Now to be honest, I used Google Translate for my go blog for a good while. And though I’m sure that the translation was far from perfect, it served the purpose I needed at the time since it was simply a recreational blog where the readers have low expectations as far as the quality of translation. I would never dream of doing something like that for a professional project though.</p>\n</li>\n<li><p><strong>Even though one might expect that people whose language reads from right to left would have similar expectations of UI elements like a video player, that assumptions turns out to be wrong.</strong> The reason is because their first introduction to the UI concept was the VCR (which goes from left to right). Fun trivia courtesy of <a href=\"https://twitter.com/holtbt\">Brian Holt</a> or one of the Netflix engineers if I’m not mistaken.</p>\n</li>\n</ol>\n<p>And though I have yet to take part in a project that requires multi-language support, I feel much more informed on the topic and am glad I took the time to listen to this episode!</p>\n"},{"title":"Third Time's a Charm","date":"2017-02-26T15:48:59.000Z","_content":"\nFor those who don't know me, my name is Ben and I come to the world of coding primarily self-taught and the simple fortuitous circumstance of being born in a time and place where technology was easily accessible for me.\n\nIf I'm not mistaken, this is my third time trying to start up my coding blog. Over the years, I've had a number of false starts and attempts to create this \"perfect\" coding blog. I would see the kinds of things other people wrote and think \"I want to write stuff like that,\" but then I would get tangled up in my own thoughts of trying to write \"the perfect post\" or trying to be completely original with my ideas.\n\nThe reality is this: **ideas grow within a community of other ideas and rarely in isolation.** Whether it is taking chemistry molecular concepts and infusing them into a design architecture (i.e. atomic design) or using Legos as inspiration for modular architecture, ideas are often born from other ideas. And that is perfectly fine.\n\nThey say third time's a charm right? So here's to another attempt with a different mindset. Cheers everyone.\n","source":"_posts/third-times-a-charm.md","raw":"---\ntitle: \"Third Time's a Charm\"\ndate: 2017-02-26 10:48:59\ntags: journal\n---\n\nFor those who don't know me, my name is Ben and I come to the world of coding primarily self-taught and the simple fortuitous circumstance of being born in a time and place where technology was easily accessible for me.\n\nIf I'm not mistaken, this is my third time trying to start up my coding blog. Over the years, I've had a number of false starts and attempts to create this \"perfect\" coding blog. I would see the kinds of things other people wrote and think \"I want to write stuff like that,\" but then I would get tangled up in my own thoughts of trying to write \"the perfect post\" or trying to be completely original with my ideas.\n\nThe reality is this: **ideas grow within a community of other ideas and rarely in isolation.** Whether it is taking chemistry molecular concepts and infusing them into a design architecture (i.e. atomic design) or using Legos as inspiration for modular architecture, ideas are often born from other ideas. And that is perfectly fine.\n\nThey say third time's a charm right? So here's to another attempt with a different mindset. Cheers everyone.\n","slug":"third-times-a-charm","published":1,"updated":"2017-03-04T20:10:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy45a001cnwxv6v4eqote","content":"<p>For those who don’t know me, my name is Ben and I come to the world of coding primarily self-taught and the simple fortuitous circumstance of being born in a time and place where technology was easily accessible for me.</p>\n<p>If I’m not mistaken, this is my third time trying to start up my coding blog. Over the years, I’ve had a number of false starts and attempts to create this “perfect” coding blog. I would see the kinds of things other people wrote and think “I want to write stuff like that,” but then I would get tangled up in my own thoughts of trying to write “the perfect post” or trying to be completely original with my ideas.</p>\n<p>The reality is this: <strong>ideas grow within a community of other ideas and rarely in isolation.</strong> Whether it is taking chemistry molecular concepts and infusing them into a design architecture (i.e. atomic design) or using Legos as inspiration for modular architecture, ideas are often born from other ideas. And that is perfectly fine.</p>\n<p>They say third time’s a charm right? So here’s to another attempt with a different mindset. Cheers everyone.</p>\n","excerpt":"","more":"<p>For those who don’t know me, my name is Ben and I come to the world of coding primarily self-taught and the simple fortuitous circumstance of being born in a time and place where technology was easily accessible for me.</p>\n<p>If I’m not mistaken, this is my third time trying to start up my coding blog. Over the years, I’ve had a number of false starts and attempts to create this “perfect” coding blog. I would see the kinds of things other people wrote and think “I want to write stuff like that,” but then I would get tangled up in my own thoughts of trying to write “the perfect post” or trying to be completely original with my ideas.</p>\n<p>The reality is this: <strong>ideas grow within a community of other ideas and rarely in isolation.</strong> Whether it is taking chemistry molecular concepts and infusing them into a design architecture (i.e. atomic design) or using Legos as inspiration for modular architecture, ideas are often born from other ideas. And that is perfectly fine.</p>\n<p>They say third time’s a charm right? So here’s to another attempt with a different mindset. Cheers everyone.</p>\n"},{"title":"Never Finished","date":"2016-04-01T06:00:00.000Z","_content":"\nI cannot even begin to count how many times I tried to launch this blog. Each time I sat down to do so, I would get caught up in the million things that I wanted to do with it and end up lost in the sea of ideas and possibility (i.e., articles, tutorials, embedded CodePens featuring awesome animations I would make, etc.).\n\nThis would have gone on for much longer if it had not been for a conversation I had with my fiancee a couple of weeks ago. I was hitting another low point in my journey. I was getting frustrated with my progress as a developer and felt the gap between myself and the greats increasing with each passing day.\n\nBeing as this was starting to become a regular cycle with me, she decided it was time to give me a swift kick to wake me up.\n\n“No matter what you do, you will never be finished.”\n\nGranted, the conversation was much more in-depth than that; but the words rang loud and clear in my head.\n\nDon’t get me wrong, that sucked to hear as a closet-perfectionist with a gotta catch ‘em all mentality. After all, what do you mean I’ll never be finished? I want to master them all! Beautiful Greensock animations, D3, WebGL, React, Angular, (insert new JavaScript MV* here), Node, algorithms and data structures, Elm, etc.\n\nHowever, once I had let that knee-jerk reaction pass, I forced myself to consider the weight of her words. After all, this was not the first time I had heard similar advice. In fact, there have been countless articles, blog posts, and podcasts reminding new people entering the field that “you’ll never know it all” and that “the learning never ends.” So why hadn’t it sunk in for me yet?\n\nTo be honest, it’s not as if I ever thought I’d ever get to a point where I would no longer need to learn anymore. That couldn’t be further from the truth. However, I do think that there was a part of me that kept searching for the promised land of building up a foundation of knowledge so solid that navigating the ever evolving tapestry of technology would become fairly simple. Pure hubris now that I’ve put words to it now right?\n\nBut here's the reality of it, that won't ever happen. While there may be an end in sight at this moment, you and I both know that technology we thought would be around for a while could be uprooted in the next hour or year. (*cough* Parse shutting down *cough*)\n\nAt the time this is published, the design of the blog is nothing more than an MVP. It lacks the bells and whistles of most blogs (i.e., information architecture, recent articles, related posts, etc.) and requires a design makeover, but I refuse to falter any longer. This is my zero to one.\n\nI see the irony of starting this blog on April Fools; but make no mistake, this is no joke of a vision I have. This post is my retort to that idealistic voice inside. Stop looking for the finish line and enjoy each new discovery along the way. Relish in the fact that there will always be something new to learn and appreciate the fact that the only thing standing between your understanding of something is hard work.\n\nI plan on going the long distance with this. So here’s to the first steps on a journey full of discovery, exploration, and learning to become the person who will “never be finished.”","source":"_posts/never-finished.md","raw":"---\ntitle: Never Finished\ndate: 2016-04-01 02:00:00\ntags:\n---\n\nI cannot even begin to count how many times I tried to launch this blog. Each time I sat down to do so, I would get caught up in the million things that I wanted to do with it and end up lost in the sea of ideas and possibility (i.e., articles, tutorials, embedded CodePens featuring awesome animations I would make, etc.).\n\nThis would have gone on for much longer if it had not been for a conversation I had with my fiancee a couple of weeks ago. I was hitting another low point in my journey. I was getting frustrated with my progress as a developer and felt the gap between myself and the greats increasing with each passing day.\n\nBeing as this was starting to become a regular cycle with me, she decided it was time to give me a swift kick to wake me up.\n\n“No matter what you do, you will never be finished.”\n\nGranted, the conversation was much more in-depth than that; but the words rang loud and clear in my head.\n\nDon’t get me wrong, that sucked to hear as a closet-perfectionist with a gotta catch ‘em all mentality. After all, what do you mean I’ll never be finished? I want to master them all! Beautiful Greensock animations, D3, WebGL, React, Angular, (insert new JavaScript MV* here), Node, algorithms and data structures, Elm, etc.\n\nHowever, once I had let that knee-jerk reaction pass, I forced myself to consider the weight of her words. After all, this was not the first time I had heard similar advice. In fact, there have been countless articles, blog posts, and podcasts reminding new people entering the field that “you’ll never know it all” and that “the learning never ends.” So why hadn’t it sunk in for me yet?\n\nTo be honest, it’s not as if I ever thought I’d ever get to a point where I would no longer need to learn anymore. That couldn’t be further from the truth. However, I do think that there was a part of me that kept searching for the promised land of building up a foundation of knowledge so solid that navigating the ever evolving tapestry of technology would become fairly simple. Pure hubris now that I’ve put words to it now right?\n\nBut here's the reality of it, that won't ever happen. While there may be an end in sight at this moment, you and I both know that technology we thought would be around for a while could be uprooted in the next hour or year. (*cough* Parse shutting down *cough*)\n\nAt the time this is published, the design of the blog is nothing more than an MVP. It lacks the bells and whistles of most blogs (i.e., information architecture, recent articles, related posts, etc.) and requires a design makeover, but I refuse to falter any longer. This is my zero to one.\n\nI see the irony of starting this blog on April Fools; but make no mistake, this is no joke of a vision I have. This post is my retort to that idealistic voice inside. Stop looking for the finish line and enjoy each new discovery along the way. Relish in the fact that there will always be something new to learn and appreciate the fact that the only thing standing between your understanding of something is hard work.\n\nI plan on going the long distance with this. So here’s to the first steps on a journey full of discovery, exploration, and learning to become the person who will “never be finished.”","slug":"never-finished","published":1,"updated":"2017-02-25T16:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy45m001enwxvghphlwxx","content":"<p>I cannot even begin to count how many times I tried to launch this blog. Each time I sat down to do so, I would get caught up in the million things that I wanted to do with it and end up lost in the sea of ideas and possibility (i.e., articles, tutorials, embedded CodePens featuring awesome animations I would make, etc.).</p>\n<p>This would have gone on for much longer if it had not been for a conversation I had with my fiancee a couple of weeks ago. I was hitting another low point in my journey. I was getting frustrated with my progress as a developer and felt the gap between myself and the greats increasing with each passing day.</p>\n<p>Being as this was starting to become a regular cycle with me, she decided it was time to give me a swift kick to wake me up.</p>\n<p>“No matter what you do, you will never be finished.”</p>\n<p>Granted, the conversation was much more in-depth than that; but the words rang loud and clear in my head.</p>\n<p>Don’t get me wrong, that sucked to hear as a closet-perfectionist with a gotta catch ‘em all mentality. After all, what do you mean I’ll never be finished? I want to master them all! Beautiful Greensock animations, D3, WebGL, React, Angular, (insert new JavaScript MV* here), Node, algorithms and data structures, Elm, etc.</p>\n<p>However, once I had let that knee-jerk reaction pass, I forced myself to consider the weight of her words. After all, this was not the first time I had heard similar advice. In fact, there have been countless articles, blog posts, and podcasts reminding new people entering the field that “you’ll never know it all” and that “the learning never ends.” So why hadn’t it sunk in for me yet?</p>\n<p>To be honest, it’s not as if I ever thought I’d ever get to a point where I would no longer need to learn anymore. That couldn’t be further from the truth. However, I do think that there was a part of me that kept searching for the promised land of building up a foundation of knowledge so solid that navigating the ever evolving tapestry of technology would become fairly simple. Pure hubris now that I’ve put words to it now right?</p>\n<p>But here’s the reality of it, that won’t ever happen. While there may be an end in sight at this moment, you and I both know that technology we thought would be around for a while could be uprooted in the next hour or year. (<em>cough</em> Parse shutting down <em>cough</em>)</p>\n<p>At the time this is published, the design of the blog is nothing more than an MVP. It lacks the bells and whistles of most blogs (i.e., information architecture, recent articles, related posts, etc.) and requires a design makeover, but I refuse to falter any longer. This is my zero to one.</p>\n<p>I see the irony of starting this blog on April Fools; but make no mistake, this is no joke of a vision I have. This post is my retort to that idealistic voice inside. Stop looking for the finish line and enjoy each new discovery along the way. Relish in the fact that there will always be something new to learn and appreciate the fact that the only thing standing between your understanding of something is hard work.</p>\n<p>I plan on going the long distance with this. So here’s to the first steps on a journey full of discovery, exploration, and learning to become the person who will “never be finished.”</p>\n","excerpt":"","more":"<p>I cannot even begin to count how many times I tried to launch this blog. Each time I sat down to do so, I would get caught up in the million things that I wanted to do with it and end up lost in the sea of ideas and possibility (i.e., articles, tutorials, embedded CodePens featuring awesome animations I would make, etc.).</p>\n<p>This would have gone on for much longer if it had not been for a conversation I had with my fiancee a couple of weeks ago. I was hitting another low point in my journey. I was getting frustrated with my progress as a developer and felt the gap between myself and the greats increasing with each passing day.</p>\n<p>Being as this was starting to become a regular cycle with me, she decided it was time to give me a swift kick to wake me up.</p>\n<p>“No matter what you do, you will never be finished.”</p>\n<p>Granted, the conversation was much more in-depth than that; but the words rang loud and clear in my head.</p>\n<p>Don’t get me wrong, that sucked to hear as a closet-perfectionist with a gotta catch ‘em all mentality. After all, what do you mean I’ll never be finished? I want to master them all! Beautiful Greensock animations, D3, WebGL, React, Angular, (insert new JavaScript MV* here), Node, algorithms and data structures, Elm, etc.</p>\n<p>However, once I had let that knee-jerk reaction pass, I forced myself to consider the weight of her words. After all, this was not the first time I had heard similar advice. In fact, there have been countless articles, blog posts, and podcasts reminding new people entering the field that “you’ll never know it all” and that “the learning never ends.” So why hadn’t it sunk in for me yet?</p>\n<p>To be honest, it’s not as if I ever thought I’d ever get to a point where I would no longer need to learn anymore. That couldn’t be further from the truth. However, I do think that there was a part of me that kept searching for the promised land of building up a foundation of knowledge so solid that navigating the ever evolving tapestry of technology would become fairly simple. Pure hubris now that I’ve put words to it now right?</p>\n<p>But here’s the reality of it, that won’t ever happen. While there may be an end in sight at this moment, you and I both know that technology we thought would be around for a while could be uprooted in the next hour or year. (<em>cough</em> Parse shutting down <em>cough</em>)</p>\n<p>At the time this is published, the design of the blog is nothing more than an MVP. It lacks the bells and whistles of most blogs (i.e., information architecture, recent articles, related posts, etc.) and requires a design makeover, but I refuse to falter any longer. This is my zero to one.</p>\n<p>I see the irony of starting this blog on April Fools; but make no mistake, this is no joke of a vision I have. This post is my retort to that idealistic voice inside. Stop looking for the finish line and enjoy each new discovery along the way. Relish in the fact that there will always be something new to learn and appreciate the fact that the only thing standing between your understanding of something is hard work.</p>\n<p>I plan on going the long distance with this. So here’s to the first steps on a journey full of discovery, exploration, and learning to become the person who will “never be finished.”</p>\n"},{"title":"Velocity in Development","date":"2017-04-18T02:12:48.000Z","_content":"\nNowadays, it is pretty much impossible to get involved with a project without hearing about \"being more agile.\" And even though I have been on a variety of projects of various agile flavors, one term that I've heard consistently is the team's \"velocity.\"\n\nFor those who aren't as familiar with agile projects, velocity at its core can be defined as the number of tickets (i.e., work) that an individual or team can complete in a sprint (i.e., a set amount of time). To no one's surprise, the general sentiment is that the more work you can get done in the allotted time frame is a good thing.\n\nWith that premise in mind, it doesn't take much for someone to come to the simple conclusion that one's value as a developer is dependent on how many tickets you can close. I was no exception to this. However, I have recently taken it upon myself to finally journey into the often forgotten realm of test driven development (TDD). And as luck would have it, my entire perspective was about to be flipped upside down by [Eric Elliot](https://twitter.com/_ericelliott).\n\n<!-- more -->\n\nContrary to the popular definition of velocity, Eric argues that velocity for a developer should not be measured by how many tickets a developer can close. In fact, he thinks that it is \"absolutely ridiculous.\" Instead, he proposes that velocity \"is a measure of [the] team's ability to adapt and ability to add or remove things from the app quickly.\"\n\nWhen I first heard him utter these words, I had to pause the lecture because I was just appalled at how flawed my thinking was all this time. And don't get me wrong, it's not that I really thought that more closed tickets meant I was somehow faster as a developer. In fact, from my experience, more tickets closed out without regard for solid practices like TDD actually produce technical debt for the future developer to deal with (i.e., future me).\n\nMore on this in due time as I grapple with this new perspective on velocity and how it impacts my workflow as a developer...\n","source":"_posts/velocity-in-development.md","raw":"---\ntitle: Velocity in Development\ndate: 2017-04-17 22:12:48\ncategories:\n\t- Reflections\ntags:\n\t- agile\n---\n\nNowadays, it is pretty much impossible to get involved with a project without hearing about \"being more agile.\" And even though I have been on a variety of projects of various agile flavors, one term that I've heard consistently is the team's \"velocity.\"\n\nFor those who aren't as familiar with agile projects, velocity at its core can be defined as the number of tickets (i.e., work) that an individual or team can complete in a sprint (i.e., a set amount of time). To no one's surprise, the general sentiment is that the more work you can get done in the allotted time frame is a good thing.\n\nWith that premise in mind, it doesn't take much for someone to come to the simple conclusion that one's value as a developer is dependent on how many tickets you can close. I was no exception to this. However, I have recently taken it upon myself to finally journey into the often forgotten realm of test driven development (TDD). And as luck would have it, my entire perspective was about to be flipped upside down by [Eric Elliot](https://twitter.com/_ericelliott).\n\n<!-- more -->\n\nContrary to the popular definition of velocity, Eric argues that velocity for a developer should not be measured by how many tickets a developer can close. In fact, he thinks that it is \"absolutely ridiculous.\" Instead, he proposes that velocity \"is a measure of [the] team's ability to adapt and ability to add or remove things from the app quickly.\"\n\nWhen I first heard him utter these words, I had to pause the lecture because I was just appalled at how flawed my thinking was all this time. And don't get me wrong, it's not that I really thought that more closed tickets meant I was somehow faster as a developer. In fact, from my experience, more tickets closed out without regard for solid practices like TDD actually produce technical debt for the future developer to deal with (i.e., future me).\n\nMore on this in due time as I grapple with this new perspective on velocity and how it impacts my workflow as a developer...\n","slug":"velocity-in-development","published":1,"updated":"2017-04-26T01:31:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy45n001fnwxvry13a55m","content":"<p>Nowadays, it is pretty much impossible to get involved with a project without hearing about “being more agile.” And even though I have been on a variety of projects of various agile flavors, one term that I’ve heard consistently is the team’s “velocity.”</p>\n<p>For those who aren’t as familiar with agile projects, velocity at its core can be defined as the number of tickets (i.e., work) that an individual or team can complete in a sprint (i.e., a set amount of time). To no one’s surprise, the general sentiment is that the more work you can get done in the allotted time frame is a good thing.</p>\n<p>With that premise in mind, it doesn’t take much for someone to come to the simple conclusion that one’s value as a developer is dependent on how many tickets you can close. I was no exception to this. However, I have recently taken it upon myself to finally journey into the often forgotten realm of test driven development (TDD). And as luck would have it, my entire perspective was about to be flipped upside down by <a href=\"https://twitter.com/_ericelliott\" target=\"_blank\" rel=\"external\">Eric Elliot</a>.</p>\n<a id=\"more\"></a>\n<p>Contrary to the popular definition of velocity, Eric argues that velocity for a developer should not be measured by how many tickets a developer can close. In fact, he thinks that it is “absolutely ridiculous.” Instead, he proposes that velocity “is a measure of [the] team’s ability to adapt and ability to add or remove things from the app quickly.”</p>\n<p>When I first heard him utter these words, I had to pause the lecture because I was just appalled at how flawed my thinking was all this time. And don’t get me wrong, it’s not that I really thought that more closed tickets meant I was somehow faster as a developer. In fact, from my experience, more tickets closed out without regard for solid practices like TDD actually produce technical debt for the future developer to deal with (i.e., future me).</p>\n<p>More on this in due time as I grapple with this new perspective on velocity and how it impacts my workflow as a developer…</p>\n","excerpt":"<p>Nowadays, it is pretty much impossible to get involved with a project without hearing about “being more agile.” And even though I have been on a variety of projects of various agile flavors, one term that I’ve heard consistently is the team’s “velocity.”</p>\n<p>For those who aren’t as familiar with agile projects, velocity at its core can be defined as the number of tickets (i.e., work) that an individual or team can complete in a sprint (i.e., a set amount of time). To no one’s surprise, the general sentiment is that the more work you can get done in the allotted time frame is a good thing.</p>\n<p>With that premise in mind, it doesn’t take much for someone to come to the simple conclusion that one’s value as a developer is dependent on how many tickets you can close. I was no exception to this. However, I have recently taken it upon myself to finally journey into the often forgotten realm of test driven development (TDD). And as luck would have it, my entire perspective was about to be flipped upside down by <a href=\"https://twitter.com/_ericelliott\">Eric Elliot</a>.</p>","more":"<p>Contrary to the popular definition of velocity, Eric argues that velocity for a developer should not be measured by how many tickets a developer can close. In fact, he thinks that it is “absolutely ridiculous.” Instead, he proposes that velocity “is a measure of [the] team’s ability to adapt and ability to add or remove things from the app quickly.”</p>\n<p>When I first heard him utter these words, I had to pause the lecture because I was just appalled at how flawed my thinking was all this time. And don’t get me wrong, it’s not that I really thought that more closed tickets meant I was somehow faster as a developer. In fact, from my experience, more tickets closed out without regard for solid practices like TDD actually produce technical debt for the future developer to deal with (i.e., future me).</p>\n<p>More on this in due time as I grapple with this new perspective on velocity and how it impacts my workflow as a developer…</p>"},{"title":"When Nobody is Watching","date":"2017-03-04T20:08:55.000Z","_content":"\n\nWhile I was taking a break today, I decided to check to see if one of my favorite choreographers [Matt Steffanina](https://www.youtube.com/channel/UCczFdwWpVEpoqb-eMm4c4dQ) had any new material up for some creative inspiration. And after a couple of videos, I stumbled upon this surprising gem:\n\nhttps://www.youtube.com/watch?v=U3c3kfeXPuc\n\nTo my surprise, I found myself more interested in what Matt had to say prior to the choreography than anything else. Because while I would typically just skip straight to the choreography, I happened to catch a soundbite of him talking about he didn't start dancing until he was 18. All of a sudden, it was like, \"Whoa. Hang on. Rewind!\"\n\nOf all the things he said, the thing that stuck out the most to me is:\n\n**\"What matters is the work you put in *when nobody is watching.*\"****\n\nThe desire to become better at something is often tied with some level of desire for that achievement to be met with recognition. So in the instance of dance, while there is the joy of dancing for the sake of dancing, it would be naiive to ignore the adrenaline and high one gets when performing in front of a crowd of people who are celebrating your art. Yet it is at Matt says, what ultimately matters is the work ethic you put into things when no one is watching.\n\nI know that this is a bit of a departure from coding, but the principle transfers over just the same. If you think about it, every time a user loads up a site or app you built, isn't that like a performance in itself? It doesn't come with the recognition or accolades that one does on stage, but it's a performance all the same. And even though users will be unable to look at the site and point directly to the culprit responsible for their crappy experience the way they would be able to see a member of a dance troupe screw up the choreography, it impacts their experience all the same.\n\nIn other words, don't forget that the hard work and extra effort you put into making your code better is playing a much bigger role than you realize. And even if no one will ever pat you on the back for making the code more maintainable and/or commend you for that seamless transition you spent two hours tweaking, I can assure you that your users and I will be thanking you each time we visit your site.\n","source":"_posts/when-nobody-is-watching.md","raw":"---\ntitle: \"When Nobody is Watching\"\ndate: 2017-03-04 15:08:55\ntags:\n  - inspiration\n  - creativity\n---\n\n\nWhile I was taking a break today, I decided to check to see if one of my favorite choreographers [Matt Steffanina](https://www.youtube.com/channel/UCczFdwWpVEpoqb-eMm4c4dQ) had any new material up for some creative inspiration. And after a couple of videos, I stumbled upon this surprising gem:\n\nhttps://www.youtube.com/watch?v=U3c3kfeXPuc\n\nTo my surprise, I found myself more interested in what Matt had to say prior to the choreography than anything else. Because while I would typically just skip straight to the choreography, I happened to catch a soundbite of him talking about he didn't start dancing until he was 18. All of a sudden, it was like, \"Whoa. Hang on. Rewind!\"\n\nOf all the things he said, the thing that stuck out the most to me is:\n\n**\"What matters is the work you put in *when nobody is watching.*\"****\n\nThe desire to become better at something is often tied with some level of desire for that achievement to be met with recognition. So in the instance of dance, while there is the joy of dancing for the sake of dancing, it would be naiive to ignore the adrenaline and high one gets when performing in front of a crowd of people who are celebrating your art. Yet it is at Matt says, what ultimately matters is the work ethic you put into things when no one is watching.\n\nI know that this is a bit of a departure from coding, but the principle transfers over just the same. If you think about it, every time a user loads up a site or app you built, isn't that like a performance in itself? It doesn't come with the recognition or accolades that one does on stage, but it's a performance all the same. And even though users will be unable to look at the site and point directly to the culprit responsible for their crappy experience the way they would be able to see a member of a dance troupe screw up the choreography, it impacts their experience all the same.\n\nIn other words, don't forget that the hard work and extra effort you put into making your code better is playing a much bigger role than you realize. And even if no one will ever pat you on the back for making the code more maintainable and/or commend you for that seamless transition you spent two hours tweaking, I can assure you that your users and I will be thanking you each time we visit your site.\n","slug":"when-nobody-is-watching","published":1,"updated":"2017-03-04T20:09:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2ddy45p001hnwxvbqvxf9kv","content":"<p>While I was taking a break today, I decided to check to see if one of my favorite choreographers <a href=\"https://www.youtube.com/channel/UCczFdwWpVEpoqb-eMm4c4dQ\" target=\"_blank\" rel=\"external\">Matt Steffanina</a> had any new material up for some creative inspiration. And after a couple of videos, I stumbled upon this surprising gem:</p>\n<p><a href=\"https://www.youtube.com/watch?v=U3c3kfeXPuc\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=U3c3kfeXPuc</a></p>\n<p>To my surprise, I found myself more interested in what Matt had to say prior to the choreography than anything else. Because while I would typically just skip straight to the choreography, I happened to catch a soundbite of him talking about he didn’t start dancing until he was 18. All of a sudden, it was like, “Whoa. Hang on. Rewind!”</p>\n<p>Of all the things he said, the thing that stuck out the most to me is:</p>\n<p><strong>“What matters is the work you put in <em>when nobody is watching.</em>“**</strong></p>\n<p>The desire to become better at something is often tied with some level of desire for that achievement to be met with recognition. So in the instance of dance, while there is the joy of dancing for the sake of dancing, it would be naiive to ignore the adrenaline and high one gets when performing in front of a crowd of people who are celebrating your art. Yet it is at Matt says, what ultimately matters is the work ethic you put into things when no one is watching.</p>\n<p>I know that this is a bit of a departure from coding, but the principle transfers over just the same. If you think about it, every time a user loads up a site or app you built, isn’t that like a performance in itself? It doesn’t come with the recognition or accolades that one does on stage, but it’s a performance all the same. And even though users will be unable to look at the site and point directly to the culprit responsible for their crappy experience the way they would be able to see a member of a dance troupe screw up the choreography, it impacts their experience all the same.</p>\n<p>In other words, don’t forget that the hard work and extra effort you put into making your code better is playing a much bigger role than you realize. And even if no one will ever pat you on the back for making the code more maintainable and/or commend you for that seamless transition you spent two hours tweaking, I can assure you that your users and I will be thanking you each time we visit your site.</p>\n","excerpt":"","more":"<p>While I was taking a break today, I decided to check to see if one of my favorite choreographers <a href=\"https://www.youtube.com/channel/UCczFdwWpVEpoqb-eMm4c4dQ\">Matt Steffanina</a> had any new material up for some creative inspiration. And after a couple of videos, I stumbled upon this surprising gem:</p>\n<p><a href=\"https://www.youtube.com/watch?v=U3c3kfeXPuc\">https://www.youtube.com/watch?v=U3c3kfeXPuc</a></p>\n<p>To my surprise, I found myself more interested in what Matt had to say prior to the choreography than anything else. Because while I would typically just skip straight to the choreography, I happened to catch a soundbite of him talking about he didn’t start dancing until he was 18. All of a sudden, it was like, “Whoa. Hang on. Rewind!”</p>\n<p>Of all the things he said, the thing that stuck out the most to me is:</p>\n<p><strong>“What matters is the work you put in <em>when nobody is watching.</em>“**</strong></p>\n<p>The desire to become better at something is often tied with some level of desire for that achievement to be met with recognition. So in the instance of dance, while there is the joy of dancing for the sake of dancing, it would be naiive to ignore the adrenaline and high one gets when performing in front of a crowd of people who are celebrating your art. Yet it is at Matt says, what ultimately matters is the work ethic you put into things when no one is watching.</p>\n<p>I know that this is a bit of a departure from coding, but the principle transfers over just the same. If you think about it, every time a user loads up a site or app you built, isn’t that like a performance in itself? It doesn’t come with the recognition or accolades that one does on stage, but it’s a performance all the same. And even though users will be unable to look at the site and point directly to the culprit responsible for their crappy experience the way they would be able to see a member of a dance troupe screw up the choreography, it impacts their experience all the same.</p>\n<p>In other words, don’t forget that the hard work and extra effort you put into making your code better is playing a much bigger role than you realize. And even if no one will ever pat you on the back for making the code more maintainable and/or commend you for that seamless transition you spent two hours tweaking, I can assure you that your users and I will be thanking you each time we visit your site.</p>\n"},{"title":"\"Cheap\" Outsourcing","date":"2017-05-06T17:07:17.000Z","_content":"\nI was reading my daily Quora digest this morning and the following post: [\"What did you do to make your software career better?\"](https://www.quora.com/What-did-you-do-to-make-your-software-career-better) To my surprise and disappointment, one of the most upvoted answers was \"to quit ... [because of] cheap outsourcing.\" And while outsourcing has had an impact on the job market, this answer is complete nonsense.\n\n<!-- more -->\n\n## Misconception #1: \"Less expense, more productivity\"\n\nThis statements checks out at first glance. The reality, however, is that it is only a shallow truth. More often than not, there are complications than people realize. There are two primary reason for this:\n\n### There are two different kinds of expenses\n\nThis statement targets the most obvious of the two: compensation (i.e., salary and benefits). Without a doubt, outsourcing is cheaper because:\n\n1. Salaries are much lower outside the U.S.\n\n2. You don't have to worry about benefits\n\n3. If things don't work out or you don't need them anymore, you can just let them go.\n\nThe other type, however, is the one that costs you in the long run: intellectual debt. It happens in two different ways.\n\n1. **Losing ownership of the product** The more one relies on outsourcing, the more one loses control over the actual product itself. You're not the one who built it, so maintaining / fixing / enhancing it is going to be a pain. You're either going to have to deal with a code base you don't understand, or you are stuck with hoping the outsourced talent can fix it. And if they run into issues or unable to fix it in the time you need, you're just SOL.\n\n2. **Decaying morale / Diminishing talent**\n\nAssuming that the company has an internal team, relying on outsourcing as the primary workforce can cause morale to decay. After all, most developers are in the field because they enjoy creating something with their own hands. Excluding people who want to become managers, most developers are going to get bored and leave.\n\n### Productivity also comes in many forms\n\nFor sake of argument, we're going to simplify the obvious form of productivity: lines of code released every iteration. After all, if you managed to hire five offshore developers for the price of one, simple math would guarantee greater production. The problem with this kind of thinking is that it makes software development analogous to factories. And that could not be further from the truth for one reason: **technical debt.**\n\nWhile it might feel like outsourcing gets the job done faster, this is often at the expense of quality and long term decisions. In other words, imagine you had someone build and decorate you a two story house in a month for half of the normal cost. Shortly after the job is complete though, you find out that water can only come out of one outlet at a time. And also, don't try rearranging furniture because they welded it to the floor.\n\n## Misconception #2: \"The only way to survive is to take up the workload of more than 1 person.\"\n\nI am sorry that the author of this response felt this way, but **the problem is with the company / leadership and not with the industry as a whole**. It doesn't matter what job you choose, even freelancers will encounter horrible clients. The difference lies in what you choose to do about it.\n\nIf you should find yourself in this situation, you GTFO. I assure you that the mental and emotional toll is not worth it in the long run. And on the flip side, I assure you that good managers who care about your well-being exist.\n\n## Misconception #3: \"My salary and career [have] gone stagnant [because of] cheap outsourcing\"\n\nI'll address this statement in two parts: (1) salary and (2) career.\n\n### \"Stagnant Salary\"\n\nUnless your company has some weird pay scale I'm not aware of, we are all going to hit a cap with our salary at some point. If one expects their pay to increase time just because, I got bad news for you. That is a false sense of entitlement that is only going to land you in a world of hurt.\n\nIf a higher salary is all you want, jumping ship to another company is your best bet. Or if you want pay the scales according to your accomplishments, try sales or start your own business. Outsourcing is the least of your problems.\n\n### \"Stagnant Career\"\n\nThis is perhaps the most absurd statement I read in the entire answer. Since when does some random developer in another continent impact one's career growth? As far as I'm aware, they do not have control over what I do with my time and my ability to learn and develop new skills.\n\nIf you feel like your career is stagnant, one of two things needs to happen:\n\n1. **You pick up new skills to challenge your abilities as a developer.** In other words, if your primary skills are HTML and CSS, maybe it's time to pick up some JavaScript. In other words, challenge yourself with something new.\n\n2. **The environment you are in needs to change.** Remember that job positions are usually malleable. Start by trying expand your role and responsibilities within the team. If that goes unappreciated, the answer is simple: leave. They have no interest in growing you, so you should have no interest in helping them grow either.\n\n## Final Thoughts\n\n### To Leadership and Management:\n\nOutsourcing is an avenue that can help keep the budget smaller and be effective if used properly. However, I hope that the decision is made with the consultation of someone with the technical expertise. Because at the end of the day, outsourcing is often not as “cheap” as everyone perceives it to be.\n\n### To Future and Current Developers:\n\nCountless posts and talks have said this, but software development is hard. The learning curve is never ending and the field will never be static. Outsourcing / automation / [insert new things here] is just another complication as well. Do not see these things as attempts at making you irrelevant. Instead, use it as motivation to continue growing your arsenal of skills.\n\n*Originally posted on Medium: https://medium.com/@bencodezen/cheap-outsourcing-74401d4a7fa8*\n","source":"_posts/cheap-outsourcing.md","raw":"---\ntitle: '\"Cheap\" Outsourcing'\ndate: 2017-05-06 13:07:17\ncategories: Meditations\ntags:\n\t- outsourcing\n\t- management\n---\n\nI was reading my daily Quora digest this morning and the following post: [\"What did you do to make your software career better?\"](https://www.quora.com/What-did-you-do-to-make-your-software-career-better) To my surprise and disappointment, one of the most upvoted answers was \"to quit ... [because of] cheap outsourcing.\" And while outsourcing has had an impact on the job market, this answer is complete nonsense.\n\n<!-- more -->\n\n## Misconception #1: \"Less expense, more productivity\"\n\nThis statements checks out at first glance. The reality, however, is that it is only a shallow truth. More often than not, there are complications than people realize. There are two primary reason for this:\n\n### There are two different kinds of expenses\n\nThis statement targets the most obvious of the two: compensation (i.e., salary and benefits). Without a doubt, outsourcing is cheaper because:\n\n1. Salaries are much lower outside the U.S.\n\n2. You don't have to worry about benefits\n\n3. If things don't work out or you don't need them anymore, you can just let them go.\n\nThe other type, however, is the one that costs you in the long run: intellectual debt. It happens in two different ways.\n\n1. **Losing ownership of the product** The more one relies on outsourcing, the more one loses control over the actual product itself. You're not the one who built it, so maintaining / fixing / enhancing it is going to be a pain. You're either going to have to deal with a code base you don't understand, or you are stuck with hoping the outsourced talent can fix it. And if they run into issues or unable to fix it in the time you need, you're just SOL.\n\n2. **Decaying morale / Diminishing talent**\n\nAssuming that the company has an internal team, relying on outsourcing as the primary workforce can cause morale to decay. After all, most developers are in the field because they enjoy creating something with their own hands. Excluding people who want to become managers, most developers are going to get bored and leave.\n\n### Productivity also comes in many forms\n\nFor sake of argument, we're going to simplify the obvious form of productivity: lines of code released every iteration. After all, if you managed to hire five offshore developers for the price of one, simple math would guarantee greater production. The problem with this kind of thinking is that it makes software development analogous to factories. And that could not be further from the truth for one reason: **technical debt.**\n\nWhile it might feel like outsourcing gets the job done faster, this is often at the expense of quality and long term decisions. In other words, imagine you had someone build and decorate you a two story house in a month for half of the normal cost. Shortly after the job is complete though, you find out that water can only come out of one outlet at a time. And also, don't try rearranging furniture because they welded it to the floor.\n\n## Misconception #2: \"The only way to survive is to take up the workload of more than 1 person.\"\n\nI am sorry that the author of this response felt this way, but **the problem is with the company / leadership and not with the industry as a whole**. It doesn't matter what job you choose, even freelancers will encounter horrible clients. The difference lies in what you choose to do about it.\n\nIf you should find yourself in this situation, you GTFO. I assure you that the mental and emotional toll is not worth it in the long run. And on the flip side, I assure you that good managers who care about your well-being exist.\n\n## Misconception #3: \"My salary and career [have] gone stagnant [because of] cheap outsourcing\"\n\nI'll address this statement in two parts: (1) salary and (2) career.\n\n### \"Stagnant Salary\"\n\nUnless your company has some weird pay scale I'm not aware of, we are all going to hit a cap with our salary at some point. If one expects their pay to increase time just because, I got bad news for you. That is a false sense of entitlement that is only going to land you in a world of hurt.\n\nIf a higher salary is all you want, jumping ship to another company is your best bet. Or if you want pay the scales according to your accomplishments, try sales or start your own business. Outsourcing is the least of your problems.\n\n### \"Stagnant Career\"\n\nThis is perhaps the most absurd statement I read in the entire answer. Since when does some random developer in another continent impact one's career growth? As far as I'm aware, they do not have control over what I do with my time and my ability to learn and develop new skills.\n\nIf you feel like your career is stagnant, one of two things needs to happen:\n\n1. **You pick up new skills to challenge your abilities as a developer.** In other words, if your primary skills are HTML and CSS, maybe it's time to pick up some JavaScript. In other words, challenge yourself with something new.\n\n2. **The environment you are in needs to change.** Remember that job positions are usually malleable. Start by trying expand your role and responsibilities within the team. If that goes unappreciated, the answer is simple: leave. They have no interest in growing you, so you should have no interest in helping them grow either.\n\n## Final Thoughts\n\n### To Leadership and Management:\n\nOutsourcing is an avenue that can help keep the budget smaller and be effective if used properly. However, I hope that the decision is made with the consultation of someone with the technical expertise. Because at the end of the day, outsourcing is often not as “cheap” as everyone perceives it to be.\n\n### To Future and Current Developers:\n\nCountless posts and talks have said this, but software development is hard. The learning curve is never ending and the field will never be static. Outsourcing / automation / [insert new things here] is just another complication as well. Do not see these things as attempts at making you irrelevant. Instead, use it as motivation to continue growing your arsenal of skills.\n\n*Originally posted on Medium: https://medium.com/@bencodezen/cheap-outsourcing-74401d4a7fa8*\n","slug":"cheap-outsourcing","published":1,"updated":"2017-05-06T17:17:41.000Z","_id":"cj2ddyk2n0021nwxv5k4lnh97","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I was reading my daily Quora digest this morning and the following post: <a href=\"https://www.quora.com/What-did-you-do-to-make-your-software-career-better\" target=\"_blank\" rel=\"external\">“What did you do to make your software career better?”</a> To my surprise and disappointment, one of the most upvoted answers was “to quit … [because of] cheap outsourcing.” And while outsourcing has had an impact on the job market, this answer is complete nonsense.</p>\n<a id=\"more\"></a>\n<h2 id=\"Misconception-1-“Less-expense-more-productivity”\"><a href=\"#Misconception-1-“Less-expense-more-productivity”\" class=\"headerlink\" title=\"Misconception #1: “Less expense, more productivity”\"></a>Misconception #1: “Less expense, more productivity”</h2><p>This statements checks out at first glance. The reality, however, is that it is only a shallow truth. More often than not, there are complications than people realize. There are two primary reason for this:</p>\n<h3 id=\"There-are-two-different-kinds-of-expenses\"><a href=\"#There-are-two-different-kinds-of-expenses\" class=\"headerlink\" title=\"There are two different kinds of expenses\"></a>There are two different kinds of expenses</h3><p>This statement targets the most obvious of the two: compensation (i.e., salary and benefits). Without a doubt, outsourcing is cheaper because:</p>\n<ol>\n<li><p>Salaries are much lower outside the U.S.</p>\n</li>\n<li><p>You don’t have to worry about benefits</p>\n</li>\n<li><p>If things don’t work out or you don’t need them anymore, you can just let them go.</p>\n</li>\n</ol>\n<p>The other type, however, is the one that costs you in the long run: intellectual debt. It happens in two different ways.</p>\n<ol>\n<li><p><strong>Losing ownership of the product</strong> The more one relies on outsourcing, the more one loses control over the actual product itself. You’re not the one who built it, so maintaining / fixing / enhancing it is going to be a pain. You’re either going to have to deal with a code base you don’t understand, or you are stuck with hoping the outsourced talent can fix it. And if they run into issues or unable to fix it in the time you need, you’re just SOL.</p>\n</li>\n<li><p><strong>Decaying morale / Diminishing talent</strong></p>\n</li>\n</ol>\n<p>Assuming that the company has an internal team, relying on outsourcing as the primary workforce can cause morale to decay. After all, most developers are in the field because they enjoy creating something with their own hands. Excluding people who want to become managers, most developers are going to get bored and leave.</p>\n<h3 id=\"Productivity-also-comes-in-many-forms\"><a href=\"#Productivity-also-comes-in-many-forms\" class=\"headerlink\" title=\"Productivity also comes in many forms\"></a>Productivity also comes in many forms</h3><p>For sake of argument, we’re going to simplify the obvious form of productivity: lines of code released every iteration. After all, if you managed to hire five offshore developers for the price of one, simple math would guarantee greater production. The problem with this kind of thinking is that it makes software development analogous to factories. And that could not be further from the truth for one reason: <strong>technical debt.</strong></p>\n<p>While it might feel like outsourcing gets the job done faster, this is often at the expense of quality and long term decisions. In other words, imagine you had someone build and decorate you a two story house in a month for half of the normal cost. Shortly after the job is complete though, you find out that water can only come out of one outlet at a time. And also, don’t try rearranging furniture because they welded it to the floor.</p>\n<h2 id=\"Misconception-2-“The-only-way-to-survive-is-to-take-up-the-workload-of-more-than-1-person-”\"><a href=\"#Misconception-2-“The-only-way-to-survive-is-to-take-up-the-workload-of-more-than-1-person-”\" class=\"headerlink\" title=\"Misconception #2: “The only way to survive is to take up the workload of more than 1 person.”\"></a>Misconception #2: “The only way to survive is to take up the workload of more than 1 person.”</h2><p>I am sorry that the author of this response felt this way, but <strong>the problem is with the company / leadership and not with the industry as a whole</strong>. It doesn’t matter what job you choose, even freelancers will encounter horrible clients. The difference lies in what you choose to do about it.</p>\n<p>If you should find yourself in this situation, you GTFO. I assure you that the mental and emotional toll is not worth it in the long run. And on the flip side, I assure you that good managers who care about your well-being exist.</p>\n<h2 id=\"Misconception-3-“My-salary-and-career-have-gone-stagnant-because-of-cheap-outsourcing”\"><a href=\"#Misconception-3-“My-salary-and-career-have-gone-stagnant-because-of-cheap-outsourcing”\" class=\"headerlink\" title=\"Misconception #3: “My salary and career [have] gone stagnant [because of] cheap outsourcing”\"></a>Misconception #3: “My salary and career [have] gone stagnant [because of] cheap outsourcing”</h2><p>I’ll address this statement in two parts: (1) salary and (2) career.</p>\n<h3 id=\"“Stagnant-Salary”\"><a href=\"#“Stagnant-Salary”\" class=\"headerlink\" title=\"“Stagnant Salary”\"></a>“Stagnant Salary”</h3><p>Unless your company has some weird pay scale I’m not aware of, we are all going to hit a cap with our salary at some point. If one expects their pay to increase time just because, I got bad news for you. That is a false sense of entitlement that is only going to land you in a world of hurt.</p>\n<p>If a higher salary is all you want, jumping ship to another company is your best bet. Or if you want pay the scales according to your accomplishments, try sales or start your own business. Outsourcing is the least of your problems.</p>\n<h3 id=\"“Stagnant-Career”\"><a href=\"#“Stagnant-Career”\" class=\"headerlink\" title=\"“Stagnant Career”\"></a>“Stagnant Career”</h3><p>This is perhaps the most absurd statement I read in the entire answer. Since when does some random developer in another continent impact one’s career growth? As far as I’m aware, they do not have control over what I do with my time and my ability to learn and develop new skills.</p>\n<p>If you feel like your career is stagnant, one of two things needs to happen:</p>\n<ol>\n<li><p><strong>You pick up new skills to challenge your abilities as a developer.</strong> In other words, if your primary skills are HTML and CSS, maybe it’s time to pick up some JavaScript. In other words, challenge yourself with something new.</p>\n</li>\n<li><p><strong>The environment you are in needs to change.</strong> Remember that job positions are usually malleable. Start by trying expand your role and responsibilities within the team. If that goes unappreciated, the answer is simple: leave. They have no interest in growing you, so you should have no interest in helping them grow either.</p>\n</li>\n</ol>\n<h2 id=\"Final-Thoughts\"><a href=\"#Final-Thoughts\" class=\"headerlink\" title=\"Final Thoughts\"></a>Final Thoughts</h2><h3 id=\"To-Leadership-and-Management\"><a href=\"#To-Leadership-and-Management\" class=\"headerlink\" title=\"To Leadership and Management:\"></a>To Leadership and Management:</h3><p>Outsourcing is an avenue that can help keep the budget smaller and be effective if used properly. However, I hope that the decision is made with the consultation of someone with the technical expertise. Because at the end of the day, outsourcing is often not as “cheap” as everyone perceives it to be.</p>\n<h3 id=\"To-Future-and-Current-Developers\"><a href=\"#To-Future-and-Current-Developers\" class=\"headerlink\" title=\"To Future and Current Developers:\"></a>To Future and Current Developers:</h3><p>Countless posts and talks have said this, but software development is hard. The learning curve is never ending and the field will never be static. Outsourcing / automation / [insert new things here] is just another complication as well. Do not see these things as attempts at making you irrelevant. Instead, use it as motivation to continue growing your arsenal of skills.</p>\n<p><em>Originally posted on Medium: <a href=\"https://medium.com/@bencodezen/cheap-outsourcing-74401d4a7fa8\" target=\"_blank\" rel=\"external\">https://medium.com/@bencodezen/cheap-outsourcing-74401d4a7fa8</a></em></p>\n","excerpt":"<p>I was reading my daily Quora digest this morning and the following post: <a href=\"https://www.quora.com/What-did-you-do-to-make-your-software-career-better\">“What did you do to make your software career better?”</a> To my surprise and disappointment, one of the most upvoted answers was “to quit … [because of] cheap outsourcing.” And while outsourcing has had an impact on the job market, this answer is complete nonsense.</p>","more":"<h2 id=\"Misconception-1-“Less-expense-more-productivity”\"><a href=\"#Misconception-1-“Less-expense-more-productivity”\" class=\"headerlink\" title=\"Misconception #1: “Less expense, more productivity”\"></a>Misconception #1: “Less expense, more productivity”</h2><p>This statements checks out at first glance. The reality, however, is that it is only a shallow truth. More often than not, there are complications than people realize. There are two primary reason for this:</p>\n<h3 id=\"There-are-two-different-kinds-of-expenses\"><a href=\"#There-are-two-different-kinds-of-expenses\" class=\"headerlink\" title=\"There are two different kinds of expenses\"></a>There are two different kinds of expenses</h3><p>This statement targets the most obvious of the two: compensation (i.e., salary and benefits). Without a doubt, outsourcing is cheaper because:</p>\n<ol>\n<li><p>Salaries are much lower outside the U.S.</p>\n</li>\n<li><p>You don’t have to worry about benefits</p>\n</li>\n<li><p>If things don’t work out or you don’t need them anymore, you can just let them go.</p>\n</li>\n</ol>\n<p>The other type, however, is the one that costs you in the long run: intellectual debt. It happens in two different ways.</p>\n<ol>\n<li><p><strong>Losing ownership of the product</strong> The more one relies on outsourcing, the more one loses control over the actual product itself. You’re not the one who built it, so maintaining / fixing / enhancing it is going to be a pain. You’re either going to have to deal with a code base you don’t understand, or you are stuck with hoping the outsourced talent can fix it. And if they run into issues or unable to fix it in the time you need, you’re just SOL.</p>\n</li>\n<li><p><strong>Decaying morale / Diminishing talent</strong></p>\n</li>\n</ol>\n<p>Assuming that the company has an internal team, relying on outsourcing as the primary workforce can cause morale to decay. After all, most developers are in the field because they enjoy creating something with their own hands. Excluding people who want to become managers, most developers are going to get bored and leave.</p>\n<h3 id=\"Productivity-also-comes-in-many-forms\"><a href=\"#Productivity-also-comes-in-many-forms\" class=\"headerlink\" title=\"Productivity also comes in many forms\"></a>Productivity also comes in many forms</h3><p>For sake of argument, we’re going to simplify the obvious form of productivity: lines of code released every iteration. After all, if you managed to hire five offshore developers for the price of one, simple math would guarantee greater production. The problem with this kind of thinking is that it makes software development analogous to factories. And that could not be further from the truth for one reason: <strong>technical debt.</strong></p>\n<p>While it might feel like outsourcing gets the job done faster, this is often at the expense of quality and long term decisions. In other words, imagine you had someone build and decorate you a two story house in a month for half of the normal cost. Shortly after the job is complete though, you find out that water can only come out of one outlet at a time. And also, don’t try rearranging furniture because they welded it to the floor.</p>\n<h2 id=\"Misconception-2-“The-only-way-to-survive-is-to-take-up-the-workload-of-more-than-1-person-”\"><a href=\"#Misconception-2-“The-only-way-to-survive-is-to-take-up-the-workload-of-more-than-1-person-”\" class=\"headerlink\" title=\"Misconception #2: “The only way to survive is to take up the workload of more than 1 person.”\"></a>Misconception #2: “The only way to survive is to take up the workload of more than 1 person.”</h2><p>I am sorry that the author of this response felt this way, but <strong>the problem is with the company / leadership and not with the industry as a whole</strong>. It doesn’t matter what job you choose, even freelancers will encounter horrible clients. The difference lies in what you choose to do about it.</p>\n<p>If you should find yourself in this situation, you GTFO. I assure you that the mental and emotional toll is not worth it in the long run. And on the flip side, I assure you that good managers who care about your well-being exist.</p>\n<h2 id=\"Misconception-3-“My-salary-and-career-have-gone-stagnant-because-of-cheap-outsourcing”\"><a href=\"#Misconception-3-“My-salary-and-career-have-gone-stagnant-because-of-cheap-outsourcing”\" class=\"headerlink\" title=\"Misconception #3: “My salary and career [have] gone stagnant [because of] cheap outsourcing”\"></a>Misconception #3: “My salary and career [have] gone stagnant [because of] cheap outsourcing”</h2><p>I’ll address this statement in two parts: (1) salary and (2) career.</p>\n<h3 id=\"“Stagnant-Salary”\"><a href=\"#“Stagnant-Salary”\" class=\"headerlink\" title=\"“Stagnant Salary”\"></a>“Stagnant Salary”</h3><p>Unless your company has some weird pay scale I’m not aware of, we are all going to hit a cap with our salary at some point. If one expects their pay to increase time just because, I got bad news for you. That is a false sense of entitlement that is only going to land you in a world of hurt.</p>\n<p>If a higher salary is all you want, jumping ship to another company is your best bet. Or if you want pay the scales according to your accomplishments, try sales or start your own business. Outsourcing is the least of your problems.</p>\n<h3 id=\"“Stagnant-Career”\"><a href=\"#“Stagnant-Career”\" class=\"headerlink\" title=\"“Stagnant Career”\"></a>“Stagnant Career”</h3><p>This is perhaps the most absurd statement I read in the entire answer. Since when does some random developer in another continent impact one’s career growth? As far as I’m aware, they do not have control over what I do with my time and my ability to learn and develop new skills.</p>\n<p>If you feel like your career is stagnant, one of two things needs to happen:</p>\n<ol>\n<li><p><strong>You pick up new skills to challenge your abilities as a developer.</strong> In other words, if your primary skills are HTML and CSS, maybe it’s time to pick up some JavaScript. In other words, challenge yourself with something new.</p>\n</li>\n<li><p><strong>The environment you are in needs to change.</strong> Remember that job positions are usually malleable. Start by trying expand your role and responsibilities within the team. If that goes unappreciated, the answer is simple: leave. They have no interest in growing you, so you should have no interest in helping them grow either.</p>\n</li>\n</ol>\n<h2 id=\"Final-Thoughts\"><a href=\"#Final-Thoughts\" class=\"headerlink\" title=\"Final Thoughts\"></a>Final Thoughts</h2><h3 id=\"To-Leadership-and-Management\"><a href=\"#To-Leadership-and-Management\" class=\"headerlink\" title=\"To Leadership and Management:\"></a>To Leadership and Management:</h3><p>Outsourcing is an avenue that can help keep the budget smaller and be effective if used properly. However, I hope that the decision is made with the consultation of someone with the technical expertise. Because at the end of the day, outsourcing is often not as “cheap” as everyone perceives it to be.</p>\n<h3 id=\"To-Future-and-Current-Developers\"><a href=\"#To-Future-and-Current-Developers\" class=\"headerlink\" title=\"To Future and Current Developers:\"></a>To Future and Current Developers:</h3><p>Countless posts and talks have said this, but software development is hard. The learning curve is never ending and the field will never be static. Outsourcing / automation / [insert new things here] is just another complication as well. Do not see these things as attempts at making you irrelevant. Instead, use it as motivation to continue growing your arsenal of skills.</p>\n<p><em>Originally posted on Medium: <a href=\"https://medium.com/@bencodezen/cheap-outsourcing-74401d4a7fa8\">https://medium.com/@bencodezen/cheap-outsourcing-74401d4a7fa8</a></em></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2ddy42n0000nwxvztmao9g0","category_id":"cj2ddy42u0002nwxvn5rm68th","_id":"cj2ddy4320008nwxvhez9p5oe"},{"post_id":"cj2ddy44t000xnwxvby50vfmq","category_id":"cj2ddy44w0011nwxvfsvb3fes","_id":"cj2ddy4560019nwxvojwx0cac"},{"post_id":"cj2ddy4500015nwxv82dgbqaz","category_id":"cj2ddy44w0011nwxvfsvb3fes","_id":"cj2ddy45a001bnwxv3xrzrshj"},{"post_id":"cj2ddy45n001fnwxvry13a55m","category_id":"cj2ddy45q001inwxvkzrwv64y","_id":"cj2ddy45s001onwxvpjk02fwv"},{"post_id":"cj2ddyk2n0021nwxv5k4lnh97","category_id":"cj2ddy42u0002nwxvn5rm68th","_id":"cj2jp9buw0001l9xv18rplry6"}],"PostTag":[{"post_id":"cj2ddy42n0000nwxvztmao9g0","tag_id":"cj2ddy42v0003nwxv4z2ghwhm","_id":"cj2ddy433000anwxvhmm88mom"},{"post_id":"cj2ddy42n0000nwxvztmao9g0","tag_id":"cj2ddy4310007nwxv8w5op1md","_id":"cj2ddy433000bnwxv6f0xxubd"},{"post_id":"cj2ddy42x0005nwxvji0zmd1l","tag_id":"cj2ddy4320009nwxvh7r8c4s4","_id":"cj2ddy433000dnwxvr9cqcn2c"},{"post_id":"cj2ddy42x0005nwxvji0zmd1l","tag_id":"cj2ddy433000cnwxve06uv3li","_id":"cj2ddy433000enwxv2oku61lm"},{"post_id":"cj2ddy43q000fnwxvosel9lic","tag_id":"cj2ddy43w000hnwxvoo8umegf","_id":"cj2ddy44e000qnwxvwruvypsx"},{"post_id":"cj2ddy43q000fnwxvosel9lic","tag_id":"cj2ddy444000lnwxv13cdwabq","_id":"cj2ddy44h000snwxv9o9rod88"},{"post_id":"cj2ddy445000mnwxvo9293ke5","tag_id":"cj2ddy44c000onwxv1iv1zhpw","_id":"cj2ddy44u000ynwxv07m7dh4q"},{"post_id":"cj2ddy445000mnwxvo9293ke5","tag_id":"cj2ddy44k000unwxvaslevtbs","_id":"cj2ddy44w0010nwxv89buy6yn"},{"post_id":"cj2ddy44t000xnwxvby50vfmq","tag_id":"cj2ddy44w0012nwxveiwbeee2","_id":"cj2ddy4530017nwxvsgxdpv01"},{"post_id":"cj2ddy44y0014nwxvmdi715j8","tag_id":"cj2ddy4530016nwxvfnzacjvc","_id":"cj2ddy45r001knwxv6euhiyaz"},{"post_id":"cj2ddy44y0014nwxvmdi715j8","tag_id":"cj2ddy45d001dnwxvhoqxyopu","_id":"cj2ddy45r001lnwxv4emlf9f9"},{"post_id":"cj2ddy44y0014nwxvmdi715j8","tag_id":"cj2ddy45p001gnwxv3s9ar6w8","_id":"cj2ddy45s001nnwxvia9ljo3x"},{"post_id":"cj2ddy4530018nwxvrl0zaspl","tag_id":"cj2ddy4530016nwxvfnzacjvc","_id":"cj2ddy45s001qnwxvatfmq88f"},{"post_id":"cj2ddy4530018nwxvrl0zaspl","tag_id":"cj2ddy45r001mnwxvde66ytrz","_id":"cj2ddy45s001rnwxvqoo9i9di"},{"post_id":"cj2ddy457001anwxvovdp0v0a","tag_id":"cj2ddy45s001pnwxvdocecgfd","_id":"cj2ddy45t001tnwxvqk3owkfj"},{"post_id":"cj2ddy45a001cnwxv6v4eqote","tag_id":"cj2ddy45t001snwxvq1axwezk","_id":"cj2ddy45u001vnwxvllygb8md"},{"post_id":"cj2ddy45n001fnwxvry13a55m","tag_id":"cj2ddy45t001unwxvb4jyp9yv","_id":"cj2ddy45v001xnwxvlnjrsx6n"},{"post_id":"cj2ddy45p001hnwxvbqvxf9kv","tag_id":"cj2ddy45v001wnwxv9h84g8si","_id":"cj2ddy45v001znwxv65mv8drx"},{"post_id":"cj2ddy45p001hnwxvbqvxf9kv","tag_id":"cj2ddy45v001ynwxvzb18y7v9","_id":"cj2ddy45v0020nwxvjrwg0bs0"},{"post_id":"cj2ddyk2n0021nwxv5k4lnh97","tag_id":"cj2ddyk2o0022nwxvx286wn8z","_id":"cj2jp9bux0002l9xvu0h2zbqx"},{"post_id":"cj2ddyk2n0021nwxv5k4lnh97","tag_id":"cj2jp9buq0000l9xv8yfdum9w","_id":"cj2jp9bux0003l9xv63o7pku5"}],"Tag":[{"name":"burnout","_id":"cj2ddy42v0003nwxv4z2ghwhm"},{"name":"fatigue","_id":"cj2ddy4310007nwxv8w5op1md"},{"name":"CSSDevConf","_id":"cj2ddy4320009nwxvh7r8c4s4"},{"name":"Conferences","_id":"cj2ddy433000cnwxve06uv3li"},{"name":"cssdevconf","_id":"cj2ddy43w000hnwxvoo8umegf"},{"name":"conferences","_id":"cj2ddy444000lnwxv13cdwabq"},{"name":"AmazonAlexa","_id":"cj2ddy44c000onwxv1iv1zhpw"},{"name":"SDK","_id":"cj2ddy44k000unwxvaslevtbs"},{"name":"travel","_id":"cj2ddy44w0012nwxveiwbeee2"},{"name":"advice","_id":"cj2ddy4530016nwxvfnzacjvc"},{"name":"career","_id":"cj2ddy45d001dnwxvhoqxyopu"},{"name":"jobs","_id":"cj2ddy45p001gnwxv3s9ar6w8"},{"name":"workflow","_id":"cj2ddy45r001mnwxvde66ytrz"},{"name":"languages","_id":"cj2ddy45s001pnwxvdocecgfd"},{"name":"journal","_id":"cj2ddy45t001snwxvq1axwezk"},{"name":"agile","_id":"cj2ddy45t001unwxvb4jyp9yv"},{"name":"inspiration","_id":"cj2ddy45v001wnwxv9h84g8si"},{"name":"creativity","_id":"cj2ddy45v001ynwxvzb18y7v9"},{"name":"outsourcing","_id":"cj2ddyk2o0022nwxvx286wn8z"},{"name":"management","_id":"cj2jp9buq0000l9xv8yfdum9w"}]}}